<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用明文攻击破解加密的zip文件</title>
      <link href="/crack-encrypted-zip-file-with-plaintext-attack.html"/>
      <url>/crack-encrypted-zip-file-with-plaintext-attack.html</url>
      
        <content type="html"><![CDATA[<p><code>bkcrack</code>是一个<code>zip明文攻击</code>工具，<a href="https://github.com/kimci86/bkcrack">点击这里访问仓库地址</a>。</p><p>本教程翻译自<code>bkcrack</code>的示例教程，在翻译过程中，我对示例教程做了一些修改，并增加一些内容。</p><p>仓库的<code>example</code>目录里包含了一个示例文件<code>secrets.zip</code>，本教程将使用这个压缩包来演示<code>zip明文攻击</code>。</p><p>教程使用的环境是<code>MacOS</code>系统，如果你使用的是<code>Windows</code>系统，可以用<code>PowerShell</code>来执行命令。</p><h3 id="一、查看zip包的内容"><a href="#一、查看zip包的内容" class="headerlink" title="一、查看zip包的内容"></a>一、查看zip包的内容</h3><p>首先让我们康康压缩包里面有什么东西，使用终端进入<code>example</code>目录，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ zipinfo secrets.zip</span><br><span class="line"></span><br><span class="line">Archive:  secrets.zip</span><br><span class="line">Zip file size: 56263 bytes, number of entries: 2</span><br><span class="line">-rw-rw-r--  6.3 unx    54799 Bx defN 12-Aug-14 14:51 advice.jpg</span><br><span class="line">-rw-rw-r--  6.3 unx     1265 Bx stor 18-Dec-20 13:33 spiral.svg</span><br><span class="line">2 files, 56064 bytes uncompressed, 55953 bytes compressed:  0.2%</span><br></pre></td></tr></table></figure><p>可以看到，<code>secrets.zip</code>压缩里包含了两个文件：<code>advice.jpg</code>和<code>spiral.svg</code>。<br>第5列为<code>Bx</code>，开头的大写字母<code>B</code>代表文件被加密了，需要密码才能解压。<br>第6列的<code>defN</code>代表<code>advice.jpg</code>被压缩，<code>stor</code>代表<code>spiral.svg</code>未压缩。</p><blockquote><p><code>defN</code>是<code>deflated (normal)</code>的缩写，表示压缩方式是<code>deflated</code>，压缩类型是<code>normal</code>。<br><code>stor</code>是<code>none (stored)</code>的缩写，表示文件未压缩，只进行存储。</p></blockquote><h3 id="二、通过扩展名推测明文"><a href="#二、通过扩展名推测明文" class="headerlink" title="二、通过扩展名推测明文"></a>二、通过扩展名推测明文</h3><p>要进行破解的话，我们必须要知道至少12个字节的明文。通常知道的连续明文越多，破解的速度就越快。</p><p>我们可以从<code>spiral.svg</code>文件的扩展名推测出这是一个<code>xml</code>文件，那么文件的内容很可能以字符串<code>&lt;?xml version=&quot;1.0&quot; </code>开头。假如我们的猜想正确的话，这20个字节的明文已经绰绰有余了。</p><p>幸运的是，压缩包里的<code>spiral.svg</code>文件并未进行压缩，所以可以直接进行明文攻击。</p><p>让我们先把推测的明文保存到文件<code>plain.txt</code>中备用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> -n <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; &#x27;</span> &gt; plain.txt</span><br></pre></td></tr></table></figure><p>执行后<code>example</code>目录下会生成一个<code>plain.txt</code>文本，里面保存着我们推测的明文，加上<code>-n</code>参数是为了让文本末尾不产生换行符。</p><h3 id="三、开始明文攻击"><a href="#三、开始明文攻击" class="headerlink" title="三、开始明文攻击"></a>三、开始明文攻击</h3><p>准备工作就绪，现在可以进行明文攻击了。</p><h4 id="1、常规的明文攻击"><a href="#1、常规的明文攻击" class="headerlink" title="1、常规的明文攻击"></a>1、常规的明文攻击</h4><p>执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ../bkcrack -C secrets.zip -c spiral.svg -p plain.txt</span><br></pre></td></tr></table></figure><blockquote><p>命令的格式为：bkcrack -C 加密的压缩包 -c 存在明文的文件 -p 存储了明文的文本</p></blockquote><p>稍等一会就能得到3个密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">[11:20:10] Z reduction using 12 bytes of known plaintext</span><br><span class="line">100.0 % (12 / 12)</span><br><span class="line">[11:20:10] Attack on 581935 Z values at index 7</span><br><span class="line">Keys: c4490e28 b414a23d 91404b31</span><br><span class="line">30.4 % (176716 / 581935)</span><br><span class="line">[11:23:03] Keys</span><br><span class="line">c4490e28 b414a23d 91404b31</span><br></pre></td></tr></table></figure><p>通过开始时间和结束时间可以算出耗时为2分钟53秒。</p><h4 id="2、附加信息进行明文攻击"><a href="#2、附加信息进行明文攻击" class="headerlink" title="2、附加信息进行明文攻击"></a>2、附加信息进行明文攻击</h4><p>此外，根据<a href="https://pkware.cachefly.net/webdocs/APPNOTE/APPNOTE-6.3.9.TXT">《ZIP文件格式规范》</a>第<code>6.1.6</code>点中所述，压缩包在存储的文件数据之前添加了一个12字节的加密标头，加密标头的最后一个字节是文件<code>CRC</code>值的最高位字节。</p><p>可以通过以下命令来获取<code>spiral.svg</code>文件的<code>CRC</code>值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ zipinfo -v secrets.zip spiral.svg | grep CRC</span><br><span class="line">  32-bit CRC value (hex):                         a99f1d0d</span><br></pre></td></tr></table></figure><p>所以我们知道了文件内容的前一个字节（即偏移量-1处）是<code>0xA9</code>。</p><p>通过以下命令使用附加信息进行攻击：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ../bkcrack -C secrets.zip -c spiral.svg -p plain.txt -x -1 A9</span><br></pre></td></tr></table></figure><blockquote><p>附加信息的格式为：-x 偏移值 十六进制字节数据</p></blockquote><p>执行后同样可以得到3个密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">[11:30:41] Z reduction using 13 bytes of known plaintext</span><br><span class="line">100.0 % (13 / 13)</span><br><span class="line">[11:30:41] Attack on 542303 Z values at index 6</span><br><span class="line">Keys: c4490e28 b414a23d 91404b31</span><br><span class="line">33.9 % (183761 / 542303)</span><br><span class="line">[11:33:41] Keys</span><br><span class="line">c4490e28 b414a23d 91404b31</span><br></pre></td></tr></table></figure><p>可以算出耗时为3分钟，这里多了一个字节的明文，但是破解速度稍微慢了几秒。</p><p>前面说了知道的连续的明文越多，破解的速度就越快，是相对而言的。如果附加的明文有很多个字节的话，那么破解速度就能加快许多。</p><h3 id="四、恢复原始文件"><a href="#四、恢复原始文件" class="headerlink" title="四、恢复原始文件"></a>四、恢复原始文件</h3><p>一旦我们有了3个密钥，我们就可以从压缩包中恢复出原始文件。</p><h4 id="1、修改压缩包的密码"><a href="#1、修改压缩包的密码" class="headerlink" title="1、修改压缩包的密码"></a>1、修改压缩包的密码</h4><p>假设zip压缩包里的所有文件都使用了相同的密钥，那么我们可以使用新密码来将<code>secret.zip</code>存储为一个新的加密压缩包。</p><p>例如使用<code>easy</code>作为新密码，执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ../bkcrack -C secrets.zip -k c4490e28 b414a23d 91404b31 -U secrets_with_new_password.zip easy</span><br></pre></td></tr></table></figure><blockquote><p>命令格式为：bkcrack -C 加密的压缩包 -k 3个密钥 -U 新的压缩包 新密码</p></blockquote><p>执行后会得到一个<code>secrets_with_new_password.zip</code>压缩包，使用<code>easy</code>密码就可以解压出所有文件。</p><h4 id="2、直接提取文件"><a href="#2、直接提取文件" class="headerlink" title="2、直接提取文件"></a>2、直接提取文件</h4><p>我们也可以选择一一提取文件。</p><p>首先提取<code>spiral.svg</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ../bkcrack -C secrets.zip -c spiral.svg -k c4490e28 b414a23d 91404b31 -d spiral_deciphered.svg</span><br></pre></td></tr></table></figure><p>由于压缩包中的<code>spiral.svg</code>文件未压缩，因此执行后得到的<code>spiral_deciphered.svg</code>便是原文件。</p><p>再提取<code>advice.jpg</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ../bkcrack -C secrets.zip -c advice.jpg -k c4490e28 b414a23d 91404b31 -d advice_deciphered.deflate</span><br></pre></td></tr></table></figure><p>因为<code>advice.jpg</code>是通过<code>deflate</code>算法压缩的，所以提取到的<code>advice_deciphered.deflate</code>也是压缩过的，我们需要解压它，为此，<code>tools</code>目录中提供了一个<code>Python</code>脚本，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 ../tools/inflate.py &lt; advice_deciphered.deflate &gt; very_good_advice.jpg</span><br></pre></td></tr></table></figure><p>执行后便可以得到解压的<code>very_good_advice.jpg</code>图片。</p><h3 id="五、通过压缩过的文件进行明文攻击"><a href="#五、通过压缩过的文件进行明文攻击" class="headerlink" title="五、通过压缩过的文件进行明文攻击"></a>五、通过压缩过的文件进行明文攻击</h3><p>假设zip压缩包里没有包含未压缩的文件<code>spiral.svg</code>，而全部文件都是压缩过的，那该怎么办呢？</p><p>我们可以通过<code>advice.jpg</code>文件的扩展名知道这是一张图片，由于图片的文件头前面一部分字节是固定的值，因此我们可以将这些字节作为明文来使用。</p><p>但问题是，这个文件被压缩过了，文件的内容已经发生了改变。想进行明文攻击的话，就必须要知道文件压缩后的内容变成了什么。但是如果不知道原来整个文件的内容，基本不可能推出文件压缩后的内容。</p><p>如果可以在网上轻松找到原始文件，例如压缩包里包含了某个<code>.dll</code>文件，在别的地方可以下载到，就可以拿来使用。然后，可以使用各种压缩软件和压缩级别对其进行压缩，以尝试生成正确的明文。</p><p>假如我们在网上下载到了<code>very_good_advice.jpg</code>图片，下面演示如何通过该图片来获取密钥。</p><h4 id="1、压缩图片文件"><a href="#1、压缩图片文件" class="headerlink" title="1、压缩图片文件"></a>1、压缩图片文件</h4><p>执行命令压缩图片：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ zip very_good_advice.jpg.zip very_good_advice.jpg</span><br></pre></td></tr></table></figure><p>执行后生成<code>very_good_advice.jpg.zip</code>压缩包，查看压缩包信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ zipinfo very_good_advice.jpg.zip</span><br><span class="line"></span><br><span class="line">Archive:  very_good_advice.jpg.zip</span><br><span class="line">Zip file size: 54873 bytes, number of entries: 1</span><br><span class="line">-rw-r--r--  3.0 unx    54799 bx defN 21-Oct-14 16:29 very_good_advice.jpg</span><br><span class="line">1 file, 54799 bytes uncompressed, 54683 bytes compressed:  0.2%</span><br></pre></td></tr></table></figure><p>可以看到该压缩包也是使用<code>deflate</code>算法压缩的。</p><h4 id="2、进行明文攻击"><a href="#2、进行明文攻击" class="headerlink" title="2、进行明文攻击"></a>2、进行明文攻击</h4><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ../bkcrack -C secrets.zip -c advice.jpg -P very_good_advice.jpg.zip -p very_good_advice.jpg</span><br><span class="line"></span><br><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">[11:40:46] Z reduction using 54675 bytes of known plaintext</span><br><span class="line">10.7 % (5855 / 54675)</span><br><span class="line">[11:40:48] Attack on 15 Z values at index 48886</span><br><span class="line">100.0 % (15 / 15)</span><br><span class="line">[11:40:48] Could not find the keys.</span><br></pre></td></tr></table></figure><blockquote><p>命令格式为：bkcrack -C 加密的压缩包 -c 加密的压缩文件 -P 未加密的压缩包 -p 未加密的压缩文件</p></blockquote><p>结果显示无法找到密钥，可能是因为压缩包的压缩率不同，导致压缩后的压缩包数据不同，因此使用这些错误的明文是无法破解的。</p><h4 id="3、寻找zip压缩率"><a href="#3、寻找zip压缩率" class="headerlink" title="3、寻找zip压缩率"></a>3、寻找zip压缩率</h4><p>zip压缩率有<code>0 ~ 9</code>一共10个级别，其中<code>0</code>代表未压缩存储，<code>1</code>代表压缩速度最快(文件最大)，<code>9</code>代表压缩速度最慢(文件最小)，默认的压缩级别是<code>6</code>。</p><p>编写一个<code>Python</code>脚本遍历10个级别进行破解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> level <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nLevel %d:&quot;</span>%(level))</span><br><span class="line">    <span class="comment"># 删除旧压缩包</span></span><br><span class="line">    os.system(<span class="string">&quot;rm very_good_advice.jpg.zip&quot;</span>)</span><br><span class="line">    <span class="comment"># 创建新压缩包</span></span><br><span class="line">    os.system(<span class="string">&quot;zip -%d very_good_advice.jpg.zip very_good_advice.jpg &gt; /dev/null&quot;</span>%(level))</span><br><span class="line">    <span class="comment"># 进行明文攻击</span></span><br><span class="line">    os.system(<span class="string">&quot;../bkcrack -C secrets.zip -c advice.jpg -P very_good_advice.jpg.zip -p very_good_advice.jpg&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Level 0:</span><br><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">Data error: ciphertext is smaller than plaintext.</span><br><span class="line"></span><br><span class="line">Level 1:</span><br><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">Data error: plaintext offset is too large.</span><br><span class="line"></span><br><span class="line">Level 2:</span><br><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">Data error: plaintext offset is too large.</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">Level 9:</span><br><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">[11:40:23] Z reduction using 54674 bytes of known plaintext</span><br><span class="line">13.4 % (7311 / 54674)</span><br><span class="line">[11:40:24] Attack on 24 Z values at index 47465</span><br><span class="line">100.0 % (24 / 24)</span><br><span class="line">[11:40:24] Could not find the keys.</span><br></pre></td></tr></table></figure><p>无法获取到密钥，说明<code>secrets.zip</code>这个压缩包应该不是使用<code>MacOS</code>系统的<code>zip</code>命令创建的。</p><h4 id="4、测试别的压缩软件"><a href="#4、测试别的压缩软件" class="headerlink" title="4、测试别的压缩软件"></a>4、测试别的压缩软件</h4><p>接下来使用<code>7z</code>来测试，<code>7z</code>有<code>1 ~ 9</code>一共9个压缩级别，执行以下<code>Python</code>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> level <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nLevel %d:&quot;</span>%(level))</span><br><span class="line">    <span class="comment"># 删除旧压缩包</span></span><br><span class="line">    os.system(<span class="string">&quot;rm very_good_advice.jpg.zip&quot;</span>)</span><br><span class="line">    <span class="comment"># 创建新压缩包</span></span><br><span class="line">    os.system(<span class="string">&quot;7z a -tzip -mx%d very_good_advice.jpg.zip very_good_advice.jpg &gt; /dev/null&quot;</span>%(level))</span><br><span class="line">    <span class="comment"># 进行明文攻击</span></span><br><span class="line">    os.system(<span class="string">&quot;../bkcrack -C secrets.zip -c advice.jpg -P very_good_advice.jpg.zip -p very_good_advice.jpg&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Level 1:</span><br><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">Data error: ciphertext is smaller than plaintext.</span><br><span class="line"></span><br><span class="line">Level 2:</span><br><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">Data error: ciphertext is smaller than plaintext.</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">Level 8:</span><br><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">Data error: plaintext offset is too large.</span><br><span class="line"></span><br><span class="line">Level 9:</span><br><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">[11:50:49] Z reduction using 54680 bytes of known plaintext</span><br><span class="line">16.0 % (8732 / 54680)</span><br><span class="line">[11:50:50] Attack on 141 Z values at index 46518</span><br><span class="line">Keys: c4490e28 b414a23d 91404b31</span><br><span class="line">99.3 % (140 / 141)</span><br><span class="line">[11:50:51] Keys</span><br><span class="line">c4490e28 b414a23d 91404b31</span><br></pre></td></tr></table></figure><p>可见，使用压缩级别<code>9</code>可以成功获取到密钥。</p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教学 </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我把博客从WordPress迁移到Hexo这件事</title>
      <link href="/migrate-wordpres-to-hexo.html"/>
      <url>/migrate-wordpres-to-hexo.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、为什么要迁移博客"><a href="#一、为什么要迁移博客" class="headerlink" title="一、为什么要迁移博客"></a>一、为什么要迁移博客</h3><p>我本来以为我已经过了折腾博客的年纪了，没想到最近还是把博客从<code>WordPress</code>迁移到了<code>Hexo</code>，主要有以下几个原因：</p><h4 id="1、People-Die-But-Long-Live-GitHub"><a href="#1、People-Die-But-Long-Live-GitHub" class="headerlink" title="1、People Die, But Long Live GitHub"></a>1、People Die, But Long Live GitHub</h4><p>最近，我用了10多年的<code>PHP</code>主机商宣布停运了，突然感到有些失落，我已经经历过太多网站的关停了，包括在我博客留下足迹的众多个人博客，现在还能打开的博客寥寥无几。</p><p>我就在思考，如果我有一天去世了，我的空间到期后也会被关闭，域名到期也会被回收，所以我希望我的博客在我大限到来之后能够再运行久一点。</p><p>因此我打算将<code>WordPress</code>博客迁移到静态博客<code>Hexo</code>，因为静态博客可以托管在<code>GitHub Pages</code>里，如果<code>GitHub</code>不倒闭的话，我的博客也不会关闭。</p><p>人终有一死，但<code>GitHub</code>永存不朽。</p><p>如果正在看这篇文章的你所在的年份是<code>2121</code>年之后的话，说明100年后我的博客还存在，至少证明我现在的决定是正确的。</p><h4 id="2、使用Markdown写作"><a href="#2、使用Markdown写作" class="headerlink" title="2、使用Markdown写作"></a>2、使用<code>Markdown</code>写作</h4><p>我一直幻想<code>WordPress</code>的编辑器有一天能够支持<code>Markdown</code>，可惜每次更新后都没看到希望，而且编辑器也变得越来越非主流。</p><p>我使用了第三方的<code>Markdown</code>插件，但是插件有时会把<code>Markdown</code>格式的文章又转换成<code>html</code>编码，导致文章很难编辑。</p><p>而<code>Hexo</code>是为程序员而生的，只需用<code>Markdown</code>格式编写文章，<code>Hexo</code>框架会自动渲染，非常丝滑优雅。</p><h4 id="3、静态博客的评论系统"><a href="#3、静态博客的评论系统" class="headerlink" title="3、静态博客的评论系统"></a>3、静态博客的评论系统</h4><p>我很久以前就想使用静态博客了，但是考虑到静态博客无法进行评论，不能将<code>WordPress</code>的评论迁移过去，所以还是放弃了。</p><p>经过多年的发展，市面上已经涌现出很多优秀的开源评论系统，如<code>beaudar</code>, <code>valine</code>, <code>twikoo</code>, <code>waline</code>, <code>minivaline</code>, <code>disqus</code>, <code>disqusjs</code>, <code>gitalk</code>, <code>vssue</code>, <code>livere</code>, <code>isso</code>, <code>hashover</code>等。</p><p>经过对比，我选择了使用<code>waline</code>评论系统，官网为 <a href="https://waline.js.org/">https://waline.js.org</a> 。</p><h4 id="4、GitHub的访问速度"><a href="#4、GitHub的访问速度" class="headerlink" title="4、GitHub的访问速度"></a>4、GitHub的访问速度</h4><p>众所周知，国内访问<code>GitHub Pages</code>的速度非常慢，有时甚至无法访问。</p><p>不过目前已经有别的网站托管服务商可以使用，比如优秀的<code>Vercel</code>，可以看这篇介绍文章：<br><a href="https://zhuanlan.zhihu.com/p/347990778">《Vercel是什么神仙网站？》</a></p><p>主站可以使用<code>Vercel</code>部署，而<code>GitHub Pages</code>用来作为博客的备份。</p><h3 id="二、博客迁移过程踩的坑"><a href="#二、博客迁移过程踩的坑" class="headerlink" title="二、博客迁移过程踩的坑"></a>二、博客迁移过程踩的坑</h3><p>博客迁移过程主要参考了这篇文章：<a href="https://www.hrwhisper.me/wordpress-to-hexo/">《WordPress迁移到Hexo填坑记录》</a> 。  </p><p>该文章将博客的评论迁移到<code>valine</code>评论系统，我使用的是<code>waline</code>，因为<code>waline</code>是基于<code>valine</code>开发的，所以迁移的过程大致相同。</p><h4 id="1、博客文章的迁移"><a href="#1、博客文章的迁移" class="headerlink" title="1、博客文章的迁移"></a>1、博客文章的迁移</h4><p>登录<code>WordPress</code>后台，点击<kbd>工具</kbd> - <kbd>导出</kbd> - <kbd>下载导出的文件</kbd>，可以得到<code>WordPress.2021-08-15.xml</code>文件，存放到<code>hexo/source/</code>目录下。</p><p>使用命令安装文章转换工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-migrator-wordpress --save</span><br></pre></td></tr></table></figure><p>使用以下命令将<code>WordPress</code>文章转成<code>Hexo</code>的文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo migrate wordpress WordPress.2021-08-15.xml --paragraph-fix --import-image --skipduplicate</span><br></pre></td></tr></table></figure><p>转换后文章保存在<code>hexo/source/_posts</code>目录下，由于我之前有一半文章是使用富文本编辑器写的，所以转换后<code>Markdown</code>格式有点问题，因此我手动把所有文章都修整了一遍。</p><h4 id="2、文章链接的修改"><a href="#2、文章链接的修改" class="headerlink" title="2、文章链接的修改"></a>2、文章链接的修改</h4><p>我的<code>WordPress</code>文章的固定链接以前一直使用<code>/%category%/%postname%.html</code>，感觉还是一开始考虑得不够周到，导致现在出现了一点麻烦。</p><p>当初使用<code>WordPress</code>建站的时候，我觉得文章链接加上分类目录的话会更加清晰，能够方便分类。但是我大部分文章都会存放在多个分类里，而分类目录是<code>WordPress</code>随机添加的。</p><p>而<code>Hexo</code>的博客系统使用目录分类比较麻烦，考虑再三，长痛不如短痛，将<code>Hexo</code>的链接去掉了分类目录，只保留了文章名。</p><p>这样会导致旧的链接跳进来后找不到文章，所以我先在<code>WordPress</code>做了<code>301</code>重定向，等搜索引擎更新链接后，再开放<code>Hexo</code>博客。</p><h4 id="3、评论的迁移"><a href="#3、评论的迁移" class="headerlink" title="3、评论的迁移"></a>3、评论的迁移</h4><p>我的<code>WordPress</code>里有<code>1400</code>多条评论，这些评论必须要保留下来。</p><p>新的评论系统使用了<code>waline</code>+<code>MySQL</code>部署，所以迁移过程和上面的文章教程类似，用脚本将评论导入到<code>MySQL</code>数据库即可。</p><p>但是我发现了那篇教程的脚本代码有<code>bug</code>：有些评论的父级id赋值有误，会导致有些评论加载不出来。</p><p>比如A发表了一条评论，B评论了A，这时B的<code>pid</code>和<code>rid</code>都是A。<br>如果C又评论了B，那么C的<code>pid</code>是B，但是<code>rid</code>是A。<br><code>rid</code>是评论的根id，如果设置错误的话，C的评论就无法显示出来。</p><p>这个<code>bug</code>我已经修复了，文章后面会贴出代码。</p><h4 id="4、文章浏览数的迁移"><a href="#4、文章浏览数的迁移" class="headerlink" title="4、文章浏览数的迁移"></a>4、文章浏览数的迁移</h4><p>文章的浏览数也是必须保留的，所幸的是，<code>waline</code>也自带了统计文章浏览数的功能。</p><p>和评论的迁移一样，也是将浏览数批量保存到<code>MySQL</code>数据库。</p><h4 id="5、数据库迁移代码"><a href="#5、数据库迁移代码" class="headerlink" title="5、数据库迁移代码"></a>5、数据库迁移代码</h4><p>我使用了<code>macOS</code>的<code>MAMP</code>集成环境运行<code>MySQL</code>，再使用<code>Python</code>执行脚本，参考代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timezone, timedelta</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WPComment</span>:</span></span><br><span class="line">    post_id: <span class="built_in">int</span></span><br><span class="line">    post_name: <span class="built_in">str</span></span><br><span class="line">    post_type: <span class="built_in">str</span></span><br><span class="line">    comment_ID: <span class="built_in">int</span></span><br><span class="line">    comment_author: <span class="built_in">str</span></span><br><span class="line">    comment_author_email: <span class="built_in">str</span></span><br><span class="line">    comment_author_url: <span class="built_in">str</span></span><br><span class="line">    comment_author_IP: <span class="built_in">str</span></span><br><span class="line">    comment_date: <span class="built_in">str</span></span><br><span class="line">    comment_content: <span class="built_in">str</span></span><br><span class="line">    comment_agent: <span class="built_in">str</span></span><br><span class="line">    comment_parent: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WPCounter</span>:</span></span><br><span class="line">    post_id: <span class="built_in">int</span></span><br><span class="line">    post_name: <span class="built_in">str</span></span><br><span class="line">    post_type: <span class="built_in">str</span></span><br><span class="line">    post_views: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#要替换的链接</span></span><br><span class="line">replace_post_name = &#123;</span><br><span class="line">    <span class="string">&#x27;the-chatty-jokers&#x27;</span> : <span class="string">&#x27;math-and-magic-the-chatty-jokers&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dicing-with-destiny&#x27;</span> : <span class="string">&#x27;math-and-magic-dicing-with-destiny&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WPDatabase</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.db = pymysql.connect(</span><br><span class="line">            host=<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">            user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">            password=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            database=<span class="string">&#x27;wordpress&#x27;</span>,</span><br><span class="line">            <span class="comment"># MaxOS使用MAMP时需要加上unix_socket</span></span><br><span class="line">            <span class="comment"># unix_socket=&#x27;/Applications/MAMP/tmp/mysql/mysql.sock&#x27;,</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取评论</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_comments</span>(<span class="params">self</span>):</span></span><br><span class="line">        sql_comment = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            SELECT </span></span><br><span class="line"><span class="string">                p.ID,</span></span><br><span class="line"><span class="string">                p.post_name,</span></span><br><span class="line"><span class="string">                p.post_type,</span></span><br><span class="line"><span class="string">                c.comment_ID,</span></span><br><span class="line"><span class="string">                c.comment_author,</span></span><br><span class="line"><span class="string">                c.comment_author_email,</span></span><br><span class="line"><span class="string">                c.comment_author_url,</span></span><br><span class="line"><span class="string">                c.comment_author_IP,</span></span><br><span class="line"><span class="string">                c.comment_date,</span></span><br><span class="line"><span class="string">                c.comment_content,</span></span><br><span class="line"><span class="string">                c.comment_agent,</span></span><br><span class="line"><span class="string">                c.comment_parent</span></span><br><span class="line"><span class="string">            FROM </span></span><br><span class="line"><span class="string">                `wp_comments` AS c,</span></span><br><span class="line"><span class="string">                `wp_posts` AS p </span></span><br><span class="line"><span class="string">            WHERE </span></span><br><span class="line"><span class="string">                c.comment_post_ID = p.ID AND</span></span><br><span class="line"><span class="string">                c.comment_approved != &quot;spam&quot;</span></span><br><span class="line"><span class="string">            ORDER BY</span></span><br><span class="line"><span class="string">                c.comment_ID ASC;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        cursor = self.db.cursor()</span><br><span class="line">        cursor.execute(sql_comment)</span><br><span class="line">        results = cursor.fetchall()</span><br><span class="line"></span><br><span class="line">        comments = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">            wp_comment = WPComment(*row)</span><br><span class="line">            wp_comment.comment_content = wp_comment.comment_content.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\\&#x27;&quot;</span>)</span><br><span class="line">            wp_comment.comment_author = wp_comment.comment_author.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\\&#x27;&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> wp_comment.post_name <span class="keyword">in</span> replace_post_name:</span><br><span class="line">                wp_comment.post_name = replace_post_name[wp_comment.post_name]</span><br><span class="line">            comments.append(wp_comment)</span><br><span class="line">        <span class="keyword">return</span> comments</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取文章浏览量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_counters</span>(<span class="params">self</span>):</span></span><br><span class="line">        sql_counter = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            SELECT </span></span><br><span class="line"><span class="string">                p.ID,</span></span><br><span class="line"><span class="string">                p.post_name,</span></span><br><span class="line"><span class="string">                p.post_type,</span></span><br><span class="line"><span class="string">                c.meta_value </span></span><br><span class="line"><span class="string">            FROM </span></span><br><span class="line"><span class="string">                `wp_postmeta` AS c,</span></span><br><span class="line"><span class="string">                `wp_posts` AS p </span></span><br><span class="line"><span class="string">            WHERE </span></span><br><span class="line"><span class="string">                c.meta_key = &quot;post_views_count&quot; AND </span></span><br><span class="line"><span class="string">                p.post_status = &quot;publish&quot; AND </span></span><br><span class="line"><span class="string">                c.post_id = p.ID </span></span><br><span class="line"><span class="string">            ORDER BY </span></span><br><span class="line"><span class="string">                c.post_id ASC;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        cursor = self.db.cursor()</span><br><span class="line">        cursor.execute(sql_counter)</span><br><span class="line">        results = cursor.fetchall()</span><br><span class="line"></span><br><span class="line">        counters = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">            wp_counter = WPCounter(*row)</span><br><span class="line">            <span class="keyword">if</span> wp_counter.post_name <span class="keyword">in</span> replace_post_name:</span><br><span class="line">                wp_counter.post_name = replace_post_name[wp_counter.post_name]</span><br><span class="line">            wp_counter.post_views = <span class="built_in">int</span>(wp_counter.post_views)</span><br><span class="line">            counters.append(wp_counter)</span><br><span class="line">        <span class="keyword">return</span> counters</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WalineDatabase</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.db = pymysql.connect(</span><br><span class="line">            host=<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">            user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">            password=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            database=<span class="string">&#x27;waline&#x27;</span>,</span><br><span class="line">            <span class="comment"># MaxOS使用MAMP时需要加上unix_socket</span></span><br><span class="line">            <span class="comment"># unix_socket=&#x27;/Applications/MAMP/tmp/mysql/mysql.sock&#x27;,</span></span><br><span class="line">        )</span><br><span class="line">        self.wp_to_waline_id = &#123;&#125;</span><br><span class="line">        self.wp_reply_id = &#123;&#125;</span><br><span class="line">        self.wp_reply_nickname = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归查找评论的根id</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_root_id</span>(<span class="params">self, child_id</span>):</span></span><br><span class="line">        parent_id = self.wp_reply_id[child_id]</span><br><span class="line">        <span class="keyword">if</span> parent_id == child_id:</span><br><span class="line">            <span class="keyword">return</span> parent_id</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.find_root_id(parent_id)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加评论</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_comments</span>(<span class="params">self, wp_comments</span>):</span></span><br><span class="line">        cursor = self.db.cursor()</span><br><span class="line">        <span class="keyword">for</span> wp_comment <span class="keyword">in</span> wp_comments:</span><br><span class="line">            pid = <span class="string">&#x27;NULL&#x27;</span></span><br><span class="line">            rid = <span class="string">&#x27;NULL&#x27;</span></span><br><span class="line">            comment = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> wp_comment.comment_parent == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 新评论</span></span><br><span class="line">                comment = <span class="string">&#x27;&lt;p&gt;%s&lt;/p&gt;\n&#x27;</span>%(wp_comment.comment_content)</span><br><span class="line">                self.wp_reply_id[wp_comment.comment_ID] = wp_comment.comment_ID</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 回复别人的评论</span></span><br><span class="line">                pid = self.wp_to_waline_id[wp_comment.comment_parent]</span><br><span class="line">                rid = self.wp_to_waline_id[self.find_root_id(wp_comment.comment_parent)]</span><br><span class="line">                reply_name = self.wp_reply_nickname[wp_comment.comment_parent]</span><br><span class="line">                comment = <span class="string">&#x27;&lt;p&gt;&lt;a class=&quot;at&quot; href=&quot;#%s&quot;&gt;@%s&lt;/a&gt; , %s&lt;/p&gt;\n&#x27;</span>%(pid, reply_name, wp_comment.comment_content)</span><br><span class="line">                self.wp_reply_id[wp_comment.comment_ID] = wp_comment.comment_parent</span><br><span class="line"></span><br><span class="line">            url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> wp_comment.post_type == <span class="string">&#x27;page&#x27;</span>:</span><br><span class="line">                url = <span class="string">&#x27;/%s/&#x27;</span>%(wp_comment.post_name)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                url = <span class="string">&#x27;/%s.html&#x27;</span>%(wp_comment.post_name)</span><br><span class="line"></span><br><span class="line">            sql_comment = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                INSERT INTO `wl_Comment` (`comment`, `insertedAt`, `ip`, `link`, `mail`, `nick`, `pid`, `rid`, `status`, `ua`, `url`)</span></span><br><span class="line"><span class="string">                VALUES (&#x27;<span class="subst">&#123;comment&#125;</span>&#x27;, &#x27;<span class="subst">&#123;wp_comment.comment_date&#125;</span>&#x27;, &#x27;<span class="subst">&#123;wp_comment.comment_author_IP&#125;</span>&#x27;, &#x27;<span class="subst">&#123;wp_comment.comment_author_url&#125;</span>&#x27;, &#x27;<span class="subst">&#123;wp_comment.comment_author_email&#125;</span>&#x27;, &#x27;<span class="subst">&#123;wp_comment.comment_author&#125;</span>&#x27;, <span class="subst">&#123;pid&#125;</span>, <span class="subst">&#123;rid&#125;</span>, &#x27;approved&#x27;, &#x27;<span class="subst">&#123;wp_comment.comment_agent&#125;</span>&#x27;, &#x27;<span class="subst">&#123;url&#125;</span>&#x27;);</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">            cursor.execute(sql_comment)</span><br><span class="line">            self.db.commit()</span><br><span class="line"></span><br><span class="line">            self.wp_to_waline_id[wp_comment.comment_ID] = cursor.lastrowid</span><br><span class="line">            self.wp_reply_nickname[wp_comment.comment_ID] = wp_comment.comment_author</span><br><span class="line">            <span class="built_in">print</span>(wp_comment.comment_date, wp_comment.comment_author)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加文章浏览量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_counters</span>(<span class="params">self, wp_counters</span>):</span></span><br><span class="line">        cursor = self.db.cursor()</span><br><span class="line">        <span class="keyword">for</span> wp_counter <span class="keyword">in</span> wp_counters:</span><br><span class="line">            <span class="keyword">if</span> wp_counter.post_views == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> wp_counter.post_type == <span class="string">&#x27;page&#x27;</span>:</span><br><span class="line">                url = <span class="string">&#x27;/%s/&#x27;</span>%(wp_counter.post_name)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                url = <span class="string">&#x27;/%s.html&#x27;</span>%(wp_counter.post_name)</span><br><span class="line"></span><br><span class="line">            sql_comment = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                INSERT INTO `wl_Counter` (`time`, `url`)</span></span><br><span class="line"><span class="string">                VALUES (<span class="subst">&#123;wp_counter.post_views&#125;</span>, &#x27;<span class="subst">&#123;url&#125;</span>&#x27;);</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">            cursor.execute(sql_comment)</span><br><span class="line">            self.db.commit()</span><br><span class="line">            <span class="built_in">print</span>(wp_counter.post_id, wp_counter.post_views)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    wp_database = WPDatabase()</span><br><span class="line">    waline_database = WalineDatabase()</span><br><span class="line"></span><br><span class="line">    wp_comments = wp_database.get_comments()</span><br><span class="line">    waline_database.add_comments(wp_comments)</span><br><span class="line"></span><br><span class="line">    wp_counters = wp_database.get_counters()</span><br><span class="line">    waline_database.add_counters(wp_counters)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其它分类 </category>
          
          <category> 博客折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WordPress </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用iOS快捷指令实现自动领喵币教程</title>
      <link href="/use-ios-shortcuts-to-make-quick-macro.html"/>
      <url>/use-ios-shortcuts-to-make-quick-macro.html</url>
      
        <content type="html"><![CDATA[<p>2020年的淘宝双11活动又到来了，今年的主题是超级星秀猫，通过喂喵币让小猫升级为不同的明星。</p><p>跟去年一样，浏览店铺满15秒可以获得大量的喵币，每天可以重复做几十次，但是这个过程有点无聊。</p><p>程序员最讨厌的就是做重复的事了，如果有一件事要重复做两次以上，程序员就往往会考虑编写代码来自动完成这些事。</p><p>如果在越狱的iOS或者安卓系统上，可以使用<code>按键精灵</code>软件来自动领取喵币，不过能否在没越狱的iOS手机上做到呢？</p><p><code>iOS 13</code>系统自带的<code>快捷指令</code>应用能够执行自动化操作，或许能够创建一个类似于<code>按键精灵</code>的流程来自动领取喵币，于是我研究了一下，最终成功实现了自动化的流程：</p><video width="296" height="640" controls="controls" loop="loop"><source id="mp4" src="/assets/2020/11/macro_demo_video.mp4" type="video/mp4"></video><blockquote><p>注意：该流程在<code>iOS 14</code>的<code>iPhone 11</code>上完美运行，在<code>iOS 13.3</code>的<code>iPhone SE</code>上偶尔会中断，具体原因不明，其它机型和系统没有进行测试。</p></blockquote><p>整个研究的过程并不是很顺利，解决了很多个大坑才得以完成，下面就来介绍一下我使用的方法。</p><hr><h3 id="一、自动点击手机屏幕"><a href="#一、自动点击手机屏幕" class="headerlink" title="一、自动点击手机屏幕"></a>一、自动点击手机屏幕</h3><p><code>按键精灵</code>最重要的功能是能够自动点击屏幕，遗憾的是<code>快捷指令</code>应用里并没有提供自动点击屏幕的功能，不过<code>iOS 13</code>系统自带的<code>语音控制</code>功能就能够做到这一点。</p><p>我在不久之前看过一个视频教程：<a href="https://www.bilibili.com/video/BV1tE411M7Qh/">《iOS 13自带王者荣耀一键换键功能，相当于辅助外挂》</a>，这个视频介绍了在<code>语音控制</code>里添加点击手势的操作步骤，建议先观看视频学习。</p><p>正常来说，我们要对<code>手机淘宝</code>添加的点击手势是：在游戏界面点击<kbd>去浏览</kbd>按钮进入店铺界面，等待读条15秒任务完成后，再点击店铺右上角的<kbd>关闭</kbd>按钮退出店铺界面。</p><p><img src="/assets/2020/11/macro_process_1.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_process_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><blockquote><p>注意：语音控制的手势最多只能录制5个操作，最长只能录制10秒。</p></blockquote><p>但是由于<code>语音控制</code>的手势最多只能录制10秒，而读条等待的时间却超过了15秒，所以不能在一个手势里录制这些操作。那么我们不妨换个思路，先在店铺界面等待读条完成，再开始使用<code>语音控制</code>执行点击手势。</p><p>修改后的手势操作为：点击右上角的<kbd>关闭</kbd>按钮返回到游戏界面，等待两秒后再点击<kbd>去浏览</kbd>按钮进入下一个店铺界面，这样只需花费不到5秒的时间便可以完成操作。</p><p><img src="/assets/2020/11/macro_process_2.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_process_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>以下是在<code>手机淘宝</code>里创建点击手势的操作步骤：</p><p>1、打开手机的<kbd>设置</kbd> - <kbd>辅助功能</kbd> - <kbd>语音控制</kbd>，开启<code>语音控制</code>功能。</p><p><img src="/assets/2020/11/macro_voice_control_1.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_voice_control_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><blockquote><p>注意：如果是第一次开启<code>语音控制</code>功能，需要连接上WiFi，因为系统要下载几百M的语音数据包，不连接WiFi的话会导致开启失败。开启成功后，状态栏会出现一个蓝色的麦克风图标。</p></blockquote><p>2、开启<code>语音控制</code>后，进入<kbd>自定命令</kbd> - <kbd>自定</kbd> - <kbd>创建新命令</kbd>，输入命令短语。</p><p><img src="/assets/2020/11/macro_voice_control_2.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_voice_control_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><blockquote><p>注意：短语只能使用英文，但是使用单音节的词容易误识别，于是我使用了<code>evening</code>这个命令短语。</p></blockquote><p>3、点击<kbd>操作</kbd> - <kbd>运行自定手势</kbd>，由于要点击的区域被导航栏挡到了，所以要点击<kbd>隐藏控制项</kbd>按钮进入全屏状态。</p><p><img src="/assets/2020/11/macro_voice_control_3.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_voice_control_3.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>4、先点击点击右上角<kbd>关闭</kbd>按钮的位置❶，等待两秒后点击<kbd>去浏览</kbd>按钮的位置❷，并保存录制结果。</p><p><img src="/assets/2020/11/macro_voice_control_4.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_voice_control_4.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>5、现在可以进入手机淘宝的店铺界面测试一下，对着手机的麦克风说出<code>evening</code>，系统就会自动执行点击操作。</p><hr><h3 id="二、自动执行语音控制"><a href="#二、自动执行语音控制" class="headerlink" title="二、自动执行语音控制"></a>二、自动执行语音控制</h3><p>前面介绍了用人类的声音控制手机执行点击操作的方法，但是这样的“人工智能”并不是我们想要的，如果能够让手机自动执行<code>语音控制</code>就再好不过了。</p><p>好在<code>快捷指令</code>应用里有<code>朗读文本</code>的功能，能够让手机朗读出<code>evening</code>，从而自动执行<code>语音控制</code>。</p><p>接下来打开<code>快捷指令</code>应用，新建一个自动化流程：</p><p>1、在<code>自动化</code>界面点击<kbd>创建个人自动化</kbd>按钮。</p><p><img src="/assets/2020/11/macro_shortcuts_taobao_1.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_taobao_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>2、自动化的触发条件选择<kbd>打开App</kbd>。</p><p><img src="/assets/2020/11/macro_shortcuts_taobao_2.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_taobao_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>3、选择打开<code>手机淘宝</code>应用，再点击<kbd>下一步</kbd>。</p><p><img src="/assets/2020/11/macro_shortcuts_taobao_3.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_taobao_3.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>4、添加两个快捷指令：等待8秒后，朗读<code>evening</code>。</p><p><img src="/assets/2020/11/macro_shortcuts_taobao_4.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_taobao_4.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><blockquote><p>注意：打开<code>手机淘宝</code>自动执行快捷指令时，手机顶部会出现运行快捷指令的通知，通知大概需要6秒后才会消失。为了不出现误操作，等待8秒钟的容错率比较高。</p></blockquote><p>5、展开<code>朗读文本</code>的选项，<code>语言</code>选择<code>英语（英国）</code>，再点击<kbd>下一步</kbd>。</p><p><img src="/assets/2020/11/macro_shortcuts_taobao_5.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_taobao_5.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><blockquote><p>注意：默认的Siri语音可能会播不出声音，所以需要换成英国的发音。</p></blockquote><p>6、不要选中<code>运行前询问</code>，这样打开<code>手机淘宝</code>后，系统才会自动执行快捷指令，否则需要手动确认才能执行。</p><p><img src="/assets/2020/11/macro_shortcuts_taobao_6.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_taobao_6.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>7、这时可以打开<code>手机淘宝</code>，系统会自动朗读文本，<code>语音控制</code>也会自动执行。</p><blockquote><p>注意：朗读文本需要使用手机扬声器播放，手机的音量可以调大一点，以便让语音控制识别到。</p></blockquote><hr><h3 id="三、自动循环执行"><a href="#三、自动循环执行" class="headerlink" title="三、自动循环执行"></a>三、自动循环执行</h3><p>前面两步教程实现了以下的自动化操作：打开手机淘宝 -&gt; 等待8秒 -&gt; 朗读<code>evening</code> -&gt; <code>语音控制</code>执行操作 -&gt; 退出店铺界面 -&gt; 进入下一个店铺界面。</p><p>那么怎样才能让以上的操作一直循环执行呢？很不巧的是，<code>快捷指令</code>依然没有循环执行的功能，但是还是有办法来解决这个问题的。</p><p>因为<code>快捷指令</code>里面有打开应用(跳转应用)的指令，假设有应用A和B，那么可以创建两条自动化流程，第一条是打开应用A时跳转到B应用，第二条是打开B应用时跳转到A应用，这样两个应用就会不断互相跳转，相当于命令一直循环执行了。</p><p>所以我们可以在朗读<code>evening</code>后，等待十几秒，再跳转到另一个应用，另一个应用再跳回<code>手机淘宝</code>。当回到<code>手机淘宝</code>后，又自动执行了<code>手机淘宝</code>的快捷指令，这样快捷指令就能够一直循环执行。</p><p>随便找一个比较少用到的应用来做为工具人，我用的是系统自带的<code>Apple TV</code>，也就是<code>电视</code>应用。</p><blockquote><p>注意：本教程使用<code>iOS 13</code>系统截图，应用名字叫<code>电视</code>，<code>iOS 14</code>里应用名字改为了<code>视频</code>。</p></blockquote><p>下面是实现循环执行的步骤：</p><p>1、编辑<code>手机淘宝</code>的快捷指令，追加两条快捷指令：等待15秒钟，打开<code>电视</code>应用。</p><p><img src="/assets/2020/11/macro_shortcuts_taobao_7.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_taobao_7.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><blockquote><p>注意：15秒是一个比较合适的时间，虽然和上面的8秒加起来让整个流程的等待时间达到了23秒，但是店铺界面之间的跳转以及语音控制的操作也是需要花费时间的，加起来花费的时间也要20多秒。</p></blockquote><p>2、创建一个新的自动化流程，触发条件为打开<code>电视</code>应用。</p><p><img src="/assets/2020/11/macro_shortcuts_tool_1.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_tool_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>3、添加两个快捷指令：等待1秒后，打开<code>手机淘宝</code>应用。</p><p><img src="/assets/2020/11/macro_shortcuts_tool_2.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_tool_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>4、当然，<code>运行前询问</code>也不要选中。</p><p><img src="/assets/2020/11/macro_shortcuts_tool_3.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_tool_3.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>5、至此，所有的快捷指令就创建完成了，打开<code>手机淘宝</code>后，系统便会循环执行快捷指令。</p><hr><h3 id="四、停止循环执行"><a href="#四、停止循环执行" class="headerlink" title="四、停止循环执行"></a>四、停止循环执行</h3><p>目前两个应用在互相跳转，永远不会停止，那么如何才能让快捷指令停止下来呢？下面介绍几种方法。</p><p>1、在这个教程里，快捷指令有十多秒的等待时间，只要在这段时间里，打开<code>快捷指令</code>应用，将<code>启用此自动化</code>关闭就行了。</p><p><img src="/assets/2020/11/macro_shortcuts_taobao_8.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_taobao_8.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>2、如果快捷指令的等待时间比较短，来不及进行关闭的操作，那么可以将应用强制关闭，再马上锁屏。锁屏状态下的快捷指令会执行失败，所以能够打断循环执行的链条。</p><blockquote><p>注意：单纯的锁屏是没用的，只要应用存活，屏幕解锁后又自动执行快捷指令了。</p></blockquote><p>3、如果快捷指令执行的速度太快，来不及强制关闭应用，那么可以考虑强制重启手机。</p><p>4、也可以在<code>快捷指令</code>里编写计次器，达到指定的执行次数后就中断执行流程。</p><hr><h3 id="五、后记"><a href="#五、后记" class="headerlink" title="五、后记"></a>五、后记</h3><p>快捷指令的功能很强大，除了自动领活动奖励，还可以做很多东西，比如自动签到、定时执行任务等，以后有机会的话再写一些新的教程。</p>]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 奇思妙想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教学 </tag>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法解《机械迷城》游戏三：扳手关水管</title>
      <link href="/machinarium-puzzle-game-waterpipe.html"/>
      <url>/machinarium-puzzle-game-waterpipe.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、游戏介绍"><a href="#一、游戏介绍" class="headerlink" title="一、游戏介绍"></a>一、游戏介绍</h3><p>小萝卜头来到了下水道，下水道里面有一些错综复杂的水管，如图所示（红色箭头表示进水口和出水口）：</p><p><img src="/assets/2020/06/waterpipe_start.jpg" class="lazyload placeholder" data-srcset="/assets/2020/06/waterpipe_start.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>其中出水口的水流进了蓄水池，而小萝卜头打算进入蓄水池里，所以只能想办法关闭这个出水口。<br>水管上面总共有11个阀门，而下水道里面只能找到3个扳手，每个扳手能关掉一个阀门。  </p><p>那么问题来了：你能帮小萝卜头关闭3个阀门，让出水口流不出水吗？</p><hr><h3 id="二、游戏分析"><a href="#二、游戏分析" class="headerlink" title="二、游戏分析"></a>二、游戏分析</h3><p>我们遇到了新类型的游戏，这个游戏可以看成一个连通图，阀门就是连通图的节点，那么问题可以转化为：如何通过去掉3个节点，让进水口和出水口不相通?<br>如果用<code>X</code>来表示进水口，用<code>Y</code>表示出水口，用<code>A</code> ~ <code>K</code>来标记11个阀门，结果如图所示：</p><p><img src="/assets/2020/06/waterpipe_mark.jpg" class="lazyload placeholder" data-srcset="/assets/2020/06/waterpipe_mark.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>那么如何来构建这张连通图呢？<br>首先要找出图中所有相连的节点，可以用元组<code>(X, Y)</code>来表示节点<code>X</code>和节点<code>Y</code>相连。<br>找出所有两两相连的节点后，就可以用这些相连的节点来构建一个连通图。  </p><p>以进水口节点<code>X</code>为例，与节点<code>X</code>相连的节点为<code>[G, H, K, B]</code>，如图所示：</p><p><img src="/assets/2020/06/waterpipe_link.jpg" class="lazyload placeholder" data-srcset="/assets/2020/06/waterpipe_link.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>那么可以用一个元组数组来表示节点<code>X</code>的连通关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">link_valves = [</span><br><span class="line">    (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;G&#x27;</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;H&#x27;</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;K&#x27;</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>假如接下来要寻找节点<code>G</code>的连通关系，由于<code>G</code>与<code>X</code>已经相连了，已经存在<code>(X, G)</code>，那么连通数组就可以不必加入<code>(G, X)</code>。<br>当然，如果要加入也是没关系的，不加入的话看起来比较简洁。</p><p>由于水管错综复杂，要找出所有节点的连通关系是一件很麻烦的事情，所以只能使用<code>人工智能</code>来寻找了。<br>这是一个纯体力活，耗费了两个打怪的时间才找完所有节点，节点的连通数组如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">link_valves = [</span><br><span class="line">    (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;G&#x27;</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;H&#x27;</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;K&#x27;</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;C&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;D&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;E&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;J&#x27;</span>), </span><br><span class="line">    (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;B&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;H&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;I&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>), (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>), (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;I&#x27;</span>), (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;J&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;F&#x27;</span>), (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;G&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;I&#x27;</span>), (<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;K&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><hr><h3 id="三、游戏编写"><a href="#三、游戏编写" class="headerlink" title="三、游戏编写"></a>三、游戏编写</h3><h4 id="1、阀门类的实现"><a href="#1、阀门类的实现" class="headerlink" title="1、阀门类的实现"></a>1、阀门类的实现</h4><p>由于阀门节点要记录与其相连的阀门，所以不能够用基础数据类型来表示，定义一个阀门类比较方便。<br>阀门类使用阀门名字来初始化（阀门名字为英文字母）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Valve</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;阀门类</span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        name: 阀门名字</span></span><br><span class="line"><span class="string">        closed: 是否关闭</span></span><br><span class="line"><span class="string">        outlets: 连接的阀门对象数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;使用阀门名字初始化阀门</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            name: 阀门名字</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.closed = <span class="literal">False</span></span><br><span class="line">        self.outlets = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">link</span>(<span class="params">self, valve</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;连接某个阀门</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            valve: 阀门对象</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.outlets.append(valve)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印阀门名和连接的阀门</span></span><br><span class="line"><span class="string">        Print: &quot;阀门名(是否关闭) : [连接的阀门名数组]&quot;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        outlet_names = [x.name <span class="keyword">for</span> x <span class="keyword">in</span> self.outlets]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s(%d) : %s&quot;</span>%(self.name, self.closed, outlet_names))</span><br><span class="line"></span><br><span class="line">valve_a = Valve(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">valve_b = Valve(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">valve_a.link(valve_b)</span><br><span class="line">valve_a.show()</span><br></pre></td></tr></table></figure><p>测试代码将阀门<code>B</code>与阀门<code>A</code>相连，执行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A(<span class="number">0</span>) : [<span class="string">&#x27;B&#x27;</span>]</span><br></pre></td></tr></table></figure><p>进水口和出水口可以视为特殊的阀门，即不可关闭，永远可以让水通过。</p><h4 id="2、游戏类的实现"><a href="#2、游戏类的实现" class="headerlink" title="2、游戏类的实现"></a>2、游戏类的实现</h4><p>游戏类可以维护一个字典，以便快速根据阀门名来找到阀门对象。<br>新建一个游戏类，用相连的阀门节点数组初始化游戏：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;扳手关水管游戏</span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        valve_dict: 存放阀门的字典&#123;阀门名:阀门对象&#125;</span></span><br><span class="line"><span class="string">        water_inlet: 入水口</span></span><br><span class="line"><span class="string">        water_outlet: 出水口</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, link_valves</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;使用连接的阀门数组初始化游戏</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            link_valves: 相连的阀门数组</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.valve_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> link_valve <span class="keyword">in</span> link_valves:</span><br><span class="line">            from_name, to_name = link_valve</span><br><span class="line">            self.add_link_valve(from_name, to_name)</span><br><span class="line">        self.water_inlet = self.valve_dict[<span class="string">&#x27;X&#x27;</span>]</span><br><span class="line">        self.water_outlet = self.valve_dict[<span class="string">&#x27;Y&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_link_valve</span>(<span class="params">self, from_name, to_name</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;添加相连的阀门</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            from_name: 起始阀门名</span></span><br><span class="line"><span class="string">            to_name: 目的阀门名</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        from_valve = self.valve_dict.get(from_name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> from_valve:</span><br><span class="line">            from_valve = Valve(from_name)</span><br><span class="line">            self.valve_dict[from_name] = from_valve</span><br><span class="line"></span><br><span class="line">        to_valve = self.valve_dict.get(to_name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> to_valve:</span><br><span class="line">            to_valve = Valve(to_name)</span><br><span class="line">            self.valve_dict[to_name] = to_valve</span><br><span class="line"></span><br><span class="line">        from_valve.link(to_valve)</span><br><span class="line">        to_valve.link(from_valve)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印出所有阀门的值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> self.valve_dict:</span><br><span class="line">            valve = self.valve_dict[key]</span><br><span class="line">            valve.show()</span><br><span class="line"></span><br><span class="line">link_valves = [</span><br><span class="line">    (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;G&#x27;</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;H&#x27;</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;K&#x27;</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;C&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;D&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;E&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;J&#x27;</span>), </span><br><span class="line">    (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;B&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;H&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;I&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>), (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>), (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;I&#x27;</span>), (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;J&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;F&#x27;</span>), (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;G&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;I&#x27;</span>), (<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;K&#x27;</span>),</span><br><span class="line">]</span><br><span class="line">game = Game(link_valves)</span><br><span class="line">game.show()</span><br></pre></td></tr></table></figure><p>代码执行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">A(<span class="number">0</span>) : [<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>]</span><br><span class="line">C(<span class="number">0</span>) : [<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">B(<span class="number">0</span>) : [<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;I&#x27;</span>]</span><br><span class="line">E(<span class="number">0</span>) : [<span class="string">&#x27;Y&#x27;</span>]</span><br><span class="line">D(<span class="number">0</span>) : [<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">G(<span class="number">0</span>) : [<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">F(<span class="number">0</span>) : [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;K&#x27;</span>]</span><br><span class="line">I(<span class="number">0</span>) : [<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">H(<span class="number">0</span>) : [<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>]</span><br><span class="line">K(<span class="number">0</span>) : [<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;F&#x27;</span>]</span><br><span class="line">J(<span class="number">0</span>) : [<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Y(<span class="number">0</span>) : [<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>]</span><br><span class="line">X(<span class="number">0</span>) : [<span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br></pre></td></tr></table></figure><p>如果要判断两个节点是否相通，需要使用递归来进行判断。<br>由于我们目前已经知道进水口<code>X</code>和出水口<code>Y</code>是相连通的，但是阀门<code>X</code>连接的节点为<code>[&#39;G&#39;, &#39;H&#39;, &#39;K&#39;, &#39;B&#39;]</code>，里面没有<code>Y</code>。所以要遍历每一个连接的阀门，判断某个阀门是否和<code>Y</code>连通。<br>假如能够找到某条相通的路径，例如<code>X -&gt; B -&gt; Y</code>，就说明<code>X</code>和<code>Y</code>是相通的。如果遍历完所有路径都找不到，就说明两个阀门不相通。<br>判断两个阀门是否相通的深度优先遍历算法如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_connected</span>(<span class="params">self, from_valve, to_valve</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断两个阀门是否相通</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            from_valve: 起始阀门</span></span><br><span class="line"><span class="string">            to_valve: 目的阀门</span></span><br><span class="line"><span class="string">        Returns: 是否相通</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        visited = <span class="built_in">set</span>()</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">valve</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot;使用DFS判断</span></span><br><span class="line"><span class="string">            Args:</span></span><br><span class="line"><span class="string">                valve: 阀门对象</span></span><br><span class="line"><span class="string">            Returns: 是否相通</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">            <span class="comment"># 如果阀门关闭，肯定不相通</span></span><br><span class="line">            <span class="keyword">if</span> valve.closed:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># 如果阀门和目的阀门是同一个阀门，说明相通</span></span><br><span class="line">            <span class="keyword">if</span> valve == to_valve:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="comment"># 如果阀门已经访问过了，说明不相通</span></span><br><span class="line">            <span class="keyword">if</span> valve.name <span class="keyword">in</span> visited:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            visited.add(valve.name)</span><br><span class="line">            <span class="comment"># 遍历目的阀门的所有连接阀门，递归判断是否相通</span></span><br><span class="line">            <span class="keyword">for</span> valve <span class="keyword">in</span> valve.outlets:</span><br><span class="line">                <span class="keyword">if</span> dfs(valve):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 如果任意一个阀门关闭了，肯定不相通</span></span><br><span class="line">        <span class="keyword">if</span> from_valve.closed <span class="keyword">or</span> to_valve.closed:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> dfs(from_valve)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(game.is_connected(game.water_inlet, game.water_outlet))</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>说明进水口和出水口是相通的。</p><hr><h3 id="四、游戏解法"><a href="#四、游戏解法" class="headerlink" title="四、游戏解法"></a>四、游戏解法</h3><p>首先实现一下判断游戏是否完成的方法，如果进水口和出水口不相通，就相当于出水口被关闭了，那么可以写出下面的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_done</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否完成游戏</span></span><br><span class="line"><span class="string">        Returns: 是否完成游戏</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.is_connected(self.water_inlet, self.water_outlet)</span><br></pre></td></tr></table></figure><p>这个游戏可以使用回溯算法来求解答案，回溯算法跟<strong>深度优先搜索算法</strong>差不多。<br>如果<strong>广度优先搜索算法</strong>是孙悟空用分身走迷宫的话，那么<strong>深度优先搜索算法</strong>就是猪八戒走迷宫，猪八戒不能分身，只能先沿着迷宫某个岔路口一直走到最深处（深度优先的含义），如果发现是死路，再选择别的岔路口去尝试。</p><p>同理，这个游戏先尝试关闭前3个阀门，判断是否完成游戏。如果没完成游戏，就把第3个阀门打开，关闭第4个阀门，这样一直尝试下去，直到游戏完成为止。<br>回溯算法如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;使用回溯求解答案</span></span><br><span class="line"><span class="string">        Returns: 是否找到了答案</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 如果关掉了3个阀门，就验证游戏结果</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.ops) == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> self.is_done()</span><br><span class="line"></span><br><span class="line">        valve_names = [</span><br><span class="line">            <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>,      <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>,</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> valve_name <span class="keyword">in</span> valve_names:</span><br><span class="line">            valve = self.valve_dict[valve_name]</span><br><span class="line">            <span class="keyword">if</span> valve.closed:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 关闭当前阀门</span></span><br><span class="line">            valve.closed = <span class="literal">True</span></span><br><span class="line">            self.ops.append(valve.name)</span><br><span class="line">            <span class="comment"># 递归验证其它阀门</span></span><br><span class="line">            <span class="keyword">if</span> self.backtrack():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="comment"># 打开当前阀门进行回溯</span></span><br><span class="line">            valve.closed = <span class="literal">False</span></span><br><span class="line">            self.ops.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;调用回溯算法求解答案&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.backtrack():</span><br><span class="line">            <span class="built_in">print</span>(self.ops)</span><br><span class="line"></span><br><span class="line">game.solve()</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;H&#x27;</span>]</span><br></pre></td></tr></table></figure><p>将<code>[A, B, H]</code>这3个阀门关闭的话，就能完成游戏，如图所示：</p><p><img src="/assets/2020/06/waterpipe_done.jpg" class="lazyload placeholder" data-srcset="/assets/2020/06/waterpipe_done.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><hr><h3 id="五、完整代码"><a href="#五、完整代码" class="headerlink" title="五、完整代码"></a>五、完整代码</h3><p>完整的代码见：<a href="https://github.com/poboke/Machinarium">https://github.com/poboke/Machinarium</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
            <tag> 谜题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法解《机械迷城》游戏二：箭头换位置</title>
      <link href="/machinarium-puzzle-game-arrow.html"/>
      <url>/machinarium-puzzle-game-arrow.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、游戏介绍"><a href="#一、游戏介绍" class="headerlink" title="一、游戏介绍"></a>一、游戏介绍</h3><p>原文再续，书接上回。<br>机器人小萝卜头从牢房出来后，遇到了一个丢失了小狗的阿姨。<br>阿姨附近有一个起重电磁铁，小萝卜头打算使用起重电磁铁把铁箱子吸上去，不过需要先打开开关才能使用起重电磁铁。<br>电磁铁的开关有6个箭头，左边3个，右边3个，中间隔了一个空格。（注：游戏里使用的是上下箭头，而本文章使用左右箭头，讲解比较方便）</p><p><img src="/assets/2020/05/arrow_start.png" class="lazyload placeholder" data-srcset="/assets/2020/05/arrow_start.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>箭头移动的规则和玻璃珠跳棋的规则类似。<br>箭头只能移动到空格里，而且只能往箭头朝向的方向移动，不能够后退。<br>箭头移动的方式有两种，一种是把箭头移动到相邻的空格（例如上图第3个位置的箭头往前走一步）：<br><img src="/assets/2020/05/arrow_move_1.png" class="lazyload placeholder" data-srcset="/assets/2020/05/arrow_move_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>另一种是跳过相邻的箭头后进入后面的空格，但是最多只能跳过一个箭头（例如上图倒数第3个位置的箭头往前走两步）：<br><img src="/assets/2020/05/arrow_move_2.png" class="lazyload placeholder" data-srcset="/assets/2020/05/arrow_move_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>将左右两边的箭头互换位置，就能打开开关，如图所示：<br><img src="/assets/2020/05/arrow_done.png" class="lazyload placeholder" data-srcset="/assets/2020/05/arrow_done.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>那么新的问题来了，你能帮小萝卜头找出打开开关的最少移动步骤吗？</p><hr><h3 id="二、游戏分析"><a href="#二、游戏分析" class="headerlink" title="二、游戏分析"></a>二、游戏分析</h3><p>如果用<code>1</code>来表示方向朝右的箭头，用<code>-1</code>表示方向朝左的箭头，<code>0</code>表示空格，那么游戏可以用一个数组来表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 1, 1, 0, -1, -1, -1]</span><br></pre></td></tr></table></figure><p>用<code>1</code>和<code>-1</code>来表示箭头是有原因的，因为方向朝右的箭头要往数组右边移动，所以下标要+1。而方向朝左的箭头往数组左边移动，下标要-1。箭头的值即为箭头移动时下标的偏移量，这会给代码增加一点便利性。</p><p>当箭头移动时，只需要交换数组里元素的值就行了。</p><hr><h3 id="三、游戏编写"><a href="#三、游戏编写" class="headerlink" title="三、游戏编写"></a>三、游戏编写</h3><p>新建一个游戏类，用数组初始化游戏：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, values</span>):</span></span><br><span class="line">        self.values = values</span><br><span class="line">        self.length = <span class="built_in">len</span>(self.values)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.values)</span><br><span class="line"></span><br><span class="line">values = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">game = Game(values)</span><br><span class="line">game.show()</span><br></pre></td></tr></table></figure><p>代码执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 1, 1, 0, -1, -1, -1]</span><br></pre></td></tr></table></figure><p>再给游戏类添加一个移动箭头的方法，参数为要移动的箭头的下标。<br>先把箭头当前所在的下标加上箭头的值，就得到箭头移动的新下标，如果这个下标所在的格子是空格，就说明可以移动。如果这个格子不是空格，就把新下标再加上该箭头的值得到新的下标，再继续判断。<br>因为箭头最多只能移动两个格子的位置，所以只需要判断两次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;移动箭头</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            index: 箭头所在的下标</span></span><br><span class="line"><span class="string">        Returns: 是否移动成功</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        new_index = index</span><br><span class="line">        value = self.values[index]</span><br><span class="line">        <span class="comment"># 箭头最多移动两格</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 按箭头的方向移动下标</span></span><br><span class="line">            new_index += value</span><br><span class="line">            <span class="keyword">if</span> new_index &lt; <span class="number">0</span> <span class="keyword">or</span> new_index &gt;= self.length:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            new_value = self.values[new_index]</span><br><span class="line">            <span class="keyword">if</span> new_value == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 如果遇到空格，就交换两个位置的值</span></span><br><span class="line">                self.values[index], self.values[new_index] = \</span><br><span class="line">                    self.values[new_index], self.values[index]</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">values = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">game = Game(values)</span><br><span class="line">game.show()</span><br><span class="line"><span class="comment"># 先移动第3个格子的箭头</span></span><br><span class="line">game.move(<span class="number">2</span>)</span><br><span class="line">game.show()</span><br><span class="line"><span class="comment"># 再移动第5个格子的箭头</span></span><br><span class="line">game.move(<span class="number">4</span>)</span><br><span class="line">game.show()</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, -<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>可见箭头的移动结果是正确的。</p><hr><h3 id="四、游戏解法"><a href="#四、游戏解法" class="headerlink" title="四、游戏解法"></a>四、游戏解法</h3><p>首先实现一下判断游戏是否完成的方法，如果游戏完成的话，中间的格子肯定是空格，左半部分全部都是方向朝左的箭头，那么可以写出下面的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_done</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否完成游戏</span></span><br><span class="line"><span class="string">        Returns: 是否完成</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 如果中间不是空格，肯定未完成</span></span><br><span class="line">        middle = self.length / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> self.values[middle] != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 判断左半部分是否全部是方向朝左的箭头</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, middle):</span><br><span class="line">            <span class="keyword">if</span> self.values[i] != -<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>沿用上一个游戏的套路，这个游戏也继续使用广度优先搜索算法来求解答案。</p><p>那么怎么获取该游戏的操作步骤呢？<br>因为只有距离空格左右两边两个格子以内的箭头才能够移动，所以只要判断空格周围的4个箭头就行了。<br>获取空格左边两格内方向朝右的箭头，加上空格右边两格内方向朝左的箭头作为操作步骤。<br>可以写一个方法来获取空格周围的箭头下标：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_space_neighbors</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取空格左右两边可移动的箭头下标</span></span><br><span class="line"><span class="string">        Returns: 下标数组</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        index = self.values.index(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 获取空格左边方向朝右的箭头</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="number">0</span>, index-<span class="number">2</span>), index):</span><br><span class="line">            <span class="keyword">if</span> self.values[i] == <span class="number">1</span>:</span><br><span class="line">                neighbors.append(i)</span><br><span class="line">        <span class="comment"># 获取空格右边方向朝左的箭头</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index+<span class="number">1</span>, <span class="built_in">min</span>(index+<span class="number">3</span>, self.length)):</span><br><span class="line">            <span class="keyword">if</span> self.values[i] == -<span class="number">1</span>:</span><br><span class="line">                neighbors.append(i)</span><br><span class="line">        <span class="keyword">return</span> neighbors</span><br></pre></td></tr></table></figure><p>广度优先搜索算法算法如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copy</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;拷贝对象</span></span><br><span class="line"><span class="string">        Returns: 新的游戏对象</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        game = Game(self.values[:])</span><br><span class="line">        game.ops = self.ops[:]</span><br><span class="line">        <span class="keyword">return</span> game</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;使用BFS求解答案&quot;&quot;&quot;</span></span><br><span class="line">        queue = [self]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            pre_game = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 获取空格左右两边的箭头下标</span></span><br><span class="line">            neighbors = pre_game.get_space_neighbors()</span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> neighbors:</span><br><span class="line">                cur_game = pre_game.copy()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> cur_game.move(index):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                cur_game.ops += [index]</span><br><span class="line">                <span class="keyword">if</span> cur_game.is_done():</span><br><span class="line">                    <span class="comment"># 如果游戏完成，则打印操作步骤</span></span><br><span class="line">                    <span class="built_in">print</span>(cur_game.ops)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="comment"># 将当前游戏加入队列</span></span><br><span class="line">                queue.append(cur_game)</span><br><span class="line"></span><br><span class="line">values = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">game = Game(values)</span><br><span class="line">game.solve()</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>数字代表每次移动的箭头下标，如<code>2</code>表示移动第三个格子的箭头，其它类推。</p><p>需要移动15步才能打开开关，移动步骤如下：</p><p><img src="/assets/2020/05/arrow.gif" class="lazyload placeholder" data-srcset="/assets/2020/05/arrow.gif" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><hr><h3 id="五、扩展思考"><a href="#五、扩展思考" class="headerlink" title="五、扩展思考"></a>五、扩展思考</h3><p>题目中空格左右两边只有3个箭头，人脑也能比较容易思考出游戏解法。<br>那么如果每边的箭头不止3个，而是有4个、5个或更多个，怎样才能算出最少的移动步数呢？</p><p>先使用下面的代码打印出当每边有<code>i</code>个箭头时，最少的移动次数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="keyword">if</span> cur_game.is_done():</span><br><span class="line">            <span class="comment"># 如果游戏完成，则打印操作次数</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">len</span>(cur_game.ops))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    <span class="built_in">print</span> i, <span class="string">&quot;=&gt;&quot;</span>,</span><br><span class="line">    values = [<span class="number">1</span>] * i + [<span class="number">0</span>] + [-<span class="number">1</span>] * i</span><br><span class="line">    game = Game(values)</span><br><span class="line">    game.solve()</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0 =&gt; 0</span><br><span class="line">1 =&gt; 3</span><br><span class="line">2 =&gt; 8</span><br><span class="line">3 =&gt; 15</span><br><span class="line">4 =&gt; 24</span><br><span class="line">5 =&gt; 35</span><br><span class="line">6 =&gt; 48</span><br><span class="line">7 =&gt; 63</span><br><span class="line">8 =&gt; 80</span><br><span class="line">9 =&gt; 99</span><br><span class="line">10 =&gt; 120</span><br></pre></td></tr></table></figure><p>从结果可以看出：<br>如果每边有0个箭头，这时不用移动箭头就完成游戏，移动次数为0。<br>如果每边有1个箭头，最少需要移动3次。<br>如果每边有2个箭头，最少需要移动8次。<br>如果每边有3个箭头，最少需要移动15次，跟当前游戏相同。</p><p>观察结果，可以推出以下式子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">0</span>) = <span class="number">0</span></span><br><span class="line">f(<span class="number">1</span>) = f(<span class="number">0</span>) + <span class="number">3</span></span><br><span class="line">f(<span class="number">2</span>) = f(<span class="number">1</span>) + <span class="number">5</span></span><br><span class="line">f(<span class="number">3</span>) = f(<span class="number">2</span>) + <span class="number">7</span></span><br><span class="line">f(<span class="number">4</span>) = f(<span class="number">3</span>) + <span class="number">9</span></span><br><span class="line">...</span><br><span class="line">f(n) = f(n-<span class="number">1</span>) + 2n + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>求一下数列的通项式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">由于：</span><br><span class="line">f(n)   - f(n-1) = 2(n) + 1</span><br><span class="line">f(n-1) - f(n-2) = 2(n-1) + 1</span><br><span class="line">f(n-2) - f(n-3) = 2(n-2) + 1</span><br><span class="line">...</span><br><span class="line">f(2) - f(1) = 2(2) + 1</span><br><span class="line">f(1) - f(0) = 2(1) + 1</span><br><span class="line"></span><br><span class="line">将等号两边分别相加得：</span><br><span class="line">f(n) - f(0) = 2(1 + 2 + ... + n) + (1 + 1 + ... + 1)</span><br><span class="line">            = 2((1 + n) * n / 2) + n</span><br><span class="line">            = (1 + n) * n + n</span><br><span class="line">            = n * (n + 2)</span><br><span class="line"></span><br><span class="line">由于 f(0) = 0，</span><br><span class="line">因此 f(n) = n * (n + 2)</span><br></pre></td></tr></table></figure><p>可以很方便地算出，当每边有3个箭头时，所需移动次数为<code>3 * (3 + 2) = 15</code>。</p><hr><h3 id="六、完整代码"><a href="#六、完整代码" class="headerlink" title="六、完整代码"></a>六、完整代码</h3><p>完整的代码见：<a href="https://github.com/poboke/Machinarium">https://github.com/poboke/Machinarium</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
            <tag> 谜题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法解《机械迷城》游戏一：红绿点转盘</title>
      <link href="/machinarium-puzzle-game-wheel.html"/>
      <url>/machinarium-puzzle-game-wheel.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、游戏介绍"><a href="#一、游戏介绍" class="headerlink" title="一、游戏介绍"></a>一、游戏介绍</h3><p>我们的机器人小萝卜头(robot)经历了千辛万苦，终于进入了监狱的第三个牢房。<br>牢房的柜子里可能藏着好东西，但是柜子的门上安装了一个密码锁，需要先打开密码锁才能开柜子。</p><p>密码锁由12个点组成，其中有6个绿点和6个红点。<br>密码锁上面还有3个转盘，每个转盘边上都有6个点。<br>转盘可以按顺时针或逆时针的方向旋转，当转盘旋转时，转盘上的6个点会跟着转盘一起转动。</p><p><img src="/assets/2020/05/wheel_1.png" class="lazyload placeholder" data-srcset="/assets/2020/05/wheel_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>如果将6个绿色的点转到中央的三角形区域，密码锁就能打开，如下图所示：</p><p><img src="/assets/2020/05/wheel_done.png" class="lazyload placeholder" data-srcset="/assets/2020/05/wheel_done.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>那么问题来了：你能帮小萝卜头找出打开密码锁的<strong>最少</strong>旋转步骤吗？</p><hr><h3 id="二、游戏分析"><a href="#二、游戏分析" class="headerlink" title="二、游戏分析"></a>二、游戏分析</h3><p>如果用数字1来表示绿点，数字0表示红点，那么游戏可以表示为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  1   0   1</span><br><span class="line"></span><br><span class="line">0   1   0   1</span><br><span class="line"></span><br><span class="line">  0   1   0</span><br><span class="line"></span><br><span class="line">    1   0</span><br></pre></td></tr></table></figure><p>若将这12个数字按从左到右、从上到下的顺序保存到一个数组里，则当前游戏状态可以表示为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]</span><br></pre></td></tr></table></figure><p>那么当转盘转动时，怎么改变这个数组的值呢？<br>可以考虑先记录下每个转盘上的点在数组里的下标，然后根据下标来移动元素的值。</p><p>先看一下所有点在数组里的下标：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  0   1   2</span><br><span class="line"></span><br><span class="line">3   4   5   6</span><br><span class="line"></span><br><span class="line">  7   8   9</span><br><span class="line"></span><br><span class="line">   10   11</span><br></pre></td></tr></table></figure><p>由上图可知，3个转盘边上的点的下标分别为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第1个转盘：[0, 1, 5, 8, 7, 3]</span><br><span class="line">第2个转盘：[1, 2, 6, 9, 8, 4]</span><br><span class="line">第3个转盘：[4, 5, 9, 11, 10, 7]</span><br></pre></td></tr></table></figure><p>注意，上面转盘的点坐标是按顺时针方向获取的，以便进行旋转的操作。<br>只要能够模拟转盘的转动，就能编写自动求解答案的算法了。</p><hr><h3 id="三、游戏编写"><a href="#三、游戏编写" class="headerlink" title="三、游戏编写"></a>三、游戏编写</h3><p>要找出游戏的解法，首先要模拟游戏的玩法，下面就用python来实现一下这个游戏。</p><p>新建一个游戏类，使用dots数组来初始化游戏：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dots</span>):</span></span><br><span class="line">        self.dots = dots</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   %d   %d   %d</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> %d   %d   %d   %d</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   %d   %d   %d</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     %d   %d</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>%<span class="built_in">tuple</span>(self.dots)</span><br><span class="line">        <span class="built_in">print</span>(text)</span><br><span class="line"></span><br><span class="line">dots = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">game = Game(dots)</span><br><span class="line">game.show()</span><br></pre></td></tr></table></figure><p>代码执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  1   0   1</span><br><span class="line"></span><br><span class="line">0   1   0   1</span><br><span class="line"></span><br><span class="line">  0   1   0</span><br><span class="line"></span><br><span class="line">    1   0</span><br></pre></td></tr></table></figure><p>由结果可见，游戏类能够正常打印出点的位置。</p><p>再给游戏类添加一个转动转盘的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dots</span>):</span></span><br><span class="line">        self.dots = dots</span><br><span class="line">        self.wheel_poses = [</span><br><span class="line">            [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">3</span>],</span><br><span class="line">            [<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">4</span>],</span><br><span class="line">            [<span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">7</span>],</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">turn</span>(<span class="params">self, index, clockwise</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;转动轮盘</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            index: 转盘下标</span></span><br><span class="line"><span class="string">            clockwise: 是否顺时针旋转</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        poses = self.wheel_poses[index]</span><br><span class="line">        <span class="keyword">if</span> clockwise:</span><br><span class="line">            <span class="comment"># 顺时针旋转</span></span><br><span class="line">            temp = self.dots[poses[-<span class="number">1</span>]]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(poses)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                self.dots[poses[i]] = self.dots[poses[i-<span class="number">1</span>]]</span><br><span class="line">            self.dots[poses[<span class="number">0</span>]] = temp</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 逆时针旋转</span></span><br><span class="line">            temp = self.dots[poses[<span class="number">0</span>]]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(poses)):</span><br><span class="line">                self.dots[poses[i-<span class="number">1</span>]] = self.dots[poses[i]]</span><br><span class="line">            self.dots[poses[-<span class="number">1</span>]] = temp</span><br></pre></td></tr></table></figure><p>如果将第一个转盘按顺时针方向转动一下，将会成为下面的样子：</p><p>转动前：<br><img src="/assets/2020/05/wheel_1.png" class="lazyload placeholder" data-srcset="/assets/2020/05/wheel_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>转动后：<br><img src="/assets/2020/05/wheel_11.png" class="lazyload placeholder" data-srcset="/assets/2020/05/wheel_11.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>测试一下旋转的方法，以下代码将第一个转盘按顺时针方向转动：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dots = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">game = Game(dots)</span><br><span class="line">game.turn(<span class="number">0</span>, <span class="literal">True</span>)</span><br><span class="line">game.show()</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  0   1   1</span><br><span class="line"></span><br><span class="line">0   1   0   1</span><br><span class="line"></span><br><span class="line">  1   0   0</span><br><span class="line"></span><br><span class="line">    1   0</span><br></pre></td></tr></table></figure><p>可见结果的数值和图片是相对应的，至此游戏的代码就编写完成了。</p><hr><h3 id="四、游戏解法"><a href="#四、游戏解法" class="headerlink" title="四、游戏解法"></a>四、游戏解法</h3><p>我们想写算法自动求解游戏，最终肯定要判断游戏是否完成的，所以可以先考虑一下游戏的完成条件。<br>当结果如下图所示时，就说明游戏完成了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  0   1   0</span><br><span class="line"></span><br><span class="line">0   1   1   0</span><br><span class="line"></span><br><span class="line">  1   1   1</span><br><span class="line"></span><br><span class="line">    0   0</span><br></pre></td></tr></table></figure><p>将上图转换成数组，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0]</span><br></pre></td></tr></table></figure><p>所以只要判断游戏状态是否等于上面的数组就行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_done</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否完成游戏&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dots == [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>要找出最少的旋转步骤，可以使用广度优先搜索算法来求解答案。</p><p>广度优先搜索就像孙悟空走迷宫一样，比如孙悟空走到迷宫的三岔口，就会拔出猴毛变成三个分身，每个分身进入一个分叉口。每个分身分别到达下一个分叉口后，又变出和分叉口一样多的分身进入每个分叉口。这样当其中某个分身最先到达迷宫终点的时候，这个分身所走过的路径就是最短的。</p><p>这个转盘游戏也是一样，游戏有3个转盘，每个转盘有两个旋转方向，所以总共有6种转法。每种转法相当于一个分叉口，把初始游戏按每种转法旋转后得到6个结果，每个结果也分别转6次得到6个子结果，这样不断转下去，子子孙孙无穷匮也。当某个子结果完成的时候，这个子结果所转动的次数就是最少的。</p><p>算法如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copy</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;拷贝对象&quot;&quot;&quot;</span></span><br><span class="line">        game = Game(self.dots[:])</span><br><span class="line">        game.ops = self.ops[:]</span><br><span class="line">        <span class="keyword">return</span> game</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;使用BFS求解答案&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 将当前游戏加入队列</span></span><br><span class="line">        queue = [self]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            pre_game = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 遍历3个转盘的下标</span></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]:</span><br><span class="line">                <span class="comment"># 遍历两种旋转方向</span></span><br><span class="line">                <span class="keyword">for</span> clockwise <span class="keyword">in</span> [<span class="literal">True</span>, <span class="literal">False</span>]:</span><br><span class="line">                    <span class="comment"># 拷贝上一个游戏状态来模拟游戏旋转</span></span><br><span class="line">                    cur_game = pre_game.copy()</span><br><span class="line">                    cur_game.turn(index, clockwise)</span><br><span class="line">                    cur_game.ops += [(index, clockwise)]</span><br><span class="line">                    <span class="keyword">if</span> cur_game.is_done():</span><br><span class="line">                        <span class="comment"># 如果游戏完成，则打印操作步骤</span></span><br><span class="line">                        <span class="built_in">print</span>(cur_game.ops)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    <span class="comment"># 将当前游戏加入队列</span></span><br><span class="line">                    queue.append(cur_game)</span><br><span class="line"></span><br><span class="line">dots = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">game = Game(dots)</span><br><span class="line">game.solve()</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(0, True), (1, False), (2, True), (1, False)]</span><br></pre></td></tr></table></figure><p>其中<code>(0, True)</code>表示将第1个转盘进行顺时针旋转，<code>(1, False)</code>表示将第2个转盘进行逆时针旋转，其它的同理。</p><p>也就是说，最少需要转动4次才能解开密码锁，旋转过程为：</p><p><img src="/assets/2020/05/wheel_1.gif" class="lazyload placeholder" data-srcset="/assets/2020/05/wheel_1.gif" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><hr><h3 id="五、其它解法"><a href="#五、其它解法" class="headerlink" title="五、其它解法"></a>五、其它解法</h3><p>多次打开密码锁可以发现，密码锁的初始状态不是固定的，还可能出现另一种状态：</p><p><img src="/assets/2020/05/wheel_2.png" class="lazyload placeholder" data-srcset="/assets/2020/05/wheel_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>修改一下初始化数组的值，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dots = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">game = Game(dots)</span><br><span class="line">game.solve()</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(0, True), (1, True), (2, False), (0, False), (0, False)]</span><br></pre></td></tr></table></figure><p>在这种初始状态下，需要旋转5次才能完成游戏，旋转过程为：</p><p><img src="/assets/2020/05/wheel_2.gif" class="lazyload placeholder" data-srcset="/assets/2020/05/wheel_2.gif" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><hr><h3 id="六、完整代码"><a href="#六、完整代码" class="headerlink" title="六、完整代码"></a>六、完整代码</h3><p>完整的代码见：<a href="https://github.com/poboke/Machinarium">https://github.com/poboke/Machinarium</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
            <tag> 谜题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>能让人疯掉的10道题</title>
      <link href="/ten-crazy-questions.html"/>
      <url>/ten-crazy-questions.html</url>
      
        <content type="html"><![CDATA[<p>这10道题环环相扣，单看一道题或几道题，答不出结果。<br>只有把题目全看完，并作出正确的假设和推理，才能答对。</p><blockquote><p>1、第一个答案是B的问题是哪一个：<br>A.第2题　B.第3题　C.第4题　D.第5题　E.第6题</p><p>2、唯一的连续两个具有相同答案的问题是：<br>A.第2，3题　B.第3，4题　C.第4，5题　D.第5，6题　E.第6，7题</p><p>3、本问题答案和哪一个问题的答案相同：<br>A.第1题　B.第2题　C.第4题　D.第7题　E.第6题</p><p>4、答案是A的问题的个数是：<br>A.0个　B.1个　C.2个　D.3个　E.4个</p><p>5、本问题答案和哪一个问题的答案相同：<br>A.第10题　B.第9题　C.第8题　D.第7题　E.第6题</p><p>6、答案是A的问题的个数和答案是什么的问题的个数相同：<br>A.B　B.C　C.D　D.E　E.以上都不是</p><p>7、按照字母顺序，本问题的答案和下一个问题的答案相差几个字母（注：A和B相差一个字母）：<br>A.4个　B.3个　C.2个　D.1个　E.0个</p><p>8、答案是元音字母的问题的个数是（注：A和E是元音字母）：<br>A.2个　B.3个　C.4个　D.5个　E.6个</p><p>9、答案是辅音字母的问题的个数是：<br>A.一个质数　B.一个阶乘数　C.一个平方数　D.一个立方数　E.5的倍数</p><p>10、本问题的答案是：<br>A.A　B.B　C.C　D.D　E.E</p><p>这10道题的答案为：<u>　　　　　　　　　　　</u>。</p></blockquote><p>以下是用python代码写的求解算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">A = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">B = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">C = <span class="string">&#x27;C&#x27;</span></span><br><span class="line">D = <span class="string">&#x27;D&#x27;</span></span><br><span class="line">E = <span class="string">&#x27;E&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q1</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : answer[<span class="number">2</span>],</span><br><span class="line">        B : answer[<span class="number">3</span>],</span><br><span class="line">        C : answer[<span class="number">4</span>],</span><br><span class="line">        D : answer[<span class="number">5</span>],</span><br><span class="line">        E : answer[<span class="number">6</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">1</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == B</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q2</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : (answer[<span class="number">2</span>], answer[<span class="number">3</span>]),</span><br><span class="line">        B : (answer[<span class="number">3</span>], answer[<span class="number">4</span>]),</span><br><span class="line">        C : (answer[<span class="number">4</span>], answer[<span class="number">5</span>]),</span><br><span class="line">        D : (answer[<span class="number">5</span>], answer[<span class="number">6</span>]),</span><br><span class="line">        E : (answer[<span class="number">6</span>], answer[<span class="number">7</span>]),</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">2</span>]]</span><br><span class="line">    count = <span class="built_in">sum</span>([(x[<span class="number">0</span>] == x[<span class="number">1</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> options.values()])</span><br><span class="line">    <span class="keyword">return</span> (option[<span class="number">0</span>] == option[<span class="number">1</span>]) <span class="keyword">and</span> (count == <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q3</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : answer[<span class="number">1</span>],</span><br><span class="line">        B : answer[<span class="number">2</span>],</span><br><span class="line">        C : answer[<span class="number">4</span>],</span><br><span class="line">        D : answer[<span class="number">7</span>],</span><br><span class="line">        E : answer[<span class="number">6</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">3</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == answer[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q4</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : <span class="number">0</span>,</span><br><span class="line">        B : <span class="number">1</span>,</span><br><span class="line">        C : <span class="number">2</span>,</span><br><span class="line">        D : <span class="number">3</span>,</span><br><span class="line">        E : <span class="number">4</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">4</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == answer.count(A)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q5</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : answer[<span class="number">10</span>],</span><br><span class="line">        B : answer[<span class="number">9</span>],</span><br><span class="line">        C : answer[<span class="number">8</span>],</span><br><span class="line">        D : answer[<span class="number">7</span>],</span><br><span class="line">        E : answer[<span class="number">6</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">5</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == answer[<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q6</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : B,</span><br><span class="line">        B : C,</span><br><span class="line">        C : D,</span><br><span class="line">        D : E,</span><br><span class="line">        E : <span class="literal">None</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">6</span>]]</span><br><span class="line">    <span class="keyword">if</span> option == <span class="literal">None</span>:</span><br><span class="line">        counts = [answer.count(x) <span class="keyword">for</span> x <span class="keyword">in</span> [B, C, D, E]]</span><br><span class="line">        <span class="keyword">return</span> answer.count(A) <span class="keyword">not</span> <span class="keyword">in</span> counts</span><br><span class="line">    <span class="keyword">return</span> answer.count(A) == answer.count(option)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q7</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : <span class="number">4</span>,</span><br><span class="line">        B : <span class="number">3</span>,</span><br><span class="line">        C : <span class="number">2</span>,</span><br><span class="line">        D : <span class="number">1</span>,</span><br><span class="line">        E : <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">7</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == <span class="built_in">abs</span>(<span class="built_in">ord</span>(answer[<span class="number">7</span>]) - <span class="built_in">ord</span>(answer[<span class="number">8</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q8</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : <span class="number">2</span>,</span><br><span class="line">        B : <span class="number">3</span>,</span><br><span class="line">        C : <span class="number">4</span>,</span><br><span class="line">        D : <span class="number">5</span>,</span><br><span class="line">        E : <span class="number">6</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">8</span>]]</span><br><span class="line">    count = answer.count(A) + answer.count(E)</span><br><span class="line">    <span class="keyword">return</span> option == count</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q9</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : (<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>),</span><br><span class="line">        B : (<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>),</span><br><span class="line">        C : (<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>),</span><br><span class="line">        D : (<span class="number">0</span>, <span class="number">1</span>, <span class="number">8</span>),</span><br><span class="line">        E : (<span class="number">0</span>, <span class="number">5</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">9</span>]]</span><br><span class="line">    count = <span class="number">10</span> - answer.count(A) - answer.count(E)</span><br><span class="line">    <span class="keyword">return</span> count <span class="keyword">in</span> option</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q10</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : A,</span><br><span class="line">        B : B,</span><br><span class="line">        C : C,</span><br><span class="line">        D : D,</span><br><span class="line">        E : E,</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">10</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == answer[<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取10道题答案的全排列</span></span><br><span class="line">answers = itertools.product([A, B, C, D, E], repeat=<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> answer <span class="keyword">in</span> answers:</span><br><span class="line">    <span class="comment">#为了让代码更容易看懂，加了个下标占位符</span></span><br><span class="line">    answer = [<span class="string">&#x27;&#x27;</span>] + <span class="built_in">list</span>(answer)</span><br><span class="line">    <span class="keyword">if</span> Q1() <span class="keyword">and</span> Q2() <span class="keyword">and</span> Q3() <span class="keyword">and</span> Q4() <span class="keyword">and</span> Q5() <span class="keyword">and</span> \</span><br><span class="line">       Q6() <span class="keyword">and</span> Q7() <span class="keyword">and</span> Q8() <span class="keyword">and</span> Q9() <span class="keyword">and</span> Q10():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(answer))</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><details><summary>点击查看答案：</summary><p>执行结果为：<code>CDEBEEDCBA</code></p></details>]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 挑战智慧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 智力题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数学与魔术：油与水》</title>
      <link href="/math-and-magic-oil-and-water.html"/>
      <url>/math-and-magic-oil-and-water.html</url>
      
        <content type="html"><![CDATA[<div class="note link green"><p>点击链接查看第9集的魔术表演：<a href="https://open.163.com/newview/movie/free?pid=M8JHGS5KF&mid=M8JHKQCEM">《数学与魔术：油与水》</a></p></div><p>利用数学原理表演的魔术，只要严格按照魔术师的步骤表演，结果都一定能成功。</p><p>所以很多看似不可能完成的事情，背后往往有着不为人知的技巧，而这正是魔术令人着迷的地方。</p><p>接下来就详细说一下我对这个魔术表演的推理过程。</p><h3 id="一、魔术师的表演步骤"><a href="#一、魔术师的表演步骤" class="headerlink" title="一、魔术师的表演步骤"></a>一、魔术师的表演步骤</h3><p>魔术师在表演过程中做了以下几个步骤：</p><ul><li>① 将五张红牌和五张蓝牌面朝上放在一起</li><li>② 将五张红色牌翻过来背朝上</li><li>③ 把牌的顺序洗乱</li><li>④ 放一张翻一张将牌数在桌上</li><li>⑤ 魔术师随便切牌</li><li>⑥ 拿几张牌让观众决定是否翻过来</li><li>⑦ 重复⑤和⑥直到观众满意</li><li>⑧ 左一张右一张将牌分成两叠</li><li>⑨ 让观众选择一叠翻过来</li><li>⑩ 结果：不同颜色的牌的朝向不同</li></ul><h3 id="二、简化表演步骤"><a href="#二、简化表演步骤" class="headerlink" title="二、简化表演步骤"></a>二、简化表演步骤</h3><p>整个表演过程中随机性的选择很多，所以看起来不太好推导，但是如果把步骤精简一下的话，看起来就清晰多了。</p><p>假如在很久很久以前，有一个魔术师发明了一个魔术，魔术的步骤是①②⑩，做完这3个步骤后，魔术就完美结束了，因为经过第②步操作后，红蓝牌的朝向自然就不同了。<br>也就是说，第③到⑨之间操作的步骤，并不会改变牌的朝向，而只会打乱牌的顺序。</p><p>那么把步骤③加进去呢？结果还是一样，牌的顺序乱了，但牌的朝向不变。</p><p>如果把步骤④加进去呢？奇数张牌的朝向不变，但是偶数张牌的朝向变了。</p><p>如果再把步骤⑧⑨加进去呢？⑧是将奇数的牌和偶数的牌分成两叠，⑨是将其中一叠翻过来。<br>如果观众选择的是偶数牌叠，那么就会和步骤④互相抵消，牌的朝向又还原了。<br>如果观众选择的是奇数牌叠，和步骤④合起来相当于把所有牌翻了过来，那么红蓝牌的朝向依然不同。</p><p>如果把步骤⑤加进去呢？切牌就是将牌分成两叠再交换位置。<br>更多切牌的知识可以看这篇文章：<a href="/math-and-magic-the-mind-match-experiment.html">《数学与魔术：心灵支配配对实验》</a>。<br>如果切的两叠牌都是偶数张，那么牌的奇偶性不变，原来奇数位置的牌依然在奇数的位置。<br>如果切的两叠牌都是奇数张，那么偶数张牌和奇数张牌的位置互换了，虽然原来的奇数张牌变成了偶数张牌，但是牌的朝向依然不变，所以对魔术的结果依然没影响。</p><h3 id="三、观众的选择"><a href="#三、观众的选择" class="headerlink" title="三、观众的选择"></a>三、观众的选择</h3><p>现在只剩下第⑥个步骤了，观众随机的选择，会让牌的朝向发生变化，这是最能迷惑人的地方。</p><p>因为做完步骤②后，魔术是可以结束的，也就是说牌的朝向都是正确的，可以将10张牌的朝向记为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>注意，数组记录的是牌正确的朝向，而不是牌的正反面。红色的牌背面朝上，黑色的牌正面朝上，都是正确的朝向，所以都记为<code>1</code>。</p><p>做完第⑤个步骤后，奇数张牌和偶数张牌朝向不同，如果将错误的朝向记为<code>0</code>，那么这10张牌的朝向可以表示为(下标<code>0</code>为牌顶)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>假如现在开始做步骤⑥了，魔术师将牌分成两部分，顶部4张牌和底部6张牌：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">top = [a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>], a[<span class="number">3</span>]] = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">bottom = [a[<span class="number">4</span>], a[<span class="number">5</span>], a[<span class="number">6</span>], a[<span class="number">7</span>], a[<span class="number">8</span>], a[<span class="number">9</span>]] = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>如果观众选择将顶部4张牌翻面，底部6张牌不翻面，那么结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># top是先翻面放下去的，bottom就成了牌顶</span></span><br><span class="line">a = bottom + ~top</span><br><span class="line">  = [a[<span class="number">4</span>], a[<span class="number">5</span>], a[<span class="number">6</span>], a[<span class="number">7</span>], a[<span class="number">8</span>], a[<span class="number">9</span>], !a[<span class="number">3</span>], !a[<span class="number">2</span>], !a[<span class="number">1</span>], !a[<span class="number">0</span>]]</span><br><span class="line">  = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>可见奇数张牌和偶数张牌的朝向依然不变，如果观众选择顶部4张牌不翻面，底部6张牌翻面，结果也是一样的。</p><p>如果魔术师将顶部3张翻面和底部7张不翻面的话，会导致结果异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [a[<span class="number">3</span>], a[<span class="number">4</span>], a[<span class="number">5</span>], a[<span class="number">6</span>], a[<span class="number">7</span>], a[<span class="number">8</span>], a[<span class="number">9</span>], !a[<span class="number">2</span>], !a[<span class="number">1</span>], !a[<span class="number">0</span>]]</span><br><span class="line">  = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>视频里也可以看出魔术师有数牌的痕迹，每次数<code>2</code>、<code>4</code>或<code>6</code>张，所以魔术师只要保证每次拿的牌是偶数就行了，无论观众怎么选择，牌的朝向都不会改变。</p>]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 魔术学堂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教学 </tag>
            
            <tag> 魔术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数学与魔术：心灵支配配对实验》</title>
      <link href="/math-and-magic-the-mind-match-experiment.html"/>
      <url>/math-and-magic-the-mind-match-experiment.html</url>
      
        <content type="html"><![CDATA[<div class="note link green"><p>点击链接查看第7集的魔术表演：<a href="https://open.163.com/newview/movie/free?pid=M8JHGS5KF&mid=M8JHKPS78">《数学与魔术：心灵支配配对实验》</a></p></div><h3 id="一、切牌的原理"><a href="#一、切牌的原理" class="headerlink" title="一、切牌的原理"></a>一、切牌的原理</h3><p>切牌是指将一副牌任意分成两部分，再将两部分牌进行交换，切牌后牌的相对顺序依然保持不变。</p><p>比如有5张牌，顺序为<code>1 2 3 4 5</code>，如果把牌看成首尾相接的圆环的话，那么<code>5</code>的下一张牌就是<code>1</code>。<br>将牌顶的两张牌切到牌底，顺序变成了<code>3 4 5 1 2</code>，可以看到<code>5</code>的下一张牌还是<code>1</code>。<br>无论切了多少次牌，牌的相对顺序依然不变。</p><h3 id="二、卡片和筹码的秘密"><a href="#二、卡片和筹码的秘密" class="headerlink" title="二、卡片和筹码的秘密"></a>二、卡片和筹码的秘密</h3><p>魔术师将ESP卡片分成两叠，每叠有5张卡片，让观众把4个筹码任意放在两叠卡片上，每叠卡片有多少个筹码就从顶部拿多少张卡片到底部。</p><p>因为这是数学魔术，所以无论观众怎么放筹码，最终都会成功的。</p><p>怎样才能找出两叠卡片的相对顺序呢？假设一开始第一叠卡片翻开了，第二叠卡片的顺序还未知：<br><img src="/assets/2018/11/mind_match_1.png" class="lazyload placeholder" data-srcset="/assets/2018/11/mind_match_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>注意魔术师移动卡片时，每次都是把顶部的卡片移到底部，相当于每次都切1张牌。<br>那么如果第一叠卡片移动3次，第二叠卡片移动1次的话，结果会变成：<br><img src="/assets/2018/11/mind_match_2.png" class="lazyload placeholder" data-srcset="/assets/2018/11/mind_match_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>由结果可知，<code>卡片B</code>为<code>波浪卡</code>。</p><p>而筹码总共有5种摆放方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一叠卡片的筹码数：0 1 2 3 4</span><br><span class="line">第二叠卡片的筹码数：4 3 2 1 0</span><br></pre></td></tr></table></figure><p>只要把这5种情况都试一遍，就能得出第二叠卡片的排列顺序：<br><img src="/assets/2018/11/mind_match_3.png" class="lazyload placeholder" data-srcset="/assets/2018/11/mind_match_3.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>可见第一叠卡片和第二叠卡片的顺序相反。</p><h3 id="三、逆序卡片的特性"><a href="#三、逆序卡片的特性" class="headerlink" title="三、逆序卡片的特性"></a>三、逆序卡片的特性</h3><p>为什么两叠卡片的顺序相反时有这个特性呢？</p><p>假设每叠卡片的数量为<code>n</code>，筹码数是<code>n-1</code>。<br>如果第一叠卡片放了<code>k</code>个筹码，则移动<code>k</code>张卡片后，卡片顶部是第<code>k</code>张(下标从0开始)。<br>第二叠卡片移动了<code>n-1-k</code>次，卡片顶部是第<code>n-1-k</code>张。</p><p>由于两叠卡片顺序相反，那么第一叠卡片的第<code>i</code>张和第二叠卡片的第<code>n-1-i</code>张相同(下标从0开始)。<br>所以第一叠卡片的第<code>k</code>张和第二叠卡片的第<code>n-1-k</code>张相同。</p><p>因为整个过程都是通过切牌的方式移动卡片的，所以当拿走顶部的卡片后，剩下的卡片的相对顺序不变，两叠卡片依然是逆序的，因此能够继续表演下去。</p><h3 id="四、推导出卡片的初始顺序"><a href="#四、推导出卡片的初始顺序" class="headerlink" title="四、推导出卡片的初始顺序"></a>四、推导出卡片的初始顺序</h3><p>一开始魔术师随便切了几次牌，观众也切过了牌，魔术师再从顶部一张一张数了5张卡片到桌子上形成第一叠卡片，剩下的卡片直接放在桌子上形成第二叠卡片。  </p><p>这时桌子上两叠卡片的顺序是相反的，也就是说一开始两叠卡片的顺序是相同的，第一叠卡片在数牌的时候顺序反过来了。</p><p>表演前只需把两叠卡片按相同的顺序排序叠在一起就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 魔术学堂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教学 </tag>
            
            <tag> 魔术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恢复Mac版QQ一些隐藏的小功能</title>
      <link href="/restore-some-functions-of-qq-for-mac.html"/>
      <url>/restore-some-functions-of-qq-for-mac.html</url>
      
        <content type="html"><![CDATA[<h3 id="零、前言"><a href="#零、前言" class="headerlink" title="零、前言"></a>零、前言</h3><p>最近使用Mac版QQ时弹出了一个版本更新提示，说最新版<code>v5.1.2</code>正式版已在官网发布，于是我便更新了。</p><p>不过更新完我就后悔了，因为我发现<code>5.x</code>版本有些功能用不了：</p><p>1、不能选择忙碌状态：<br><img src="/assets/2016/09/macqq_no_busy_status.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_no_busy_status.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"><br>要知道，我每次上QQ都会把状态设为忙碌，这样才能假装成很忙的样子。</p><p>2、不能发送本地图片，只能发送文件：<br><img src="/assets/2016/09/macqq_no_picture_button.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_no_picture_button.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"><br>从上图可以看到，发送图片的按钮不见了。虽然可以把图片拖到聊天窗口发送，但操作还是感觉很麻烦。</p><p>看来，我只能自己给给QQ加上这两个功能了。</p><h3 id="一、恢复忙碌状态选项"><a href="#一、恢复忙碌状态选项" class="headerlink" title="一、恢复忙碌状态选项"></a>一、恢复忙碌状态选项</h3><p>用<a href="http://www.interface-inspector.com/">Interface Inspector</a>附加QQ的进程，然后定位到选择状态的按钮，如下图所示：<br><img src="/assets/2016/09/macqq_inspector_popup_button.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_inspector_popup_button.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"><br>可以很明显地看出，菜单列表里有一个<code>忙碌</code>的菜单项，后面有个划了一条斜线的眼睛，表示该菜单项是隐藏状态。</p><p>因此可以猜想程序员只是把该菜单项隐藏了，具体作用应该还保留着，如果将该菜单项设置为不隐藏的话，那么就很有可能可以使用忙碌的功能了。</p><p>那么怎样才能获取到这个菜单列表呢？首先我们可以看到状态按钮的类名是<code>OnlineStateImagePopUpButton</code>，父类为<code>NSPopUpButton</code>，查看<code>NSPopUpButton</code>类的头文件，可以发现该类有一个<code>itemArray</code>的属性，能够获取到菜单列表：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSPopUpButton</span> : <span class="title">NSButton</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Accessing the items</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSMenuItem</span> *&gt; *itemArray;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSInteger</span> numberOfItems;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>也就是说，如果能获取到状态按钮对象的话，就能获取到菜单列表了。由图片可知，状态按钮在<code>MQAIOSelfInfoViewController2</code>视图控制器里。</p><p>用<code>class-dump</code>获取QQ的头文件，找到<code>MQAIOSelfInfoViewController2.h</code>，部分内容如下：</p><figure class="highlight objc"><figcaption><span>MQAIOSelfInfoViewController2.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MQAIOSelfInfoViewController2</span> : <span class="title">NSViewController</span> &lt;<span class="title">NSMenuDelegate</span>&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> _status;</span><br><span class="line">    <span class="built_in">NSButton</span> *_avatarButton;</span><br><span class="line">    <span class="built_in">NSPopUpButton</span> *_statusPopUpButton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>可以看到该视图控制器有一个<code>_statusPopUpButton</code>属性，看名字基本可以肯定是状态按钮了。</p><p>那么我们可以hook该视图控制器的<code>viewDidLoad</code>方法，这时状态按钮已经创建完毕，通过遍历状态按钮的菜单列表，将每个菜单的<code>hidden</code>属性设为<code>NO</code>。</p><h3 id="二、创建插件工程"><a href="#二、创建插件工程" class="headerlink" title="二、创建插件工程"></a>二、创建插件工程</h3><p>按照<a href="/use-easysimbl-to-inject-plugins-to-mac-app.html">《使用EasySIMBL为Mac应用加载插件》</a>教程里的方法安装EasySIMBL模板，然后用Xcode新建一个EasySIMBL插件工程，工程名为<code>QQPlugin</code>：<br><img src="/assets/2016/09/macqq_project_options.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_project_options.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>然后hook<code>-[MQAIOSelfInfoViewController2 viewDidLoad]</code>方法，代码如下所示：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">MQAIOSelfInfoViewController2BusyStatus</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)busyStatus_MQAIOSelfInfoViewController2</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> jr_swizzleMethod:<span class="keyword">@selector</span>(viewDidLoad)</span><br><span class="line">                withMethod:<span class="keyword">@selector</span>(busyStatus_viewDidLoad)</span><br><span class="line">                     error:<span class="literal">NULL</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)busyStatus_viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> busyStatus_viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSPopUpButton</span> *popUpButton = [<span class="keyword">self</span> valueForKey:<span class="string">@&quot;_statusPopUpButton&quot;</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSMenuItem</span> *menuItem <span class="keyword">in</span> popUpButton.itemArray) &#123;</span><br><span class="line">        menuItem.hidden = <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>编译后重新运行QQ，已经可以看到忙碌状态菜单了：<br><img src="/assets/2016/09/macqq_has_busy_status.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_has_busy_status.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>选择忙碌状态后，登录另一个QQ查看我当前的状态，确实变成忙碌了：<br><img src="/assets/2016/09/macqq_show_busy_status.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_show_busy_status.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><h3 id="三、恢复发送图片功能"><a href="#三、恢复发送图片功能" class="headerlink" title="三、恢复发送图片功能"></a>三、恢复发送图片功能</h3><p>用<code>Interface Inspector</code>定位到聊天框的工具栏，一共有7个按钮，这些按钮都没有设置隐藏属性：<br><img src="/assets/2016/09/macqq_inspector_chat_toolbar.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_inspector_chat_toolbar.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>可以看到聊天界面的工具栏也是7个按钮：<br><img src="/assets/2016/09/macqq_no_picture_button.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_no_picture_button.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>也就是说，如果要增加发送图片的按钮的话，就只能自己创建一个新的按钮，再加到工具栏上面了。</p><p>至于点击按钮会调用什么方法，可以通过逆向旧版本的QQ来获得。下面介绍一种方法，可以比较快速获取到按钮调用的方法：</p><p>首先下载<code>4.x</code>版本的QQ，然后打开插件工程，按<kbd>command + shift + ,</kbd>快捷键打开<code>Edit scheme</code>界面，<code>Executable</code>那一项选择<code>4.x</code>版本QQ的路径：<br><img src="/assets/2016/09/macqq_edit_scheme.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_edit_scheme.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"><br>然后再按<kbd>command + R</kbd>运行插件工程，Xcode会自动运行QQ。</p><p>登录QQ后随便进入一个聊天窗口，接着在Xcode的debug工具栏里点击界面调试按钮：<br><img src="/assets/2016/09/macqq_xcode_debug_view_hierarchy.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_xcode_debug_view_hierarchy.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>当视图层次界面加载完毕之后，在层次界面里选中QQ聊天框工具栏的发送图片按钮：<br><img src="/assets/2016/09/macqq_view_hierarchy_toolbar.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_view_hierarchy_toolbar.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>在Xcode的右侧边栏可以看到该按钮的属性：<br><img src="/assets/2016/09/macqq_view_hierarchy_action.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_view_hierarchy_action.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"><br>可以看到按钮调用的方法是<code>-[MQAIOChatTootKitViewController onPicture:]</code>。</p><p>查看<code>MQAIOChatTootKitViewController.h</code>文件，可以看到如下方法：</p><figure class="highlight objc"><figcaption><span>MQAIOChatTootKitViewController.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MQAIOChatTootKitViewController</span> : <span class="title">NSViewController</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) MQFaceButton *faceBtn;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) TXHoverButton *grabBtn;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) TXHoverButton *shakeBtn;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) TXHoverButton *pictureBtn;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) TXHoverButton *historyBtn;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) TXHoverButton *disruptBtn;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) MQSwitchButton *switchBtn;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)onFaceButtonClick;</span><br><span class="line">- (<span class="keyword">void</span>)onGrabScreen:(<span class="keyword">id</span>)arg1;</span><br><span class="line">- (<span class="keyword">void</span>)onShakeWindow:(<span class="keyword">id</span>)arg1;</span><br><span class="line">- (<span class="keyword">void</span>)onPicture:(<span class="keyword">id</span>)arg1;</span><br><span class="line">- (<span class="keyword">void</span>)onBlock:(<span class="keyword">id</span>)arg1;</span><br><span class="line">- (<span class="keyword">void</span>)onMsgRecord:(<span class="keyword">id</span>)arg1;</span><br><span class="line">- (<span class="keyword">void</span>)onClickSwitchButton:(<span class="keyword">id</span>)arg1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>可以猜想<code>pictureBtn</code>就是发送图片的按钮。</p><p>在<code>5.x</code>版QQ的头文件里也可以看到这些方法，把<code>5.x</code>版本QQ的可执行文件拖到Hopper里分析，然后查看<code>-[MQAIOChatTootKitViewController pictureBtn]</code>方法的伪代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> * -[MQAIOChatTootKitViewController pictureBtn](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd) &#123;</span><br><span class="line">    rbx = <span class="keyword">self</span>;</span><br><span class="line">    rax = rbx-&gt;_pictureBtn;</span><br><span class="line">    <span class="keyword">if</span> (rax == <span class="number">0x0</span>) &#123;</span><br><span class="line">            r12 = *_OBJC_IVAR_$_MQAIOChatTootKitViewController._pictureBtn;</span><br><span class="line">            r13 = *objc_msgSend;</span><br><span class="line">            rax = [rbx buttonOfClass:[TXHoverButton <span class="keyword">class</span>]];</span><br><span class="line">            rax = [rax <span class="keyword">retain</span>];</span><br><span class="line">            *(rbx + r12) = rax;</span><br><span class="line">            [rbx setConstraintsForButton:rax];</span><br><span class="line">            [*(rbx + r12) setTarget:rbx];</span><br><span class="line">            [*(rbx + r12) setAction:<span class="keyword">@selector</span>(onPicture:)];</span><br><span class="line">            [*(rbx + r12) setToolTip:[[<span class="built_in">NSBundle</span> mainBundle] localizedStringForKey:<span class="string">@&quot;Send pictures&quot;</span> value:<span class="string">@&quot;&quot;</span> table:<span class="number">0x0</span>]];</span><br><span class="line">            [*(rbx + r12) setNormalImage:[<span class="built_in">NSImage</span> imageNamed:<span class="string">@&quot;toolbar_pictures_normal&quot;</span>]];</span><br><span class="line">            [*(rbx + r12) setHoverImage:[<span class="built_in">NSImage</span> imageNamed:<span class="string">@&quot;toolbar_pictures_hover&quot;</span>]];</span><br><span class="line">            [*(rbx + r12) setAlternateImage:[<span class="built_in">NSImage</span> imageNamed:<span class="string">@&quot;toolbar_pictures_down&quot;</span>]];</span><br><span class="line">            rax = *(rbx + r12);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到该方法用懒加载的方式创建了一个按钮，也就是说代码还是保留的，只是没使用而已。那么我们可以先看其它按钮是怎么创建的，就看历史记录按钮好了。</p><p>按照<a href="/bulk-export-pseudo-code-in-hopper-disassembler.html">《Hopper Disassembler批量导出反编译的伪代码》</a>里的方法，反编译出<code>MQAIOChatTootKitViewController</code>类所有方法的伪代码。</p><p>打开<code>~/ClassDecompiles/QQ/MQAIOChatTootKitViewController.m</code>文件，搜索<code>historyBtn</code>，可以很快发现以下代码：</p><figure class="highlight objc"><figcaption><span>MQAIOChatTootKitViewController.m</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[MQAIOChatTootKitViewController setupUI:](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd, <span class="keyword">int</span> arg2) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">loc_100086744:</span><br><span class="line">    <span class="keyword">if</span> (LODWORD(r13) != <span class="number">0x80</span>) <span class="keyword">goto</span> loc_100086dad;</span><br><span class="line">    rax = (r12)(r15, <span class="keyword">@selector</span>(fileBtn));</span><br><span class="line">    r14 = var_A0;</span><br><span class="line">    (r12)(r14, <span class="keyword">@selector</span>(addSubview:), rax);</span><br><span class="line">    rax = (r12)(r15, <span class="keyword">@selector</span>(historyBtn));</span><br><span class="line">    (r12)(r14, <span class="keyword">@selector</span>(addSubview:), rax);</span><br><span class="line">    rsi = r15-&gt;_fileBtn;</span><br><span class="line">    rax = _NSDictionaryOfVariableBindings(<span class="string">@&quot;_fileBtn, _historyBtn&quot;</span>, rsi);</span><br><span class="line">    var_A8 = rax;</span><br><span class="line">    rax = (r12)(<span class="built_in">NSLayoutConstraint</span>, <span class="keyword">@selector</span>(constraintsWithVisualFormat:options:metrics:views:), <span class="string">@&quot;V:|-(top)-[_fileBtn]&quot;</span>, <span class="number">0x0</span>, var_98, rax);</span><br><span class="line">    (r12)(r14, <span class="keyword">@selector</span>(addConstraints:), rax);</span><br><span class="line">    rbx = (r12)(r15, <span class="keyword">@selector</span>(historyBtn));</span><br><span class="line">    rax = (r12)(r15, <span class="keyword">@selector</span>(fileBtn));</span><br><span class="line">    rax = (r12)(r15, <span class="keyword">@selector</span>(topAlignView:andView:), rbx, rax);</span><br><span class="line">    (r12)(r14, <span class="keyword">@selector</span>(addConstraint:), rax);</span><br><span class="line">    rdi = <span class="built_in">NSLayoutConstraint</span>;</span><br><span class="line">    rdx = <span class="string">@&quot;H:|-(leading)-[_fileBtn]-(gap1)-[_historyBtn]-(&gt;=gap3)-|&quot;</span>;</span><br><span class="line">    LODWORD(rcx) = <span class="number">0x0</span>;</span><br><span class="line">    rsi = <span class="keyword">@selector</span>(constraintsWithVisualFormat:options:metrics:views:);</span><br><span class="line">    r8 = var_98;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这些按钮是用自动布局的方法写的，因此可以考虑hook<code>-[MQAIOChatTootKitViewController setupUI:]</code>方法，在这些按钮添加完毕后，把发送图片的按钮加到最后面。</p><p>要先知道前面按钮的数量，才能计算出最后一个按钮的位置。考虑到不同的聊天框可能会出现不同数量的按钮，所以不能写死7个。那么怎么才能获取到这些按钮的数量呢？</p><p>看一下前面出现过的图片：<br><img src="/assets/2016/09/macqq_inspector_chat_toolbar.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_inspector_chat_toolbar.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"><br>可以看到这些按钮都是加在<code>MQEventForwardView</code>类的实例对象里的，在<code>MQAIOChatTootKitViewController.m</code>文件里搜索<code>MQEventForwardView</code>，可以发现以下代码：</p><figure class="highlight objc"><figcaption><span>MQAIOChatTootKitViewController.m</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> * -[MQAIOChatTootKitViewController init](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd) &#123;</span><br><span class="line">    var_28 = <span class="keyword">self</span>;</span><br><span class="line">    var_20 = *<span class="number">0x1011d6e70</span>;</span><br><span class="line">    r14 = <span class="keyword">@selector</span>(init);</span><br><span class="line">    rbx = [[var_28 <span class="keyword">super</span>] init];</span><br><span class="line">    <span class="keyword">if</span> (rbx != <span class="number">0x0</span>) &#123;</span><br><span class="line">            r15 = *objc_msgSend;</span><br><span class="line">            r14 = [[[MQEventForwardView alloc] init] autorelease];</span><br><span class="line">            [r14 setTranslatesAutoresizingMaskIntoConstraints:<span class="number">0x0</span>];</span><br><span class="line">            [r14 setDelegate:rbx];</span><br><span class="line">            [rbx setView:r14];</span><br><span class="line">            MQRegisterNotificationInMainThread(<span class="string">@&quot;kMQGroupEventNotification+weqe&quot;</span>, rbx, <span class="keyword">@selector</span>(handleGroupEventNotification:));</span><br><span class="line">            MQRegisterNotificationInMainThread(<span class="string">@&quot;kMQDiscussEventNotification+dfsdf&quot;</span>, rbx, <span class="keyword">@selector</span>(handleDiscussEventNotification:));</span><br><span class="line">            MQRegisterNotificationInMainThread(<span class="string">@&quot;kMQContactIMInfoEvtNotification&quot;</span>, rbx, <span class="keyword">@selector</span>(handleIMInfoEventNotification:));</span><br><span class="line">    &#125;</span><br><span class="line">    rax = rbx;</span><br><span class="line">    <span class="keyword">return</span> rax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，当试图控制器初始化的时候，就将<code>MQEventForwardView</code>实例对象赋值给了<code>view</code>属性。那么使用<code>self.view.subviews.count</code>方法就能获取到按钮的数量了。</p><p>最后的示例代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">MQAIOChatTootKitViewControllerSendPicture</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)sendPicture_MQAIOChatTootKitViewController</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> jr_swizzleMethod:<span class="keyword">@selector</span>(setupUI:)</span><br><span class="line">                withMethod:<span class="keyword">@selector</span>(sendPicture_setupUI:)</span><br><span class="line">                     error:<span class="literal">NULL</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)sendPicture_setupUI:(<span class="keyword">int</span>)arg1</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> sendPicture_setupUI:arg1];</span><br><span class="line">    </span><br><span class="line">    MQAIOChatTootKitViewController *vc = (MQAIOChatTootKitViewController *)<span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSInteger</span> buttonCount = vc.view.subviews.count;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSButton</span> *pictureBtn = (<span class="built_in">NSButton</span> *)vc.pictureBtn;</span><br><span class="line">    [vc.view addSubview:pictureBtn];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSDictionary</span> *metrics = @&#123;</span><br><span class="line">        <span class="string">@&quot;left&quot;</span> : @(<span class="number">20</span> + buttonCount * <span class="number">40</span>),</span><br><span class="line">        <span class="string">@&quot;top&quot;</span>  : @(<span class="number">10</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *views = <span class="built_in">NSDictionaryOfVariableBindings</span>(pictureBtn);</span><br><span class="line">    </span><br><span class="line">    [vc.view addConstraints:[<span class="built_in">NSLayoutConstraint</span> constraintsWithVisualFormat:<span class="string">@&quot;H:|-left-[pictureBtn]&quot;</span></span><br><span class="line">                                                                    options:<span class="number">0</span></span><br><span class="line">                                                                    metrics:metrics</span><br><span class="line">                                                                      views:views]];</span><br><span class="line">    [vc.view addConstraints:[<span class="built_in">NSLayoutConstraint</span> constraintsWithVisualFormat:<span class="string">@&quot;V:|-top-[pictureBtn]&quot;</span></span><br><span class="line">                                                                    options:<span class="number">0</span></span><br><span class="line">                                                                    metrics:metrics</span><br><span class="line">                                                                      views:views]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>编译后重启QQ，可以看到出现了发送图片按钮：<br><img src="/assets/2016/09/macqq_has_picture_button.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_has_picture_button.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"><br>点击后也确实可以发送图片了。</p><p>插件工程可以在<a href="https://github.com/poboke/EasySIMBL-Bundle-Template/tree/master/Samples/QQPlugin">QQPlugin</a>下载。</p><p>很惭愧，就做了一点微小的工作，谢谢大家。</p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Mac </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向Mac版扫雷游戏</title>
      <link href="/crack-minesweeper-game-for-mac.html"/>
      <url>/crack-minesweeper-game-for-mac.html</url>
      
        <content type="html"><![CDATA[<p>Mac App Store有一个扫雷的游戏，免费版只能玩初级和中级的级别，像我这种骨灰级玩家，肯定要玩高级级别的：<br><img src="/assets/2016/04/minesweeper_menu_hight_level.png" class="lazyload placeholder" data-srcset="/assets/2016/04/minesweeper_menu_hight_level.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>不过一点击 <kbd>高级</kbd> 菜单按钮，就会提示让我购买游戏，贫穷的我只能逆向一下这个app。</p><h3 id="一、破解游戏级别限制"><a href="#一、破解游戏级别限制" class="headerlink" title="一、破解游戏级别限制"></a>一、破解游戏级别限制</h3><p>首先运行<a href="http://www.interface-inspector.com/">Interface Inspector</a>，这是一个可以查看Mac应用界面元素结构和属性的软件，功能非常强大，运行后附加上扫雷的进程：<br><img src="/assets/2016/04/minesweeper_attach_application.png" class="lazyload placeholder" data-srcset="/assets/2016/04/minesweeper_attach_application.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>然后展开菜单 <kbd>游戏</kbd> –&gt; <kbd>新游戏</kbd> –&gt; <kbd>高级</kbd> ，在右边侧边栏可以看到 <kbd>高级</kbd> 菜单栏对象的内存地址是<code>0x101331130</code>：<br><img src="/assets/2016/04/minesweeper_inspector_hight_level.png" class="lazyload placeholder" data-srcset="/assets/2016/04/minesweeper_inspector_hight_level.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>接下来用lldb附加扫雷的进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Jobs: ~$ lldb -n &quot;Minesweeper Deluxe&quot;</span><br><span class="line">(lldb) process attach --name &quot;Minesweeper Deluxe&quot;</span><br><span class="line">Process 37343 stopped</span><br><span class="line">* thread #1: tid = 0x2b091, 0x00007fff8499cf72 libsystem_kernel.dylib`mach_msg_trap + 10, queue = &#x27;com.apple.main-thread&#x27;, stop reason = signal SIGSTOP</span><br><span class="line">    frame #0: 0x00007fff8499cf72 libsystem_kernel.dylib`mach_msg_trap + 10</span><br><span class="line">libsystem_kernel.dylib`mach_msg_trap:</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash">  0x7fff8499cf72 &lt;+10&gt;: retq</span></span><br><span class="line">    0x7fff8499cf73 &lt;+11&gt;: nop</span><br><span class="line"></span><br><span class="line">libsystem_kernel.dylib`mach_msg_overwrite_trap:</span><br><span class="line">    0x7fff8499cf74 &lt;+0&gt;:  movq   %rcx, %r10</span><br><span class="line">    0x7fff8499cf77 &lt;+3&gt;:  movl   $0x1000020, %eax          ; imm = 0x1000020</span><br><span class="line"></span><br><span class="line">Executable module set to &quot;/Applications/Minesweeper Deluxe.app/Contents/MacOS/Minesweeper Deluxe&quot;.</span><br><span class="line">Architecture set to: x86_64h-apple-macosx.</span><br><span class="line">(lldb) </span><br></pre></td></tr></table></figure><p>然后使用以下命令获取点击菜单按钮时调用的方法名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po 0x101331130</span><br><span class="line">&lt;NSMenuItem: 0x101331130 高级&gt;</span><br><span class="line"></span><br><span class="line">(lldb) po [0x101331130 target]</span><br><span class="line">&lt;minesweepermacAppDelegate: 0x1013353c0&gt;</span><br><span class="line"></span><br><span class="line">(lldb) po [0x101331130 action]</span><br><span class="line">0x0000000100088db1</span><br><span class="line"></span><br><span class="line">(lldb) po NSStringFromSelector(0x0000000100088db1)</span><br><span class="line">startNewGameExpert:</span><br></pre></td></tr></table></figure><p>由此可知，点击菜单按钮会调用<code>-[minesweepermacAppDelegate startNewGameExpert:]</code>方法，用Hopper可以看到该方法的伪代码为：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[minesweepermacAppDelegate startNewGameExpert:](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd, <span class="keyword">void</span> * arg2) &#123;</span><br><span class="line">    rdx = arg2;</span><br><span class="line">    rbx = <span class="keyword">self</span>;</span><br><span class="line">    r14 = *objc_msgSend;</span><br><span class="line">    [<span class="keyword">self</span> dismissLeaderboardView];</span><br><span class="line">    rax = [GameState sharedInstance];</span><br><span class="line">    rax = [rax fullgame];</span><br><span class="line">    <span class="keyword">if</span> (LOBYTE(rax) != <span class="number">0x0</span>) &#123;</span><br><span class="line">            r14 = *objc_msgSend;</span><br><span class="line">            rax = [GameState sharedInstance];</span><br><span class="line">            [rax setDifficulty:<span class="number">0x2</span>];</span><br><span class="line">            rax = [GameState sharedInstance];</span><br><span class="line">            [rax save];</span><br><span class="line">            [rbx-&gt;beginner setState:<span class="number">0x0</span>];</span><br><span class="line">            [rbx-&gt;intermediate setState:<span class="number">0x0</span>];</span><br><span class="line">            [rbx-&gt;expert setState:<span class="number">0x1</span>];</span><br><span class="line">            [rbx-&gt;custom setState:<span class="number">0x0</span>];</span><br><span class="line">            r15 = *objc_ivar_offset_minesweepermacAppDelegate_window_;</span><br><span class="line">            [*(rbx + r15) setIsVisible:<span class="number">0x0</span>];</span><br><span class="line">            xmm0 = intrinsic_xorps(xmm0, xmm0);</span><br><span class="line">            rdi = *(rbx + r15);</span><br><span class="line">            var_40 = intrinsic_movaps(var_40, xmm0);</span><br><span class="line">            var_30 = <span class="number">0x408d100000000000</span>;</span><br><span class="line">            var_28 = <span class="number">0x4082800000000000</span>;</span><br><span class="line">            [rdi setFrame:<span class="number">0x1</span> display:<span class="number">0x0</span> animate:r8];</span><br><span class="line">            [*(rbx + r15) center];</span><br><span class="line">            rax = [GameManager sharedGameManager];</span><br><span class="line">            [rax runSceneWithID:<span class="number">0x65</span>];</span><br><span class="line">            rax = [*(rbx + r15) setIsVisible:<span class="number">0x1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">            rax = [rbx unlockFullgame:<span class="number">0x0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由代码可知，当<code>-[GameState fullgame]</code>方法的返回值为<code>YES</code>的时候，才可以玩高级级别的游戏。<br>所以可以编写一个插件来hook这个方法，强制返回<code>YES</code>值。</p><p>按照<a href="/use-easysimbl-to-inject-plugins-to-mac-app.html">《使用EasySIMBL为Mac应用加载插件》</a>教程里的方法安装EasySIMBL模板，然后用Xcode新建一个EasySIMBL插件工程，工程名为<code>MinesweeperPlugin</code>：<br><img src="/assets/2016/04/minesweeper_project_options.png" class="lazyload placeholder" data-srcset="/assets/2016/04/minesweeper_project_options.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>然后hook<code>-[GameState fullgame]</code>方法，代码如下所示：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">GameStateHook</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)hook_GameState</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> jr_swizzleMethod:<span class="keyword">@selector</span>(fullgame)</span><br><span class="line">                withMethod:<span class="keyword">@selector</span>(hook_fullgame)</span><br><span class="line">                     error:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)hook_fullgame</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>编译代码后重新运行游戏，就可以进入高级级别游戏了。</p><h3 id="二、破解安全帽数量"><a href="#二、破解安全帽数量" class="headerlink" title="二、破解安全帽数量"></a>二、破解安全帽数量</h3><p>扫雷的菜单里还有一个购买安全帽的功能：<br><img src="/assets/2016/04/minesweeper_menu_5_safety_hat.png" class="lazyload placeholder" data-srcset="/assets/2016/04/minesweeper_menu_5_safety_hat.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>在帮助里可以看到安全帽的说明：</p><blockquote><p>使用安全帽</p><p>==========</p><p>使用 “<kbd>Alt</kbd> / <kbd>Option</kbd> + 左键点击” 可以保证安全。如果方块下面是雷会被插棋，如果下面不是雷会正常打开。每次会用掉一个安全帽。游戏中随时按下 “<kbd>Alt</kbd> / <kbd>Option</kbd>“ 键可以看安全帽数量。安全帽用完了可以在商店菜单中添加，也可以通过分享你的成绩获得免费安全帽。</p></blockquote><p>虽然我玩扫雷时不会使用这种作弊的功能，但是在某些情况下还是有用的。比如有时玩到最后会出现2选1的情况，这时如果靠运气点到地雷就太亏了，所以安全帽可以在这种情况下使用。那么顺便把安全帽的数量修改成无限吧。</p><p>同理，在<code>Interface Inspector</code>里查看购买5个安全帽的菜单地址：<br><img src="/assets/2016/04/minesweeper_inspector_5_safety_hat.png" class="lazyload placeholder" data-srcset="/assets/2016/04/minesweeper_inspector_5_safety_hat.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>再获取菜单调用的方法名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po 0x10112c2c0</span><br><span class="line">&lt;NSMenuItem: 0x10112c2c0 5个安全帽&gt;</span><br><span class="line"></span><br><span class="line">(lldb) po [0x10112c2c0 target]</span><br><span class="line">&lt;minesweepermacAppDelegate: 0x10122b630&gt;</span><br><span class="line"></span><br><span class="line">(lldb) po [0x10112c2c0 action]</span><br><span class="line">0x00000001000893a1</span><br><span class="line"></span><br><span class="line">(lldb) po NSStringFromSelector(0x00000001000893a1)</span><br><span class="line">buy5Robot:</span><br></pre></td></tr></table></figure><p>在Hopper里查看<code>-[minesweepermacAppDelegate buy5Robot:]</code>方法的伪代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[minesweepermacAppDelegate buy5Robot:](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd, <span class="keyword">void</span> * arg2) &#123;</span><br><span class="line">    rbx = *objc_msgSend;</span><br><span class="line">    [<span class="keyword">self</span> dismissLeaderboardView];</span><br><span class="line">    rdi = [InAppPurchaseManager getInstance];</span><br><span class="line">    rax = [rdi purchase5robot];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再查看<code>-[InAppPurchaseManager purchase5robot]</code>方法的伪代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[InAppPurchaseManager purchase5robot](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    r15 = *(var_68 + r14 * <span class="number">0x8</span>);</span><br><span class="line">    rax = [r15 productIdentifier];</span><br><span class="line">    rax = [rax isEqualToString:<span class="string">@&quot;com.sg.minesweepermac.robot5&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (LOBYTE(rax) != <span class="number">0x0</span>) &#123;</span><br><span class="line">            r12 = *objc_msgSend;</span><br><span class="line">            rbx = [<span class="built_in">SKPayment</span> paymentWithProduct:r15];</span><br><span class="line">            rax = [<span class="built_in">SKPaymentQueue</span> defaultQueue];</span><br><span class="line">            [rax addPayment:rbx];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码可知，购买的产品的id是<code>com.sg.minesweepermac.robot5</code>。</p><p>由<a href="http://bbs.iosre.com/t/iap/1353">《一种应用内付费(iap)的破解方法》</a>可知，内购的回调方法为<code>paymentQueue:updatedTransactions:</code>，在Hopper里搜一下这个方法，可以发现这个方法在<code>InAppPurchaseManager</code>类里。</p><p>接下来使用<a href="/bulk-export-pseudo-code-in-hopper-disassembler.html">《Hopper Disassembler批量导出反编译的伪代码》</a>里的方法，反编译出<code>InAppPurchaseManager</code>类所有方法的伪代码。<br>打开<code>~/ClassDecompiles/Minesweeper Deluxe/InAppPurchaseManager.m</code>文件，搜索<code>com.sg.minesweepermac.robot5</code>，可以很快发现以下代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)provideContent:(<span class="keyword">id</span>)arg2 </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    rax = [r14 isEqualToString:<span class="string">@&quot;com.sg.minesweepermac.robot5&quot;</span>];</span><br><span class="line">    LODWORD(r13) = <span class="number">0x5</span>;</span><br><span class="line">    <span class="keyword">if</span> (LOBYTE(rax) == <span class="number">0x0</span>) &#123;</span><br><span class="line">            rax = [r14 isEqualToString:<span class="string">@&quot;com.sg.minesweepermac.robot15&quot;</span>];</span><br><span class="line">            LODWORD(r13) = <span class="number">0xf</span>;</span><br><span class="line">            <span class="keyword">if</span> (LOBYTE(rax) == <span class="number">0x0</span>) &#123;</span><br><span class="line">                    rax = [r14 isEqualToString:<span class="string">@&quot;com.sg.minesweepermac.robot30&quot;</span>];</span><br><span class="line">                    LODWORD(r13) = <span class="number">0x1e</span>;</span><br><span class="line">                    <span class="keyword">if</span> (LOBYTE(rax) == <span class="number">0x0</span>) &#123;</span><br><span class="line">                            rax = [r14 isEqualToString:<span class="string">@&quot;com.sg.minesweepermac.robot60&quot;</span>];</span><br><span class="line">                            LODWORD(r13) = <span class="number">0x3c</span>;</span><br><span class="line">                            <span class="keyword">if</span> (LOBYTE(rax) == <span class="number">0x0</span>) &#123;</span><br><span class="line">                                    rax = [r14 isEqualToString:<span class="string">@&quot;com.sg.minesweepermac.robot90&quot;</span>];</span><br><span class="line">                                    LODWORD(r13) = <span class="number">0x5a</span>;</span><br><span class="line">                                    <span class="keyword">if</span> (LOBYTE(rax) == <span class="number">0x0</span>) &#123;</span><br><span class="line">                                            LODWORD(r13) = LODWORD(<span class="number">0x0</span>);</span><br><span class="line">                                    &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rbx = *objc_msgSend;</span><br><span class="line">    LODWORD(r15) = LODWORD([[GameState sharedInstance] robot]);</span><br><span class="line">    rax = [GameState sharedInstance];</span><br><span class="line">    [rax setRobot:LODWORD(LODWORD(r15) + LODWORD(r13))];</span><br><span class="line">    rax = [GameState sharedInstance];</span><br><span class="line">    [rax save];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，购买成功后通过不同的产品id来增加不同的安全帽数量，然后通过<code>-[GameState setRobot:]</code>方法保存安全帽的数量。<br>也就是说，属性<code>robot</code>储存了安全帽的数量，如果hook了<code>-[GameState robot]</code>方法，返回999个安全帽的话，就有用不完的安全帽了。</p><p>参考代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">GameStateHook</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)hook_GameState</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> jr_swizzleMethod:<span class="keyword">@selector</span>(robot)</span><br><span class="line">                withMethod:<span class="keyword">@selector</span>(hook_robot)</span><br><span class="line">                     error:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">int</span>)hook_robot</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>具体工程代码可以在<a href="https://github.com/poboke/EasySIMBL-Bundle-Template/tree/master/Samples/MinesweeperPlugin">MinesweeperPlugin</a>下载。</p><p>编译工程后，重新运行扫雷，安全帽的数量也变成了999个了：<br><img src="/assets/2016/04/minesweeper_999_safety_hat.png" class="lazyload placeholder" data-srcset="/assets/2016/04/minesweeper_999_safety_hat.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Mac </tag>
            
            <tag> Objective-C </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hopper Disassembler批量导出反编译的伪代码</title>
      <link href="/bulk-export-pseudo-code-in-hopper-disassembler.html"/>
      <url>/bulk-export-pseudo-code-in-hopper-disassembler.html</url>
      
        <content type="html"><![CDATA[<p>以下内容节选自《iOS应用逆向工程》：</p><blockquote><p>逆向工程最受欢迎的应用场合就是“借鉴”他人的软件功能。</p><p>在App Store里面，有不少优秀的App。当我们不知道App中的某个功能是如何实现的时候，逆向工程就能起到关键性的作用，此时使用iOS逆向工程技术就能够对它了解一二。</p><p>有些老牌软件的架构设计合理，代码工整规范，实现得非常优雅。我们没有他们那样深厚的技术功底和人才储备，想要借鉴他们使用的高级技术，却又求学无门。在这种情况下，逆向工程就是解决问题的金钥匙。通过逆向那些软件，可以从App中把它们的设计思路抽象出来为我所用，从而提高自己App的精致程度。比如，WhatsApp的稳定性、健壮性出类拔萃，如果我们自己要编写一个IM类App，通过逆向工程技术学习WhatsApp的整体架构与设计思路将是非常有益的。</p></blockquote><h3 id="一、功能介绍"><a href="#一、功能介绍" class="headerlink" title="一、功能介绍"></a>一、功能介绍</h3><p>想要了解app的功能是怎么实现的，最简单的方法就是反编译了。<br>所幸的是，<a href="http://www.hopperapp.com/">Hopper Disassembler</a>提供了反编译功能，能够将汇编代码转成伪代码。</p><p>想要使用这个功能的话，要先把光标定位到某个函数的汇编代码里：<br><img src="/assets/2016/04/decompile_assembly_code.png" class="lazyload placeholder" data-srcset="/assets/2016/04/decompile_assembly_code.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>然后点击菜单的 <kbd>Window</kbd> –&gt; <kbd>Show Pseudo Code Of Procedure</kbd> 选项，就会弹出一个伪代码窗口：<br><img src="/assets/2016/04/decompile_pseudo_code.png" class="lazyload placeholder" data-srcset="/assets/2016/04/decompile_pseudo_code.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>这个功能虽然强大，但是每次只能反编译一个函数，并不支持批量生成伪代码。<br>不过Hopper内置了一个Python解析器（这背后一定有肮脏的Python交易），所以我们可以编写Python脚本来实现这个功能。</p><p>打开Hopper的帮助文件<code>/Applications/Hopper Disassembler v3.app/Contents/Resources/Hopper.help</code>，会出现一个窗口：<br><img src="/assets/2016/04/decompile_help.png" class="lazyload placeholder" data-srcset="/assets/2016/04/decompile_help.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>点击<code>Scripting Reference</code>选项，可以看到Hopper提供的类和方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Class Tag</span><br><span class="line">    getName</span><br><span class="line"></span><br><span class="line">Class Procedure</span><br><span class="line">    addTag</span><br><span class="line">    decompile</span><br><span class="line">    getBasicBlock</span><br><span class="line">    getBasicBlockAtAddress</span><br><span class="line">    getBasicBlockCount</span><br><span class="line">    getEntryPoint</span><br><span class="line">    getHeapSize</span><br><span class="line">    getTagAtIndex</span><br><span class="line">    getTagCount</span><br><span class="line">    getTagList</span><br><span class="line">    hasTag</span><br><span class="line">    removeTag</span><br><span class="line">    tagIterator</span><br><span class="line"></span><br><span class="line">//......</span><br></pre></td></tr></table></figure><p>搜索关键字<code>Pseudo</code>，可以发现以反编译的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">decompile()</span><br><span class="line"></span><br><span class="line">    Returns a string containing the pseudo-code of the procedure, or None if the decompilation is not possible.</span><br></pre></td></tr></table></figure><p>既然Hopper提供了这个方法，那么实现批量导出伪代码的功能就不难了。</p><p>由于代码比较长，所以放在Github里，具体代码可以在<a href="https://github.com/poboke/Class-Decompile">https://github.com/poboke/Class-Decompile</a>下载。</p><h3 id="二、使用方法"><a href="#二、使用方法" class="headerlink" title="二、使用方法"></a>二、使用方法</h3><p>1、将下载的<code>Class Decompile.py</code>文件放到<code>~/Library/Application Support/Hopper/Scripts</code>目录里。</p><p>2、将可执行文件拖到Hopper里，等待分析完成。如果日志框里出现以下文字，就说明分析完成了：</p><blockquote><p>Analysis segment __LINKEDIT</p><p>Analysis segment External Symbols</p><p>Background analysis ended</p></blockquote><p>3、点击菜单 <kbd>Scripts</kbd> –&gt; <kbd>Class Decompile</kbd> ：<br><img src="/assets/2016/04/decompile_menu.png" class="lazyload placeholder" data-srcset="/assets/2016/04/decompile_menu.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>4、Hopper会出现一个弹框，可以选择反编译类型：<br><img src="/assets/2016/04/decompile_choose_type.png" class="lazyload placeholder" data-srcset="/assets/2016/04/decompile_choose_type.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><ul><li><kbd>Decompile All Classes</kbd> : 反编译所有类</li><li><kbd>Decompile One Class</kbd> : 反编译单个类</li><li><kbd>Cancel</kbd> : 取消</li></ul><p>5、如果选择反编译单个类的话，会出现以下弹框：<br><img src="/assets/2016/04/decompile_input_class_name.png" class="lazyload placeholder" data-srcset="/assets/2016/04/decompile_input_class_name.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"><br>输入某个类名后，点击 <kbd>OK</kbd> 按钮就可以反编译出该类的伪代码。</p><p>6、反编译出来的伪代码保存在<code>~/ClassDecompiles</code>目录里。</p><p>7、打开反编译的文件，例如<code>CalculatorController.m</code>，可以看到生成的伪代码：</p><figure class="highlight objc"><figcaption><span>CalculatorController.m</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CalculatorController</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)clearRecentConversionsMenu:(<span class="keyword">id</span>)arg2 </span><br><span class="line">&#123;</span><br><span class="line">    rdi = <span class="keyword">self</span>-&gt;_conversionController;</span><br><span class="line">    r14 = *objc_msgSend;</span><br><span class="line">    [rdi clearRecentConversions];</span><br><span class="line">    rax = [<span class="keyword">self</span> updateRecentConversionsMenu];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)openExpressionSyntaxHelp:(<span class="keyword">id</span>)arg2 </span><br><span class="line">&#123;</span><br><span class="line">    r14 = *objc_msgSend;</span><br><span class="line">    rbx = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@&quot;ExpressionSyntax&quot;</span> ofType:<span class="string">@&quot;rtf&quot;</span>];</span><br><span class="line">    rdi = [<span class="built_in">NSWorkspace</span> sharedWorkspace];</span><br><span class="line">    rdx = rbx;</span><br><span class="line">    rax = [rdi openFile:rdx];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信自动摇一摇刷一分钱</title>
      <link href="/wechat-auto-shake-to-get-money-on-new-years-eve.html"/>
      <url>/wechat-auto-shake-to-get-money-on-new-years-eve.html</url>
      
        <content type="html"><![CDATA[<p>除夕打开微信摇一摇抢红包，红包雨还没开始时，会显示如下界面：<br><img src="/assets/2016/03/shake_notice_vc.png" class="lazyload placeholder" data-srcset="/assets/2016/03/shake_notice_vc.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>底部圆形的logo在不停地跳动，点击一下，居然领到了一分钱：<br><img src="/assets/2016/03/shake_get_money.png" class="lazyload placeholder" data-srcset="/assets/2016/03/shake_get_money.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>如果不断摇一摇再点击logo，就可以领到很多一分钱。不过手动操作太麻烦了，所以写了个<code>tweak</code>插件来自动领取。</p><p><strong>插件要做的操作大概如下：</strong></p><ol><li>在摇一摇界面，插件自动调用摇一摇的方法。</li><li>进入红包详情界面后，插件自动点击图标领钱。</li><li>领完钱后，插件自动退出红包详情界面，回到摇一摇界面。</li><li>重复步骤1。</li></ol><p>当前的微信版本是<code>6.3.10</code>，iOS设备是越狱后的<code>iPad mini 2</code>。<br>这个插件的功能算是很简单的，下面就说一下编写插件的过程：</p><h3 id="一、获取微信的头文件"><a href="#一、获取微信的头文件" class="headerlink" title="一、获取微信的头文件"></a>一、获取微信的头文件</h3><p>使用<a href="https://github.com/nygard/class-dump">class-dump</a>可以获取微信的头文件。</p><p>解压<code>微信.ipa</code>，将<code>Payload/WeChat.app/WeChat</code>这个可执行文件拷贝出来，然后在终端执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class-dump -sSH WeChat -o WeChatHeaders</span><br></pre></td></tr></table></figure><p>在生成的<code>WeChatHeaders</code>文件夹里可以看到微信的所有类的头文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── ABNewPersonViewControllerDelegate-Protocol.h</span><br><span class="line">├── ABPeoplePickerNavigationControllerDelegate-Protocol.h</span><br><span class="line">├── ABTestItem.h</span><br><span class="line">├── ABtestCase.h</span><br><span class="line">├── ABtestMgr.h</span><br><span class="line">├── ABtestPoint.h</span><br><span class="line">├── ABtestPointPeriod.h</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="二、自动摇一摇"><a href="#二、自动摇一摇" class="headerlink" title="二、自动摇一摇"></a>二、自动摇一摇</h3><p>首先进入摇一摇界面：<br><img src="/assets/2016/03/shake_shake_vc.png" class="lazyload placeholder" data-srcset="/assets/2016/03/shake_shake_vc.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>使用<a href="http://revealapp.com/">Reveal</a>查看视图控制器的类名：<br><img src="/assets/2016/03/shake_reveal_shake_vc.png" class="lazyload placeholder" data-srcset="/assets/2016/03/shake_reveal_shake_vc.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>然后在微信头文件里找到<code>NewYearShakeViewController.h</code>，搜索关键字<code>shake</code>，可以搜到一个方法：<code>- (void)OnShake;</code>。</p><p>用电脑打开终端远程连接到iPad，再用<a href="http://www.cycript.org/">Cycript</a>附加微信，调用<code>OnShake</code>方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Jobs: ~$ ssh root@remoteip</span><br><span class="line"></span><br><span class="line">Jobss-iPad:~ root# cycript -p WeChat</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">cy#</span><span class="bash"> [<span class="comment">#0x1457f95b0 OnShake]</span></span></span><br></pre></td></tr></table></figure><p>执行命令后界面果然自动摇一摇了，并且跳到了红包详情界面。</p><h3 id="三、自动领RMB"><a href="#三、自动领RMB" class="headerlink" title="三、自动领RMB"></a>三、自动领RMB</h3><p>在红包详情界面，用Reveal可以看到logo是一个按钮：<br><img src="/assets/2016/03/shake_reveal_animation_button.png" class="lazyload placeholder" data-srcset="/assets/2016/03/shake_reveal_animation_button.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>在Cycript中使用以下方法可以获取点击按钮时调用的方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">cy#</span><span class="bash"> button = <span class="comment">#0x1468358f0</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">&quot;&lt;ImagesAnimationButton: 0x1468358f0; baseClass = UIButton; frame = (364 0; 40 40); opaque = NO; layer = &lt;CALayer: 0x174439640&gt;&gt;&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">cy#</span><span class="bash"> button.allTargets()</span></span><br><span class="line">[NSSet setWithArray:@[#&quot;&lt;NewYearShakeInteractiveLogoView: 0x1468c6d50; frame = (0 930; 768 94); layer = &lt;CALayer: 0x174622e40&gt;&gt;&quot;]]]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">cy#</span><span class="bash"> target = <span class="comment">#0x1468c6d50</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">&quot;&lt;NewYearShakeInteractiveLogoView: 0x1468c6d50; frame = (0 930; 768 94); layer = &lt;CALayer: 0x174622e40&gt;&gt;&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">cy#</span><span class="bash"> [button actionsForTarget:target forControlEvent:UIControlEventTouchUpInside]</span></span><br><span class="line">@[&quot;onClickLogoButton:&quot;]</span><br></pre></td></tr></table></figure><p>可以看到，点击按钮时会调用<code>[NewYearShakeInteractiveLogoView onClickLogoButton:]</code>方法。<br>可以在<code>NewYearShakeInteractiveLogoView</code>初始化后调用点击按钮的方法，就可以实现自动领取了。<br>这个方法需要传入按钮对象作为参数，在<code>NewYearShakeInteractiveLogoView.h</code>里可以看到按钮是一个成员变量<code>ImagesAnimationButton *m_logoView;</code>，所以可以通过<code>[self valueForKey:@&quot;m_logoView&quot;]</code>方法获取按钮对象。</p><h3 id="四、自动退出红包详情界面"><a href="#四、自动退出红包详情界面" class="headerlink" title="四、自动退出红包详情界面"></a>四、自动退出红包详情界面</h3><p>领到钱后需要退出当前界面，才能继续重新摇一摇。<br>而点击按钮时会出现金币旋转的动画，然后请求网络领取RMB，领到RMB后再结束动画，也就是说动画执行的时间可能不是固定的。<br>如果能找到结束动画的方法的话，通过hook这个方法，就可以在动画结束后退出当前界面了。</p><p>用<code>Hopper Disassembler</code>反编译微信的可执行程序，搜索<code>NewYearShakeInteractiveLogoView onClickLogoButton</code>，按 <kbd>alt + enter</kbd> 生成伪代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[NewYearShakeInteractiveLogoView onClickLogoButton:](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd, <span class="keyword">void</span> * arg2) &#123;</span><br><span class="line">    r2 = arg2;</span><br><span class="line">    r0 = <span class="keyword">self</span>;</span><br><span class="line">    r1 = <span class="keyword">@selector</span>(onClickLogoEvent);</span><br><span class="line">    r0 = loc_1c0d0d4(r0, r1, r2);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到调用了<code>onClickLogoEvent</code>方法，查看该方法的伪代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[NewYearShakeInteractiveLogoView onClickLogoEvent](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd) &#123;</span><br><span class="line">    r7 = &amp;arg_4;</span><br><span class="line">    r4 = <span class="keyword">self</span>;</span><br><span class="line">    r1 = r4-&gt;m_hasClickLogo;</span><br><span class="line">    <span class="keyword">asm</span>&#123; it         ne &#125;;</span><br><span class="line">    <span class="keyword">if</span> (r1 != <span class="number">0x0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    r0 = *objc_ivar_offset_NewYearShakeInteractiveLogoView_m_hasClickLogo;</span><br><span class="line">    *(int8_t *)(r4 + r0) = <span class="number">0x1</span>;</span><br><span class="line">    r0 = *objc_ivar_offset_NewYearShakeInteractiveLogoView_m_logoView;</span><br><span class="line">    r0 = *(r4 + r0);</span><br><span class="line">    loc_e0a05c(r0, <span class="keyword">@selector</span>(setEnabled:), <span class="number">0x0</span>, <span class="number">0x1</span>);</span><br><span class="line">    loc_e0a05c(r4, <span class="keyword">@selector</span>(setEmptyTipText));</span><br><span class="line">    loc_e0a05c(r4, <span class="keyword">@selector</span>(stopShowAnimation));</span><br><span class="line">    loc_e0a05c(r4, <span class="keyword">@selector</span>(startClickAnimation));</span><br><span class="line">    r1 = <span class="keyword">@selector</span>(callClickLogoHongBao);</span><br><span class="line">    r0 = r4;</span><br><span class="line">    Pop();</span><br><span class="line">    Pop();</span><br><span class="line">    Pop();</span><br><span class="line">    r0 = loc_1c0d0d4(r0, r1, <span class="number">0x0</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>伪代码里调用了<code>startClickAnimation</code>方法开始执行动画，那么很可能存在一个停止执行动画的方法。<br>在<code>NewYearShakeInteractiveLogoView.h</code>里搜索<code>stop</code>，可以发现<code>- (void)stopClickAnimation;</code>方法，基本上就可以确定这是停止动画时调用的方法了。</p><p>如果要在view的<code>stopClickAnimation</code>方法里关闭红包界面的话，就需要通过view获取view所在的视图控制器，可以通过<code>nextResponder</code>方法来获取。<br>最后让视图控制器对象调用<code>dismissViewControllerAnimated:completion:</code>方法来退出红包界面。</p><h3 id="五、编写插件"><a href="#五、编写插件" class="headerlink" title="五、编写插件"></a>五、编写插件</h3><p>使用Theos新建一个tweak插件，代码非常简单：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NewYearShakeViewController</span> : <span class="title">UIViewController</span></span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidAppear:(<span class="built_in">BOOL</span>)animated;</span><br><span class="line">- (<span class="keyword">void</span>)OnShake;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NewYearShakeInteractiveLogoView</span> : <span class="title">UIView</span></span></span><br><span class="line">- (<span class="keyword">void</span>)initView;</span><br><span class="line">- (<span class="keyword">void</span>)onClickLogoButton;</span><br><span class="line">- (<span class="keyword">void</span>)stopClickAnimation;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%hook NewYearShakeViewController</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidAppear:(<span class="built_in">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">    %orig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示界面一秒后自动摇一摇</span></span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        [<span class="keyword">self</span> OnShake];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%hook NewYearShakeInteractiveLogoView</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)initView</span><br><span class="line">&#123;</span><br><span class="line">    %orig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//view初始化一秒后自动点击按钮</span></span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">UIButton</span> *button = [<span class="keyword">self</span> valueForKey:<span class="string">@&quot;m_logoView&quot;</span>];</span><br><span class="line">        [<span class="keyword">self</span> onClickLogoButton:button];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)stopClickAnimation</span><br><span class="line">&#123;</span><br><span class="line">    %orig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动画停止一秒后自动退出界面</span></span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">UIViewController</span> *noticeViewController = (<span class="built_in">UIViewController</span> *)<span class="keyword">self</span>.nextResponder.nextResponder.nextResponder;</span><br><span class="line">        [noticeViewController dismissViewControllerAnimated:<span class="literal">NO</span> completion:<span class="literal">nil</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%end</span><br></pre></td></tr></table></figure><p>iPad安装插件后，重新打开微信，微信就会自动领一分钱了：</p><video id="video" controls="" preload="none" poster="/assets/2016/03/shake_video_preview.png">      <source id="mp4" src="/assets/2016/03/shake_video.mp4" type="video/mp4">      <p>Your user agent does not support the HTML5 Video element.</p></video><p>最后领到了很多一分钱，不知不觉中已经发财了：<br><img src="/assets/2016/03/shake_money_income.png" class="lazyload placeholder" data-srcset="/assets/2016/03/shake_money_income.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSCTF网络安全比赛——HungryGame</title>
      <link href="/ssctf-network-security-competition-hungry-game.html"/>
      <url>/ssctf-network-security-competition-hungry-game.html</url>
      
        <content type="html"><![CDATA[<h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><p>这道题的题目是《饥饿游戏》，一进游戏果然是好莱坞大片的即视感：<br><img src="/assets/2016/02/hungry_level_1.png" class="lazyload placeholder" data-srcset="/assets/2016/02/hungry_level_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>可以看到场面非常宏伟壮观，而我们的英雄人物就是<code>乔布斯</code>。</p><p>看一下游戏提示：</p><blockquote><p>Connected<br>Login OK<br>Use [↑↓←→] ot move around, [space] is the function key.</p></blockquote><p>也就是说：方向键可以移动英雄，空格键是用来触发功能的。</p><p>把英雄移动到门的旁边，按空格键可以过关。</p><h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><p>地图里有两扇门：<br><img src="/assets/2016/02/hungry_level_2.png" class="lazyload placeholder" data-srcset="/assets/2016/02/hungry_level_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>关卡提示：</p><blockquote><p>There is a locked door in front of you, but you don’t have the key.</p></blockquote><p>走到左边的门旁边按空格键，看到提示：</p><blockquote><p>Find key to open this door!</p></blockquote><p>看来需要钥匙才能打开左边的门，但是地图里没看到有钥匙。</p><p>在网页源码里搜索关键字<code>Find key</code>，可以在<code>game.js</code>文件里发现以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onnextdoor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">data = <span class="built_in">JSON</span>.stringify([msg(<span class="string">&#x27;next&#x27;</span>, &#123;&#125;)]);</span><br><span class="line">ws.send(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onfackdoor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">logtext(<span class="string">&#x27;Find key to open this door!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜一下<code>onfackdoor()</code>函数，发现按空格就直接调用了，所以是找不到钥匙来开启的。<br>而<code>onnextdoor()</code>函数的作用是向服务器发送数据进入下一关，所以在浏览器的控制台里执行<code>onnextdoor()</code>即可过关。</p><p>还有一种方法是修改英雄的坐标，这样英雄就可以<code>穿墙</code>了，然后走到右边的门按空格键。</p><h3 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h3><p>地图里有两颗树：<br><img src="/assets/2016/02/hungry_level_3.png" class="lazyload placeholder" data-srcset="/assets/2016/02/hungry_level_3.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>游戏提示：</p><blockquote><p>Hold [space] to cut the tree. When you get 9999 wood, a wooden pickaxe will be automatically generated.</p></blockquote><p>在树的旁边按住空格键可以砍树，获得9999块木材会自动获取一根木制镐。</p><p>走到树边砍树：</p><blockquote><p>Cutting Tree…<br>You get 3 woods,total 3<br>You get 5 woods,total 8<br>……</p></blockquote><p>按住一秒会得到一个木材，手动砍树的话肯定是行不通的，看一下js文件，发现如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (level == <span class="number">2</span> &amp;&amp; users[heroname].x &lt; <span class="number">800</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>()) - woodstart</span><br><span class="line">    <span class="keyword">if</span> (tmp &gt; <span class="number">1000</span> &amp;&amp; woodstart != -<span class="number">1</span>) &#123;</span><br><span class="line">        woodstart = -<span class="number">1</span>;</span><br><span class="line">        data = <span class="built_in">JSON</span>.stringify([msg(<span class="string">&#x27;wood&#x27;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;time&#x27;</span>: tmp</span><br><span class="line">        &#125;)]);</span><br><span class="line">        ws.send(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>tmp</code>变量是两次按键之间的毫秒数，所以可以轻易伪造砍了10000颗树，在浏览器控制台输入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="built_in">JSON</span>.stringify([msg(<span class="string">&#x27;wood&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;time&#x27;</span>: <span class="number">10000000</span></span><br><span class="line">&#125;)]);</span><br><span class="line">ws.send(data);</span><br></pre></td></tr></table></figure><p>执行后游戏提示：</p><blockquote><p>You get 10000 woods,total 10008<br>Get the wooden pickaxe!!!</p></blockquote><p>走到门边通往下一关。</p><h3 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h3><p>地图里有两堆钻石：<br><img src="/assets/2016/02/hungry_level_4.png" class="lazyload placeholder" data-srcset="/assets/2016/02/hungry_level_4.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>游戏提示：</p><blockquote><p>Mine by hitting [space], When you get 9999 diamonds,the diamond sword will be automatically generated.</p></blockquote><p>猛击空格键，得到9999颗钻石会获得一把钻石剑。</p><p>在游戏源码里可以发现以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (level == <span class="number">3</span> &amp;&amp; users[heroname].x &lt; <span class="number">800</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (second != <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>()) &amp;&amp; diamondpos) &#123;</span><br><span class="line">        <span class="keyword">if</span> (diamondtimes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            data = <span class="built_in">JSON</span>.stringify([msg(<span class="string">&#x27;diamond&#x27;</span>, &#123;</span><br><span class="line">                <span class="string">&#x27;count&#x27;</span>: diamondtimes</span><br><span class="line">            &#125;)]);</span><br><span class="line">            ws.send(data);</span><br><span class="line">        &#125;</span><br><span class="line">        diamondtimes = <span class="number">0</span>;</span><br><span class="line">        diamondpos = <span class="literal">false</span>;</span><br><span class="line">        second = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        diamondtimes += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照第三关的方法在浏览器控制台执行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="built_in">JSON</span>.stringify([msg(<span class="string">&#x27;diamond&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;count&#x27;</span>: <span class="number">10000</span></span><br><span class="line">&#125;)]);</span><br><span class="line">ws.send(data);</span><br></pre></td></tr></table></figure><p>游戏提示：</p><blockquote><p>Mining too fast, manager kicked you out.<br>Connection lost</p></blockquote><p>挖掘太快，被服务器踢出去了。</p><p>应该是数量太多了，经过试验，每次挖掘的最大数量是50，所以用循环执行200次就行了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">200</span>; i++) &#123;</span><br><span class="line">    data = <span class="built_in">JSON</span>.stringify([msg(<span class="string">&#x27;diamond&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;count&#x27;</span>: <span class="number">50</span></span><br><span class="line">    &#125;)]);</span><br><span class="line">    ws.send(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><blockquote><p>Get 50 diamond,total 50<br>Get 50 diamond,total 100<br>Get 50 diamond,total 150<br>……<br>Get 50 diamond,total 9950<br>Get 50 diamond,total 10000<br>Get the diamond sword!!!</p></blockquote><p>通过门可以通向下一关。</p><h3 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h3><p>终于要打BOSS了：<br><img src="/assets/2016/02/hungry_level_5.png" class="lazyload placeholder" data-srcset="/assets/2016/02/hungry_level_5.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>游戏提示：</p><blockquote><p>At last, the final level! Wave your diamond sword and beat the BOSS.<br>PS: Short-range weapons can only hurt other players(your hp +1) but cannot harm the BOSS.<br>PS: Cause 15 point damages to the BOSS to get the flag<br>PS: Or kill 5 players to get the flag</p></blockquote><p>近距离攻击的武器只能攻击到别的玩家，打不到远处的BOSS。攻击到别的玩家时，别的玩家的hp会减1，自己的hp会加1。<br>有两种过关方法，一是让BOSS掉15滴血，二是杀死5个玩家。</p><p>BOSS是有瞬移技能的，满地图顺机传送，而且隔两三秒就攻击玩家一次：</p><blockquote><p>Attacked by boss<br>Attacked by boss<br>Attacked by TFBoys<br>Attacked by boss</p></blockquote><p>英雄不但会受到BOSS攻击，还会受到其它玩家的攻击，而英雄只有10滴血，往往坚持30多秒就挂了。</p><p>地图里有个神秘的箱子和一把远程攻击的弓箭，其实这些都是骗人的，捡物品的时候会调用以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onselfkill</span>(<span class="params">argument</span>) </span>&#123;</span><br><span class="line">logtext(<span class="string">&quot;There&#x27;s nothing here.Too yong too simple.( ‵▽′)ψ &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下按功能键时的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (level == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (second != <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>())) &#123;</span><br><span class="line">        data = <span class="built_in">JSON</span>.stringify([msg(<span class="string">&#x27;attack&#x27;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;x&#x27;</span>: users[heroname].x,</span><br><span class="line">            <span class="string">&#x27;y&#x27;</span>: users[heroname].y</span><br><span class="line">        &#125;)]);</span><br><span class="line">        ws.send(data);</span><br><span class="line">        attacking = <span class="literal">true</span>;</span><br><span class="line">        second = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码向服务器发送了一个攻击事件和英雄的当前坐标，服务器应该是判断这个坐标周围有没有攻击对象的。如果把这个坐标改成BOSS的坐标的话，那么就可以攻击到BOSS了。</p><p>查看js代码，发现有一个<code>boss</code>变量，所以可以在控制台执行以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">attact</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    data = <span class="built_in">JSON</span>.stringify([msg(<span class="string">&#x27;attack&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;x&#x27;</span>: boss.x,</span><br><span class="line">        <span class="string">&#x27;y&#x27;</span>: boss.y</span><br><span class="line">    &#125;)]);</span><br><span class="line">    ws.send(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="string">&#x27;attact()&#x27;</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>执行后可以得到过关的key：</p><blockquote><p>Attack:boss,total 1<br>Attack:boss,total 2<br>Attacked by boss<br>Attack:boss,total 3<br>Attack:boss,total 4<br>Attack:boss,total 5<br>Attacked by boss<br>Attack:boss,total 6<br>Attack:boss,total 7<br>Attacked by boss<br>Attack:boss,total 8<br>Attack:boss,total 9<br>Attack:boss,total 10<br>Attacked by boss<br>Attack:boss,total 11<br>Attack:boss,total 12<br>Attack:boss,total 13<br>Attacked by boss<br>Attack:boss,total 14<br>Attack:boss,total 15<br>SSCTF{2b3d41dd4b7911dc0fe683d1a0d977ef}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> CTF比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解Mac版WiFi万能钥匙密码</title>
      <link href="/decrypt-the-password-of-wifi-master-key-for-mac.html"/>
      <url>/decrypt-the-password-of-wifi-master-key-for-mac.html</url>
      
        <content type="html"><![CDATA[<p>春节回家，家里没有网络，手机流量又不够用，所以只能去蹭邻居的网。</p><p>我的电脑里以前装过WiFi万能钥匙，打开一看，发现有可以连接的热点：<br><img src="/assets/2016/02/wifi_list.png" class="lazyload placeholder" data-srcset="/assets/2016/02/wifi_list.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>先用手机开启一个热点给电脑使用，再打开<a href="http://www.charlesproxy.com/">Charles</a>拦截电脑数据包。<br>在WiFi列表里选中<code>TP-LINK_FB2BBE</code>这一列，然后点击 <kbd>自动连接</kbd> 按钮，可以截取到以下数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;qryapwd&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;retCd&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;psws&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;f8:d1:11:fb:2b:be&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;bssid&quot;</span>: <span class="string">&quot;f8:d1:11:fb:2b:be&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;pwd&quot;</span>: <span class="string">&quot;EDFE4543092F6A8BAD1900F2ACD40233E723205FDE9211C4B5D1D54900F9C9BC&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hid&quot;</span>: <span class="string">&quot;1AD1DB9E0F7EBBA9B0FB6E8C567CE3A8&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;xJs&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;ssid&quot;</span>: <span class="string">&quot;TP-LINK_FB2BBE&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;xUser&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;internet&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;xPwd&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;securityLevel&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;retCd&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由结果可以看出，<code>pwd</code>字段很有可能就是加密后的密码。如果能破解出原始密码的话，那么手机就可以直接连接WiFi了。</p><p>以下就是破解密码的过程：</p><h3 id="一、获取选中的CellView"><a href="#一、获取选中的CellView" class="headerlink" title="一、获取选中的CellView"></a>一、获取选中的CellView</h3><p>先按照<a href="/use-easysimbl-to-inject-plugins-to-mac-app.html">《使用EasySIMBL为Mac应用加载插件》</a>教程里的方法安装EasySIMBL模板，然后用Xcode新建一个EasySIMBL插件工程，工程名为<code>WifiMasterKeyPlugin</code>，再将初始化代码改为：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">instancetype</span>)sharedInstance</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> WifiMasterKeyPlugin *plugin = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">@synchronized</span>(<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!plugin) &#123;</span><br><span class="line">            plugin = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">            [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:plugin selector:<span class="keyword">@selector</span>(notificationListener:) name:<span class="built_in">NSViewDidUpdateTrackingAreasNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> plugin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)notificationListener:(<span class="built_in">NSNotification</span> *)notification</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//打印出视图对象以及视图的大小</span></span><br><span class="line">    <span class="built_in">NSView</span> *view = notification.object;</span><br><span class="line">    <span class="keyword">if</span> ([view respondsToSelector:<span class="keyword">@selector</span>(frame)]) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;view : %@, frame : %@&quot;</span>, view, [<span class="built_in">NSValue</span> valueWithRect:view.frame]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br></pre></td></tr></table></figure><p>上面的代码能够获取到创建视图的通知，根据通知可以打印出视图的类名。<br>编译工程后，打开控制台应用，重新运行WiFi万能钥匙，然后点击<code>TP-LINK_FB2BBE</code>这一列，在控制台里可以看到输出的log：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WiFiMasterKey[30976]: view : &lt;NSTableView: 0x7f8fa3dc3810&gt;, frame : NSRect: &#123;&#123;0, 0&#125;, &#123;537, 862&#125;&#125;</span><br><span class="line">WiFiMasterKey[30976]: view : &lt;NSTableRowView: 0x7f8fa60a8620&gt; - row: 1, frame : NSRect: &#123;&#123;0, 52&#125;, &#123;537, 82&#125;&#125;</span><br><span class="line">WiFiMasterKey[30976]: view : &lt;WiFiTableSelectedCellView: 0x7f8fa6134df0&gt;, frame : NSRect: &#123;&#123;1, 1&#125;, &#123;534, 80&#125;&#125;</span><br></pre></td></tr></table></figure><p>可以看到创建了一个<code>&lt;WiFiTableSelectedCellView: 0x7f8fa6134df0&gt;</code>，看类名应该是当前选中的CellView，CellView对象的内存地址为<code>0x7f8fa6134df0</code>。</p><h3 id="二、用Xcode动态调试应用"><a href="#二、用Xcode动态调试应用" class="headerlink" title="二、用Xcode动态调试应用"></a>二、用Xcode动态调试应用</h3><p>接下来用Xcode来动态调试WiFi万能钥匙，点击Xcode的菜单 <kbd>Debug</kbd> –&gt; <kbd>Attach to Process</kbd> ，选择<code>WiFiMasterKey</code>进程。<br><img src="/assets/2016/02/wifi_xcode_attach.png" class="lazyload placeholder" data-srcset="/assets/2016/02/wifi_xcode_attach.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>等待进程附加完毕，点击下面的按钮暂停应用：<br><img src="/assets/2016/02/wifi_xcode_pause.png" class="lazyload placeholder" data-srcset="/assets/2016/02/wifi_xcode_pause.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>然后在调试框里输入以下命令打印出CellView的子视图：<br>（注意：<code>pviews</code>命令需要先安装<a href="https://github.com/facebook/chisel">chisel</a>才能使用。）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po 0x7f8fa6134df0</span><br><span class="line">&lt;WiFiTableSelectedCellView: 0x7f8fa6134df0&gt;</span><br><span class="line"></span><br><span class="line">(lldb) pviews 0x7f8fa6134df0</span><br><span class="line">[   A     P    ] h=--- v=-&amp;- WiFiTableSelectedCellView 0x7f8fa6134df0 f=(1,1,534,80) b=(-) TIME drawRect: min/mean/max 0.00/0.00/0.00 ms</span><br><span class="line">  [   A          ] h=--&amp; v=&amp;-- NSImageView 0x7f8fa6159a80 &quot;&lt;NSImage 0x7f8fa3d302c0 Name=icon_lock_signal_big_3 Size=&#123;45, 37&#125; Reps=(</span><br><span class="line">    &quot;NSBitmapImageRep 0x7f8fa615f6d0 Size=&#123;45, 37&#125; ColorSpace=iMac colorspace BPS=8 BPP=32 Pixels=45x37 Alpha=YES Planar=NO Format=2 CurrentBacking=&lt;CGImageRef: 0x7f8fa615f850&gt; CGImageSource=0x7f8fa62424f0&quot;</span><br><span class="line"><span class="meta">)&gt;</span><span class="bash"><span class="string">&quot; f=(5,22,44,37) b=(-) TIME drawRect: min/mean/max 0.00/0.00/0.00 ms</span></span></span><br><span class="line">  [   AF         ] h=--&amp; v=&amp;-- NSButton 0x7f8fa61353d0 &quot;输入密码&quot; f=(433,6,85,25) b=(-) TIME drawRect: min/mean/max 0.00/0.00/0.00 ms</span><br><span class="line">  [   AF         ] h=--&amp; v=&amp;-- NSTextField 0x7f8fa3d1a810 f=(415,47,99,20) b=(-) TIME drawRect: min/mean/max 0.00/0.00/0.00 ms</span><br><span class="line">  [   A          ] h=--&amp; v=&amp;-- NSImageView 0x7f8fa3d149e0 &quot;&lt;NSImage 0x7f8fa607c030 Name=icon_key Size=&#123;10, 18&#125; Reps=(</span><br><span class="line">    &quot;NSBitmapImageRep 0x7f8fa3d1a4f0 Size=&#123;10, 18&#125; ColorSpace=sRGB IEC61966-2.1 colorspace BPS=8 BPP=32 Pixels=10x18 Alpha=YES Planar=NO Format=2 CurrentBacking=&lt;CGImageRef: 0x7f8fa615ae10&gt; CGImageSource=0x7f8fa3de4270&quot;</span><br><span class="line"><span class="meta">)&gt;</span><span class="bash"><span class="string">&quot;</span> f=(495,40,23,34) b=(-) TIME drawRect: min/mean/max 0.00/0.00/0.00 ms</span></span><br><span class="line">  [   AF         ] h=-&amp;- v=&amp;-- NSTextField 0x7f8fa61977e0 &quot;TP-LINK_FB2BBE&quot; f=(60,30,184,21) b=(-) TIME drawRect: min/mean/max 0.00/0.00/0.00 ms</span><br><span class="line">  [   AF         ] h=--&amp; v=&amp;-- NSButton 0x7f8fa3daf760 &quot;自动连接&quot; f=(237,6,85,25) b=(-) TIME drawRect: min/mean/max 0.00/0.00/0.00 ms</span><br><span class="line">  [   AF         ] h=--&amp; v=&amp;-- NSButton 0x7f8fa6184d80 &quot;分享热点&quot; f=(336,6,85,25) b=(-) TIME drawRect: min/mean/max 0.00/0.00/0.00 ms</span><br><span class="line">A=autoresizesSubviews, C=canDrawConcurrently, D=needsDisplay, F=flipped, G=gstate, H=hidden (h=by ancestor), L=needsLayout (l=child needsLayout), U=needsUpdateConstraints (u=child needsUpdateConstraints), O=opaque, P=preservesContentDuringLiveResize, S=scaled/rotated, W=wantsLayer (w=ancestor wantsLayer), V=needsVibrancy (v=allowsVibrancy), #=has surface</span><br></pre></td></tr></table></figure><p>由结果可知， <kbd>自动连接</kbd> 按钮对象的内存地址是<code>0x7f8fa3daf760</code>，用以下命令可以得到点击按钮时调用的方法名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po [0x7f8fa3daf760 target]</span><br><span class="line">&lt;WiFiTableSelectedCellView: 0x7f8fa6134df0&gt;</span><br><span class="line"></span><br><span class="line">(lldb) po [0x7f8fa3daf760 action]</span><br><span class="line">0x0000000101d2c889</span><br><span class="line"></span><br><span class="line">(lldb) po NSStringFromSelector(0x0000000101d2c889)</span><br><span class="line">autoConnectButtonAction:</span><br></pre></td></tr></table></figure><p>也就是说，点击按钮时会调用<code>[WiFiTableSelectedCellView autoConnectButtonAction:]</code>方法。</p><h3 id="三、用Hopper静态分析应用"><a href="#三、用Hopper静态分析应用" class="headerlink" title="三、用Hopper静态分析应用"></a>三、用Hopper静态分析应用</h3><p>接下来用动态调试来分析比较麻烦，可以采用静态分析的方法。<br>将WiFi万能钥匙的可执行文件拖到<a href="http://www.hopperapp.com/">Hopper Disassembler</a>里进行分析，等待分析完毕后搜索<code>WiFiTableSelectedCellView autoConnectButtonAction:</code>方法，再按 <kbd>alt + enter</kbd> 组合键查看反汇编伪代码，可得到以下结果：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[WiFiTableSelectedCellView autoConnectButtonAction:](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd, <span class="keyword">void</span> * arg2) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    rsi = <span class="keyword">@selector</span>(queryWiFiMasterKey);</span><br><span class="line">    [var_90 queryWiFiMasterKey];</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看<code>queryWiFiMasterKey</code>方法的伪代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[WiFiTableSelectedCellView queryWiFiMasterKey](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">loc_10004c361:</span><br><span class="line">    rsi = <span class="keyword">@selector</span>(queryWiFiMasterKeyFromServer);</span><br><span class="line">    <span class="keyword">goto</span> loc_10004c385;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再查看<code>queryWiFiMasterKeyFromServer</code>方法的伪代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[WiFiTableSelectedCellView queryWiFiMasterKeyFromServer](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd) &#123;</span><br><span class="line">    rdx = <span class="keyword">self</span>-&gt;_wifi;</span><br><span class="line">    r12 = *objc_msgSend;</span><br><span class="line">    r14 = [[<span class="built_in">NSArray</span> arrayWithObject:rdx] <span class="keyword">retain</span>];</span><br><span class="line">    r13 = [[WiFiMasterKeyService shareInstance] <span class="keyword">retain</span>];</span><br><span class="line">    var_50 = *_NSConcreteStackBlock;</span><br><span class="line">    var_48 = <span class="number">0xc2000000</span>;</span><br><span class="line">    var_44 = <span class="number">0x0</span>;</span><br><span class="line">    var_40 = ___57-[WiFiTableSelectedCellView queryWiFiMasterKeyFromServer]_block_invoke;</span><br><span class="line">    var_38 = ___block_descriptor_tmp219;</span><br><span class="line">    var_30 = [<span class="keyword">self</span> <span class="keyword">retain</span>];</span><br><span class="line">    [r13 queryMasterKey:r14 tag:<span class="number">0x0</span> userInfo:<span class="number">0x0</span> scanWiFiType:<span class="number">0x1</span> success:var_50 failure:<span class="keyword">void</span> ^(<span class="keyword">void</span> * _block, <span class="keyword">struct</span> AFHTTPRequestOperation * arg1, <span class="keyword">struct</span> <span class="built_in">NSError</span> * arg2) &#123;</span><br><span class="line">        rax = [MLHudAlert alertWithType:<span class="number">0x2</span> message:cfstring__g_RhV___c1Y___0];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    rbx = *objc_release;</span><br><span class="line">    [var_30 release];</span><br><span class="line">    [r13 release];</span><br><span class="line">    rax = [r14 release];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，点击 <kbd>自动连接</kbd> 按钮，会调用<code>[WiFiMasterKeyService queryMasterKey:tag:userInfo:scanWiFiType:success:failure:]</code>方法向服务器查询加密后的密码，数据请求成功的回调方法是<code>[WiFiTableSelectedCellView queryWiFiMasterKeyFromServer]_block_invoke</code>，这个block的伪代码是：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ___57-[WiFiTableSelectedCellView queryWiFiMasterKeyFromServer]_block_invoke(<span class="keyword">int</span> arg0) &#123;</span><br><span class="line">    rdi = *(arg0 + <span class="number">0x20</span>);</span><br><span class="line">    rax = [rdi parserScanWiFiResult:rdx];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后通过<code>[WiFiTableSelectedCellView parserScanWiFiResult:]</code>方法来解析返回的数据，所以解密WiFi密码的代码很有可能就在这个方法里。</p><p>由一开始可知，加密后的密码字段名是<code>pwd</code>，因此在<code>parserScanWiFiResult:</code>方法的伪代码里可以很快发现以下代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[WiFiTableSelectedCellView parserScanWiFiResult:](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd, <span class="keyword">void</span> * arg2) &#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    rbx = [[rdi objectForKey:<span class="string">@&quot;pwd&quot;</span>] <span class="keyword">retain</span>];</span><br><span class="line">    r13 = *objc_msgSend;</span><br><span class="line">    r15 = [[WiFiKeyAESUtilties ShareKeyAES128Decry:rbx] <span class="keyword">retain</span>];</span><br><span class="line">    r12 = *objc_release;</span><br><span class="line">    [rbx release];</span><br><span class="line">    [var_38 connectNetworkWithPassword:r15];</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来是通过<code>[WiFiKeyAESUtilties ShareKeyAES128Decry:]</code>方法解密出密码。</p><h3 id="四、编写插件"><a href="#四、编写插件" class="headerlink" title="四、编写插件"></a>四、编写插件</h3><p>因此我们可以通过hook这个方法，把解密后的密码用弹出框显示出来，示例代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">WiFiKeyAESUtiltiesHook</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)hook_WiFiKeyAESUtilties</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> jr_swizzleClassMethod:<span class="keyword">@selector</span>(ShareKeyAES128Decry:)</span><br><span class="line">                withClassMethod:<span class="keyword">@selector</span>(hook_ShareKeyAES128Decry:)</span><br><span class="line">                     error:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">id</span>)hook_ShareKeyAES128Decry:(<span class="keyword">id</span>)arg1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *shareKey = [<span class="keyword">self</span> hook_ShareKeyAES128Decry:arg1];</span><br><span class="line">    shareKey = [shareKey stringByRemovingPercentEncoding];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSAlert</span> *alert = [[<span class="built_in">NSAlert</span> alloc] init];</span><br><span class="line">    alert.alertStyle = <span class="built_in">NSInformationalAlertStyle</span>;</span><br><span class="line">    alert.messageText = <span class="string">@&quot;密码：&quot;</span>;</span><br><span class="line">    alert.informativeText = shareKey;</span><br><span class="line">    [alert runModal];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> shareKey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>具体工程代码可以在<a href="https://github.com/poboke/EasySIMBL-Bundle-Template/tree/master/Samples/WifiMasterKeyPlugin">WifiMasterKeyPlugin</a>下载。</p><p>编译工程后，重新运行WiFi万能钥匙，点击 <kbd>自动连接</kbd> 按钮，可以看到弹出一个提示框：<br><img src="/assets/2016/02/wifi_password.png" class="lazyload placeholder" data-srcset="/assets/2016/02/wifi_password.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Mac </tag>
            
            <tag> Objective-C </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用EasySIMBL为Mac应用加载插件</title>
      <link href="/use-easysimbl-to-inject-plugins-to-mac-app.html"/>
      <url>/use-easysimbl-to-inject-plugins-to-mac-app.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、EasySIMBL简介"><a href="#一、EasySIMBL简介" class="headerlink" title="一、EasySIMBL简介"></a>一、EasySIMBL简介</h3><p>用户想给应用增加功能的话，最快捷的方法就是给应用写插件打补丁。</p><p><code>EasySIMBL(Easy SIMple Bundle Loader)</code>是<code>macOS</code>系统的一个工具，能够很方便地把插件注入到目标应用里，从而使应用能按我们想要的方式运行。</p><h3 id="二、安装EasySIMBL"><a href="#二、安装EasySIMBL" class="headerlink" title="二、安装EasySIMBL"></a>二、安装EasySIMBL</h3><p><code>EasySIMBL</code>需要安装到<code>/System/Library/ScriptingAdditions/</code>路径，安装过程如下：</p><h4 id="1、关闭SIP"><a href="#1、关闭SIP" class="headerlink" title="1、关闭SIP"></a>1、关闭SIP</h4><p>由于<code>macOS X 10.11</code>启用了SIP，用户没有权限修改系统目录下的文件，因此安装<code>EasySIMBL</code>之前要先关闭SIP。</p><p>首先重启系统，开机时按住 <kbd>command</kbd> + <kbd>R</kbd> 不放，直到进入系统恢复模式。  </p><p>然后点击 <kbd>实用工具</kbd> 菜单，打开终端，执行<code>csrutil disable</code>命令关闭SIP，再重启系统。</p><h4 id="2、安装EasySIMBL"><a href="#2、安装EasySIMBL" class="headerlink" title="2、安装EasySIMBL"></a>2、安装EasySIMBL</h4><p>点击<a href="http://www.culater.net/dl/files/SIMBL-0.9.9.zip">SIMBL-0.9.9.zip</a>下载文件并解压。</p><p>然后打开终端，cd到<code>SIMBL-0.9.9</code>目录，执行以下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo installer -verbose -pkg SIMBL-0.9.9.pkg -target /</span><br><span class="line">sudo rm -rf /System/Library/ScriptingAdditions/SIMBL.osax</span><br><span class="line">sudo mv /Library/ScriptingAdditions/SIMBL.osax /System/Library/ScriptingAdditions/</span><br><span class="line">sudo cp -p /System/Library/ScriptingAdditions/SIMBL.osax/Contents/Resources/SIMBL\ Agent.app/Contents/Resources/net.culater.SIMBL.Agent.plist /System/Library/LaunchAgents/</span><br><span class="line">sudo sed -e <span class="string">&quot;s/Library/System\/Library/&quot;</span> -i <span class="string">&quot;&quot;</span> /System/Library/LaunchAgents/net.culater.SIMBL.Agent.plist</span><br></pre></td></tr></table></figure><h4 id="3、启用SIP"><a href="#3、启用SIP" class="headerlink" title="3、启用SIP"></a>3、启用SIP</h4><p>安装完可以启用SIP，对系统进行保护。</p><p>进入系统恢复模式，执行<code>csrutil enable --without debug</code>，并重启系统。  </p><p>加上<code>--without debug</code>参数，才可以让lldb附加进程进行调试。</p><h3 id="三、安装插件"><a href="#三、安装插件" class="headerlink" title="三、安装插件"></a>三、安装插件</h3><p>将插件放在<code>/Library/Application Support/SIMBL/Plugins</code>目录里，应用启动时会自动加载插件。</p><h3 id="四、插件开发"><a href="#四、插件开发" class="headerlink" title="四、插件开发"></a>四、插件开发</h3><p>以系统自带的计算器应用<code>/Applications/Calculator.app</code>为例编写一个插件。</p><p>1、安装插件模板，地址为 <a href="https://github.com/poboke/EasySIMBL-Bundle-Template">https://github.com/poboke/EasySIMBL-Bundle-Template</a>。</p><p>2、使用Xcode创建一个Project，选择<code>SIMBL Bundle</code>模板。<br><img src="/assets/2016/02/simbl_project_template.png" class="lazyload placeholder" data-srcset="/assets/2016/02/simbl_project_template.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>3、设置工程名字为<code>CalculatorPlugin</code>。<br>打开<code>/Applications/Calculator.app/Contents/Info.plist</code>，可以看到计算器的<code>bundle identifier</code>为<code>com.apple.calculator</code>：<br><img src="/assets/2016/02/simbl_calculator_info.png" class="lazyload placeholder" data-srcset="/assets/2016/02/simbl_calculator_info.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>下图里的<code>Target App Bundle Id</code>就是我们要注入的app的包标识符，当app启动时，SIMBL就会把填有该app包标识符的插件注入到该app中。</p><p>填写后的工程信息为：<br><img src="/assets/2016/02/simbl_project_options.png" class="lazyload placeholder" data-srcset="/assets/2016/02/simbl_project_options.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>4、工程默认的初始化代码为：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;CalculatorPlugin.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CalculatorPlugin</span>()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CalculatorPlugin</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @return the single static instance of the plugin object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)sharedInstance</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> CalculatorPlugin *plugin = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">@synchronized</span>(<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!plugin) &#123;</span><br><span class="line">            plugin = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> plugin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A special method called by SIMBL once the application has started and all classes are initialized.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">void</span>)load</span><br><span class="line">&#123;</span><br><span class="line">    CalculatorPlugin *plugin = [CalculatorPlugin sharedInstance];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;++++++++ %@ plugin loaded ++++++++&quot;</span>, plugin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载插件时会先执行类方法<code>load</code>的代码，因此可以在该方法里编写初始化的代码。</p><p>5、编辑插件的<code>Info.plist</code>文件，可以看到里面有一个<code>SIMBLTargetApplications</code>数组：<br><img src="/assets/2016/02/simbl_target_applications.png" class="lazyload placeholder" data-srcset="/assets/2016/02/simbl_target_applications.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>字段的含义为：</p><ul><li><code>BundleIdentifier</code> : 要注入的app的包标识符。</li><li><code>MaxBundleVersion</code> : 要注入的app的版本号最大值，默认为99999。</li><li><code>MinBundleVersion</code> : 要注入的app的版本号最小值，默认为0。</li></ul><p>版本号是指<code>CFBundleVersion</code>的值：<br><img src="/assets/2016/02/simbl_calculator_info.png" class="lazyload placeholder" data-srcset="/assets/2016/02/simbl_calculator_info.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>由计算器的信息可知，目前计算器的版本号是<code>123</code>，而非<code>10.8</code>。</p><p>处于<code>MinBundleVersion</code>和<code>MaxBundleVersion</code>版本号之间的app才能够加载插件。<br>因为app升级后可能导致插件失效，严重的话可能会导致app闪退。所以为了保证插件能够正常工作，可以使用app当前版本号的值，也就是最大值和最小值都填上<code>123</code>。<br>不过这种情况是很少出现的，一般来说使用模板默认的<code>0 ~ 99999</code>就可以了。</p><p>6、工程编译成功后会在<code>/Library/Application Support/SIMBL/Plugins</code>目录下生成一个<code>CalculatorPlugin.bundle</code>插件。</p><p>7、先运行控制台<code>Console.app</code>，再运行计算器<code>Calculator.app</code>。<br>如果在控制台里能看到<code>++++++++ &lt;CalculatorPlugin: 0x7f980488e970&gt; plugin loaded ++++++++</code>等字样，就说明我们的插件已经成功注入到计算器里了。</p><p>8、接下来就可以使用逆向工程的方法来修改app的逻辑了。</p><h3 id="五、示例工程"><a href="#五、示例工程" class="headerlink" title="五、示例工程"></a>五、示例工程</h3><p>插件模板 <a href="https://github.com/poboke/EasySIMBL-Bundle-Template">https://github.com/poboke/EasySIMBL-Bundle-Template</a> 的<code>Samples</code>目录里有一个<code>CalculatorPlugin</code>示例工程。</p><p>编译该工程后，点击计算器菜单栏的 <kbd>计算器</kbd> –&gt; <kbd>关于计算器</kbd> 时，会出现一个<code>Hello world</code>的弹出框：<br><img src="/assets/2016/02/simbl_calculator_hooker.png" class="lazyload placeholder" data-srcset="/assets/2016/02/simbl_calculator_hooker.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>感兴趣的话可以去看工程里的代码，由于代码比较简单，这里就不多费笔墨了。</p><h3 id="六、图形界面的mySIMBL"><a href="#六、图形界面的mySIMBL" class="headerlink" title="六、图形界面的mySIMBL"></a>六、图形界面的mySIMBL</h3><p>使用图形化软件可以更方便地管理插件，mySIMBL是一个开源的macOS插件管理器，它不但可以很方便地安装SIMBL，而且还自带了插件列表，能够下载其他用户分享的插件。</p><h4 id="1、安装说明"><a href="#1、安装说明" class="headerlink" title="1、安装说明"></a>1、安装说明</h4><p><a href="https://github.com/w0lfschild/app_updates/raw/master/mySIMBL/mySIMBL_master.zip">点击这里下载最新的安装包</a>，下载后解压，将<code>mySIMBL.app</code>移动到<code>应用程序</code>里。</p><p>第一次运行时，会提示用户安装SIMBL，按照上面的方法关闭<code>SIP</code>，并安装<code>EasySIMBL</code>。</p><p>运行<code>mySIMBL.app</code>后便可看到本地的插件列表：<br><img src="/assets/2017/08/mysimbl_preview.png" class="lazyload placeholder" data-srcset="/assets/2017/08/mysimbl_preview.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><h4 id="2、功能介绍"><a href="#2、功能介绍" class="headerlink" title="2、功能介绍"></a>2、功能介绍</h4><ul><li><code>Manage</code>菜单里可以管理本地的插件，把插件拖到插件列表里可以安装插件。点击状态图标可以开启/禁用插件，绿色图标为开启，红色为禁用。</li><li><code>Discover</code>菜单里可以下载其他用户分享的插件。</li><li><code>Updates</code>菜单里可以更新其他用户分享的插件。</li><li><code>SIMBL</code>菜单里可以把某些应用加入黑名单，这些应用启动时就不会加载任何插件。</li></ul><h4 id="3、分享插件"><a href="#3、分享插件" class="headerlink" title="3、分享插件"></a>3、分享插件</h4><p>如果你想把自己写的插件分享给别人使用，可以把插件提交到<code>mySIMBL</code>的插件仓库里，仓库地址为：<a href="https://github.com/w0lfschild/macplugins">https://github.com/w0lfschild/macplugins</a>。</p><p>首先Fork该插件仓库，将你编译好的插件压缩为<code>zip</code>格式，放到仓库的<code>bundles</code>目录里。</p><p>编辑<code>packages_v2.plist</code>文件填写插件信息，再提交<code>Pull Request</code>就可以啦。</p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教学 </tag>
            
            <tag> Mac </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学军中学推理社2017届招新试题</title>
      <link href="/the-reasoning-associations-entrance-examination.html"/>
      <url>/the-reasoning-associations-entrance-examination.html</url>
      
        <content type="html"><![CDATA[<p>这份试题共10道，环环相扣，单看一道题或几道题，答不出结果。<br>只有把题目全看完，并作出正确的假设和推理，才能答对。</p><blockquote><p>1、这道题的答案是：<br>A.A　B.B　C.C　D.D</p><p>2、第5题的答案是：<br>A.C　B.D　C.A　D.B</p><p>3、以下选项中哪一题的答案与其他三项不同：<br>A.第3题　B.第6题　C.第2题　D.第4题</p><p>4、以下选项中哪两题的答案相同：<br>A.第1，5题　B.第2，7题　C.第1，9题　D.第6，10题</p><p>5、以下选项中哪一题的答案与本题相同：<br>A.第8题　B.第4题　C.第9题　D.第7题</p><p>6、以下选项中哪两题的答案与第8题相同：<br>A.第2，4题　B.第1，6题　C.第3，10题　D.第5，9题</p><p>7、在此十道题中，被选中次数最少的选项字母为：<br>A.C　B.B　C.A　D.D</p><p>8、以下选项中哪一题的答案与第1题的答案在字母表中不相邻：<br>A.第7题　B.第5题　C.第2题　D.第10题</p><p>9、已知“第1题与第6题的答案相同”与“第X题与第5题的答案相同”的真假性相反，那么X为：<br>A.第6题　B.第10题　C.第2题　D.第9题</p><p>10、在此十道题中，ABCD四个字母出现次数最多者与最少者的差为：<br>A.3　B.2　C.4　D.1</p><p>这10道题的答案为：<u>　　　　　　　　　　　</u>。</p></blockquote><p>以下是用python代码写的求解算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">A = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">B = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">C = <span class="string">&#x27;C&#x27;</span></span><br><span class="line">D = <span class="string">&#x27;D&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q1</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : A,</span><br><span class="line">        B : B,</span><br><span class="line">        C : C,</span><br><span class="line">        D : D,</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">1</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == answer[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q2</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : C,</span><br><span class="line">        B : D,</span><br><span class="line">        C : A,</span><br><span class="line">        D : B,</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">2</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == answer[<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q3</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : answer[<span class="number">3</span>],</span><br><span class="line">        B : answer[<span class="number">6</span>],</span><br><span class="line">        C : answer[<span class="number">2</span>],</span><br><span class="line">        D : answer[<span class="number">4</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">3</span>]]</span><br><span class="line">    values = options.values()</span><br><span class="line">    values.remove(option)</span><br><span class="line">    <span class="keyword">return</span> option <span class="keyword">not</span> <span class="keyword">in</span> values</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q4</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : (answer[<span class="number">1</span>], answer[<span class="number">5</span>]),</span><br><span class="line">        B : (answer[<span class="number">2</span>], answer[<span class="number">7</span>]),</span><br><span class="line">        C : (answer[<span class="number">1</span>], answer[<span class="number">9</span>]),</span><br><span class="line">        D : (answer[<span class="number">6</span>], answer[<span class="number">10</span>]),</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">4</span>]]</span><br><span class="line">    <span class="keyword">return</span> option[<span class="number">0</span>] == option[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q5</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : answer[<span class="number">8</span>],</span><br><span class="line">        B : answer[<span class="number">4</span>],</span><br><span class="line">        C : answer[<span class="number">9</span>],</span><br><span class="line">        D : answer[<span class="number">7</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">5</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == answer[<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q6</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : (answer[<span class="number">2</span>], answer[<span class="number">4</span>]),</span><br><span class="line">        B : (answer[<span class="number">1</span>], answer[<span class="number">6</span>]),</span><br><span class="line">        C : (answer[<span class="number">3</span>], answer[<span class="number">10</span>]),</span><br><span class="line">        D : (answer[<span class="number">5</span>], answer[<span class="number">9</span>]),</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">6</span>]]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(<span class="built_in">set</span>(<span class="built_in">list</span>(option) + [answer[<span class="number">8</span>]])) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q7</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : answer.count(C),</span><br><span class="line">        B : answer.count(B),</span><br><span class="line">        C : answer.count(A),</span><br><span class="line">        D : answer.count(D),</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">7</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == <span class="built_in">min</span>(options.values())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q8</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : answer[<span class="number">7</span>],</span><br><span class="line">        B : answer[<span class="number">5</span>],</span><br><span class="line">        C : answer[<span class="number">2</span>],</span><br><span class="line">        D : answer[<span class="number">10</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">8</span>]]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(<span class="built_in">ord</span>(option) - <span class="built_in">ord</span>(answer[<span class="number">1</span>])) != <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q9</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : answer[<span class="number">6</span>],</span><br><span class="line">        B : answer[<span class="number">10</span>],</span><br><span class="line">        C : answer[<span class="number">2</span>],</span><br><span class="line">        D : answer[<span class="number">9</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">9</span>]]</span><br><span class="line">    assume1 = (answer[<span class="number">1</span>] == answer[<span class="number">6</span>])</span><br><span class="line">    assume2 = (option == answer[<span class="number">5</span>])</span><br><span class="line">    <span class="keyword">return</span> assume1 != assume2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q10</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : <span class="number">3</span>,</span><br><span class="line">        B : <span class="number">2</span>,</span><br><span class="line">        C : <span class="number">4</span>,</span><br><span class="line">        D : <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">10</span>]]</span><br><span class="line">    keys = options.keys()</span><br><span class="line">    counts = [answer.count(key) <span class="keyword">for</span> key <span class="keyword">in</span> keys]</span><br><span class="line">    <span class="keyword">return</span> option == <span class="built_in">abs</span>(<span class="built_in">max</span>(counts) - <span class="built_in">min</span>(counts))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取10道题答案的全排列</span></span><br><span class="line">answers = itertools.product([A, B, C, D], repeat=<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> answer <span class="keyword">in</span> answers:</span><br><span class="line">    <span class="comment">#为了让代码更容易看懂，加了个下标占位符</span></span><br><span class="line">    answer = [<span class="string">&#x27;&#x27;</span>] + <span class="built_in">list</span>(answer)</span><br><span class="line">    <span class="keyword">if</span> Q1() <span class="keyword">and</span> Q2() <span class="keyword">and</span> Q3() <span class="keyword">and</span> Q4() <span class="keyword">and</span> Q5() <span class="keyword">and</span> \</span><br><span class="line">       Q6() <span class="keyword">and</span> Q7() <span class="keyword">and</span> Q8() <span class="keyword">and</span> Q9() <span class="keyword">and</span> Q10():</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join(answer)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><details><summary>点击查看答案：</summary><p>执行结果为：<code>BCACACDABA</code></p></details>]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 挑战智慧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 智力题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode程序员鼓励师插件Miku</title>
      <link href="/miku-plugin-for-xcode.html"/>
      <url>/miku-plugin-for-xcode.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、插件介绍"><a href="#一、插件介绍" class="headerlink" title="一、插件介绍"></a>一、插件介绍</h3><p>最近Atom编辑器又出了一个插件：<a href="https://github.com/sunqibuhuake/atom-miku">atom-miku</a>，装上这个插件后编辑器会出现一个程序员鼓励师Miku，敲代码时Miku会唱歌和跳舞，停止敲代码时Miku的动作就慢了下来，简直是宅男的福音啊，效果如下：<br><img src="https://camo.githubusercontent.com/2a9d71a9ace9a9d2018cd18314376b100e998a5f/687474703a2f2f7777322e73696e61696d672e636e2f6c617267652f6232396535363333677731657a7176397170366565673230396e303934316b782e676966" class="lazyload placeholder" data-srcset="https://camo.githubusercontent.com/2a9d71a9ace9a9d2018cd18314376b100e998a5f/687474703a2f2f7777322e73696e61696d672e636e2f6c617267652f6232396535363333677731657a7176397170366565673230396e303934316b782e676966" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"><br>据说有人用了，而且带上耳机听背景音乐，结果第二天就被炒了，理由是上班看视频。</p><h3 id="二、插件原理"><a href="#二、插件原理" class="headerlink" title="二、插件原理"></a>二、插件原理</h3><p>下载查看<code>atom-miku</code>的源码，发现插件只是在编辑器里面嵌入了一个网页，网址为<code>http://miku-dancing.coding.io</code>。<br>当网页加载完毕时，会免费赠送10秒钟的播放时间，如果播放时间消耗完的话，Miku的动作就会变慢，音乐的音量也会变小。这时如果执行js代码<code>control.addFrame(seconds)</code>方法的话，播放时间就会增加，Miku又重新复活了。</p><p>可以说，网页里已经实现了大部分功能，如果要移植到Xcode的话，只需写出以下逻辑就行了：</p><ol><li>在代码编辑框上面加上一个WebView来加载网页。</li><li>WebView支持用鼠标拖动，防止有时候挡住代码。</li><li>hook代码编辑框输入文字时的方法，调用网页的<code>addFrame()</code>方法来增加播放时间。</li><li>由于网页的资源过大，在线加载速度比较慢，所以把网页都打包到插件里。</li></ol><h3 id="三、下载地址"><a href="#三、下载地址" class="headerlink" title="三、下载地址"></a>三、下载地址</h3><p>于是我便模仿着写了个<code>Xcode</code>的插件，可以在<code>Alcatraz</code>上搜索<code>Miku</code>进行安装：<br><img src="/assets/2016/01/miku_alcatraz.png" class="lazyload placeholder" data-srcset="/assets/2016/01/miku_alcatraz.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>插件代码下载地址为：<a href="https://github.com/poboke/Miku">https://github.com/poboke/Miku</a></p><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/poboke/Miku"><img src="https://github-readme-stats.vercel.app/api/pin/?username=poboke&repo=Miku&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=poboke&repo=Miku&show_owner=true" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></a>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode代码注释自动缩进插件开发教程</title>
      <link href="/write-an-indent-comments-plugin-for-xcode.html"/>
      <url>/write-an-indent-comments-plugin-for-xcode.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、插件需求"><a href="#一、插件需求" class="headerlink" title="一、插件需求"></a>一、插件需求</h3><p>自从公司启用代码review以来，每个开发者的代码风格渐渐保持一致了，看到规范统一的代码就是觉得比较舒服。</p><p>不过Xcode的代码注释功能一直用着很别扭，比如下面的例子：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注释前：</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注释后：</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line"><span class="comment">//    self.view.backgroundColor = [UIColor whiteColor];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，Xcode只是在行开头加上注释符，注释后的代码缩进对不齐，很难看。这对患有神经感官歇斯底里毛细血管穿梭图鲁西斯症候群（简称强迫症）的人来说，是一件非常痛苦的事情。</p><p>在stackoverflow搜了一下，发现有人也提了这个问题，然后有个人回答说：</p><blockquote><ol><li>你先按<code>command + [</code>把代码往左缩进到最前面</li><li>再按<code>command + /</code>注释代码</li><li>最后按<code>command + ]</code>把代码往右缩进</li></ol></blockquote><p>结果这条回答被采纳为最差答案。</p><p>所以我只能自己写个插件来让注释自动缩进了，首先新建一个Xcode插件工程，比较详细的创建过程可以见<a href="/write-a-xcode-plugin-to-auto-select-all-targets.html">《Xcode插件AllTargets开发教程》</a>。</p><h3 id="二、编写过程"><a href="#二、编写过程" class="headerlink" title="二、编写过程"></a>二、编写过程</h3><p>一开始要先整理一下写插件的思路，我们使用快捷键<code>command + /</code>的时候，Xcode肯定会调用一个方法来注释代码，这个方法实现的功能应该是在代码行最前面加上<code>//</code>注释符。<br>而当我们写的代码有缩进的话，缩进的地方都是空格，所以我们可以hook注释的方法，把注释符改为插入到第一个非空格字符前就行了。</p><p>接下来就开始查找代码注释的方法了，首先在Xcode的私有类头文件里搜索<code>comment</code>，可以发现一个比较可疑的方法：<code>- (void)commentAndUncommentCurrentLines:(id)arg1;</code>，hook这个方法，把参数<code>arg1</code>打印出来，参考代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;DVTSourceTextView+Hook.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DVTSourceTextView</span> (<span class="title">Hook</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)hook</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> jr_swizzleMethod:<span class="keyword">@selector</span>(commentAndUncommentCurrentLines:)</span><br><span class="line">                withMethod:<span class="keyword">@selector</span>(hook_commentAndUncommentCurrentLines:)</span><br><span class="line">                     error:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)hook_commentAndUncommentCurrentLines:(<span class="keyword">id</span>)arg1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, arg1);</span><br><span class="line">    [<span class="keyword">self</span> hook_commentAndUncommentCurrentLines:arg1];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>使用<code>command + /</code>对代码进行注释和反注释，输出结果为：</p><blockquote><p>&lt;NSMenuItem: 0x7f9ec494c8f0 Comment Selection&gt;<br>&lt;NSMenuItem: 0x7f9ec494c8f0 Uncomment Selection&gt;</p></blockquote><p>由此可知，使用快捷键注释，实际上是调用了Xcode菜单栏点击的方法。而当我们注释代码时，会有log打印，也说明找对了方法。</p><p><code>commentAndUncommentCurrentLines:</code>这个方法位于<code>DVTSourceTextView</code>类中，而这个类位于<code>DVTKit.framework</code>里，接下来打开反汇编软件<code>Hopper Disassembler</code>，把<code>DVTKit.framework</code>拖进去进行反汇编。</p><p>搜索并选中<code>commentAndUncommentCurrentLines:</code>方法，按<code>alt + enter</code>生成伪代码，由于代码太长所以只贴出关键代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[DVTSourceTextView commentAndUncommentCurrentLines:](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd, <span class="keyword">void</span> * arg2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    rax = (r12)(r15, <span class="keyword">@selector</span>(stringByTogglingCommentsInLineRange:), rdx, r13);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上面的代码可知，<code>stringByTogglingCommentsInLineRange:</code>方法返回了注释或反注释后的字符串，接着再搜索并查看该方法的伪代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> * -[DVTSourceLanguageService stringByTogglingCommentsInLineRange:](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd, <span class="keyword">struct</span> _NSRange arg2) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (var_70 == <span class="number">0x2</span>) &#123;</span><br><span class="line">        rbx = [[rdi stringByUncommentingString:r15] <span class="keyword">retain</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rbx = [[rdi stringByCommentingString:r15] <span class="keyword">retain</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，继续查看<code>stringByCommentingString:</code>方法的伪代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> * -[DVTSourceLanguageService stringByCommentingString:](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd, <span class="keyword">void</span> * arg2)</span><br><span class="line">&#123;</span><br><span class="line">    rdx = arg2;</span><br><span class="line">    r15 = <span class="keyword">self</span>;</span><br><span class="line">    r12 = [rdx <span class="keyword">retain</span>];</span><br><span class="line">    r14 = *objc_msgSend;</span><br><span class="line">    rbx = [[r15 lineCommentPrefixes] <span class="keyword">retain</span>];</span><br><span class="line">    r13 = [[rbx firstObject] <span class="keyword">retain</span>];</span><br><span class="line">    [rbx release];</span><br><span class="line">    <span class="keyword">if</span> ([r13 length] != <span class="number">0x0</span>) &#123;</span><br><span class="line">            r15 = r13;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">            r14 = *objc_msgSend;</span><br><span class="line">            var_30 = r12;</span><br><span class="line">            rbx = [[r15 blockCommentCircumfixes] <span class="keyword">retain</span>];</span><br><span class="line">            r12 = [[rbx firstObject] <span class="keyword">retain</span>];</span><br><span class="line">            r15 = *objc_release;</span><br><span class="line">            [rbx release];</span><br><span class="line">            rbx = r15;</span><br><span class="line">            r15 = [[r12 firstObject] <span class="keyword">retain</span>];</span><br><span class="line">            [r13 release];</span><br><span class="line">            r13 = [[r12 lastObject] <span class="keyword">retain</span>];</span><br><span class="line">            [r12 release];</span><br><span class="line">            <span class="keyword">if</span> (r13 != <span class="number">0x0</span>) &#123;</span><br><span class="line">                    r12 = [[var_30 stringByAppendingString:r13] <span class="keyword">retain</span>];</span><br><span class="line">                    (rbx)(var_30, <span class="keyword">@selector</span>(stringByAppendingString:));</span><br><span class="line">                    (rbx)(r13, <span class="keyword">@selector</span>(stringByAppendingString:));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                    r12 = var_30;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rbx = [[r15 stringByAppendingString:r12] <span class="keyword">retain</span>];</span><br><span class="line">    r14 = *objc_release;</span><br><span class="line">    [r12 release];</span><br><span class="line">    [r15 release];</span><br><span class="line">    rdi = rbx;</span><br><span class="line">    rax = [rdi autorelease];</span><br><span class="line">    <span class="keyword">return</span> rax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法的作用是把待注释的代码加上注释符进行注释，这也是Xcode注释代码的具体实现方法，将伪代码翻译成OC代码为：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)stringByCommentingString:(<span class="built_in">NSString</span> *)commentingString</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *lineCommentPrefix = [<span class="keyword">self</span>.lineCommentPrefixes firstObject];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (lineCommentPrefix.length == <span class="number">0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用 `/* */` 注释块</span></span><br><span class="line">        <span class="built_in">NSArray</span> *blockCommentCircumfix = [<span class="keyword">self</span>.blockCommentCircumfixes firstObject];</span><br><span class="line">        lineCommentPrefix = [blockCommentCircumfix firstObject];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSString</span> *lineCommentSuffix = [blockCommentCircumfix lastObject];</span><br><span class="line">        <span class="keyword">if</span> (lineCommentSuffix) &#123;</span><br><span class="line">            commentingString = [commentingString stringByAppendingString:lineCommentSuffix];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在待注释的代码最前面加上注释符</span></span><br><span class="line">    <span class="keyword">return</span> [lineCommentPrefix stringByAppendingString:commentingString];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此我们可以hook这个方法，在第一个非空格字符的位置插入注释符。<br>如果某一行代码是空行的话，就不需要注释了，我看了大部分的编辑器都是这么处理的。<br>参考代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)hook_stringByCommentingString:(<span class="built_in">NSString</span> *)commentingString</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *lineCommentPrefix = [<span class="keyword">self</span>.lineCommentPrefixes firstObject];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (lineCommentPrefix.length == <span class="number">0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用 `/* */` 注释块</span></span><br><span class="line">        <span class="built_in">NSArray</span> *blockCommentCircumfix = [<span class="keyword">self</span>.blockCommentCircumfixes firstObject];</span><br><span class="line">        lineCommentPrefix = [blockCommentCircumfix firstObject];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSString</span> *lineCommentSuffix = [blockCommentCircumfix lastObject];</span><br><span class="line">        <span class="keyword">if</span> (lineCommentSuffix) &#123;</span><br><span class="line">            commentingString = [commentingString stringByAppendingString:lineCommentSuffix];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断代码是否含有非空格字符</span></span><br><span class="line">    <span class="built_in">NSRange</span> range = [commentingString rangeOfString:<span class="string">@&quot;[^\\s]&quot;</span> options:<span class="built_in">NSRegularExpressionSearch</span>];</span><br><span class="line">    <span class="keyword">if</span> (range.location == <span class="built_in">NSNotFound</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果没有非空格字符，就不注释</span></span><br><span class="line">        <span class="keyword">return</span> commentingString;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在第一个非空格字符的位置插入注释符</span></span><br><span class="line">    <span class="built_in">NSMutableString</span> *mutableString = [commentingString mutableCopy];</span><br><span class="line">    [mutableString insertString:lineCommentPrefix atIndex:range.location];</span><br><span class="line">    <span class="keyword">return</span> [mutableString <span class="keyword">copy</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、下载地址"><a href="#三、下载地址" class="headerlink" title="三、下载地址"></a>三、下载地址</h3><p>安装插件后，使用效果如下所示：<br><img src="https://cdn.jsdelivr.net/gh/poboke/IndentComments/Screenshots/about.gif" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/poboke/IndentComments/Screenshots/about.gif" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>插件代码下载地址为：<a href="https://github.com/poboke/IndentComments">https://github.com/poboke/IndentComments</a></p><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/poboke/IndentComments"><img src="https://github-readme-stats.vercel.app/api/pin/?username=poboke&repo=IndentComments&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=poboke&repo=IndentComments&show_owner=true" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></a>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode装逼插件ActivatePowerMode</title>
      <link href="/activate-power-mode-plugin-for-xcode.html"/>
      <url>/activate-power-mode-plugin-for-xcode.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、插件介绍"><a href="#一、插件介绍" class="headerlink" title="一、插件介绍"></a>一、插件介绍</h3><p>最近微博上在流传一个Atom编辑器的插件:<a href="https://github.com/JoelBesada/activate-power-mode">activate-power-mode</a>，装上这个插件后打字会有震屏和火花效果，非常牛逼，效果如下：<br><img src="https://cloud.githubusercontent.com/assets/688415/11453297/b8f249ec-9605-11e5-978c-eb3bb21eecd8.gif" class="lazyload placeholder" data-srcset="https://cloud.githubusercontent.com/assets/688415/11453297/b8f249ec-9605-11e5-978c-eb3bb21eecd8.gif" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>据说有人用了，并且还是机械键盘，差点被同事打断手了。</p><p>于是我花了几天的下班时间，写了个Xcode版的插件，模仿了这个效果：<br><img src="https://cdn.jsdelivr.net/gh/poboke/ActivatePowerMode/Screenshots/about.gif" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/poboke/ActivatePowerMode/Screenshots/about.gif" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><h3 id="二、下载地址"><a href="#二、下载地址" class="headerlink" title="二、下载地址"></a>二、下载地址</h3><p>插件可以在Alcatraz上搜索<code>ActivatePowerMode</code>进行安装。<br><img src="/assets/2015/12/activate-alcatraz.png" class="lazyload placeholder" data-srcset="/assets/2015/12/activate-alcatraz.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>插件代码下载地址为：<a href="https://github.com/poboke/ActivatePowerMode">https://github.com/poboke/ActivatePowerMode</a></p><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/poboke/ActivatePowerMode"><img src="https://github-readme-stats.vercel.app/api/pin/?username=poboke&repo=ActivatePowerMode&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=poboke&repo=ActivatePowerMode&show_owner=true" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></a><h3 id="三、开发过程"><a href="#三、开发过程" class="headerlink" title="三、开发过程"></a>三、开发过程</h3><p>这些功能实现起来也不难，主要是获取光标所在位置的代码颜色花了比较多时间。</p><p>我一开始以为代码高亮的颜色是由<code>NSAttributedString</code>控制的，但是我获取到的属性里只有字体字号等属性，没有<code>NSForegroundColorAttributeName</code>这个字段，所以只能用别的方法寻找。</p><p>用逆向思维思考一下，因为代码高亮是由配色方案管理的，切换配色方案时，代码颜色就会改变。而配色方案是根据单词的类型来设置颜色的，所以猜想可能存在某个方法，可以读取或设置某个范围的文字的颜色，这样才方便配色方案功能的实现。</p><p>先用关键字<code>color</code>在Xcode的私有类头文件里搜索，把搜到的方法名输出到一个文本里。然后再用关键字<code>NSRange</code>搜索，很快就发现了一个可疑的方法：<code>- (id)colorAtCharacterIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange *)arg2 context:(id)arg3</code>。然后再hook这个方法，果然返回了相应的颜色。</p><h4 id="1、获取编辑文字时的事件"><a href="#1、获取编辑文字时的事件" class="headerlink" title="1、获取编辑文字时的事件"></a>1、获取编辑文字时的事件</h4><p>代码编辑框一般都是用<code>NSTextView</code>来实现的，所以要找到<code>NSTextView</code>的代理方法。</p><p>我之前写过一篇文章<a href="/write-a-xcode-plugin-to-auto-select-all-targets.html">《Xcode插件AllTargets开发教程》</a>，按照里面的方法，可以找到代码编辑区域视图的类名为<code>IDESourceCodeEditorContainerView</code>。</p><p>该类的头文件的部分代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">IDESourceCodeEditorContainerView</span> : <span class="title">DVTLayoutView_ML</span></span></span><br><span class="line">&#123;</span><br><span class="line">    IDESourceCodeEditor *_editor;</span><br><span class="line">    IDEViewController *_toolbarViewController;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br></pre></td></tr></table></figure><p><code>IDESourceCodeEditor</code>类里面用到了<code>NSTextViewDelegate</code>代理，编辑文字时会调用<code>textView:shouldChangeTextInRange:replacementString:</code>方法，所以可以hook这个方法。</p><h4 id="2、如何实现震屏效果"><a href="#2、如何实现震屏效果" class="headerlink" title="2、如何实现震屏效果"></a>2、如何实现震屏效果</h4><p>原版的插件是用<code>CoffeeScript</code>写的，震屏代码如下：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">shake: <span class="function">-&gt;</span></span><br><span class="line">  intensity = <span class="number">1</span> + <span class="number">2</span> * <span class="built_in">Math</span>.random()</span><br><span class="line">  x = intensity * (<span class="keyword">if</span> <span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span> <span class="keyword">then</span> <span class="number">-1</span> <span class="keyword">else</span> <span class="number">1</span>)</span><br><span class="line">  y = intensity * (<span class="keyword">if</span> <span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span> <span class="keyword">then</span> <span class="number">-1</span> <span class="keyword">else</span> <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  @editorElement.style.top = <span class="string">&quot;<span class="subst">#&#123;y&#125;</span>px&quot;</span></span><br><span class="line">  @editorElement.style.left = <span class="string">&quot;<span class="subst">#&#123;x&#125;</span>px&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span> =&gt;</span><br><span class="line">    @editorElement.style.top = <span class="string">&quot;&quot;</span></span><br><span class="line">    @editorElement.style.left = <span class="string">&quot;&quot;</span></span><br><span class="line">  , <span class="number">75</span></span><br></pre></td></tr></table></figure><p>也就是x轴和y轴随机产生1到3像素的偏移，编辑框的原点坐标移动到这个偏移位置。<br>经过75毫秒后，再把编辑框的原点坐标改为(0, 0)。</p><p>在OC中可以通过修改编辑框的frame值来更改编辑框的位置，时间延迟可以使用<code>dispatch_after</code>方法。</p><h4 id="3、如何实现火花粒子效果"><a href="#3、如何实现火花粒子效果" class="headerlink" title="3、如何实现火花粒子效果"></a>3、如何实现火花粒子效果</h4><p>先看一下原插件的代码：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">spawnParticles: <span class="function"><span class="params">(range)</span> -&gt;</span></span><br><span class="line">  cursorOffset = @calculateCursorOffset()</span><br><span class="line"></span><br><span class="line">  &#123;left, top&#125; = @editor.pixelPositionForScreenPosition range</span><br><span class="line">  left += cursorOffset.left - @editor.getScrollLeft()</span><br><span class="line">  top += cursorOffset.top - @editor.getScrollTop()</span><br><span class="line"></span><br><span class="line">  color = @getColorAtPosition left, top</span><br><span class="line">  numParticles = <span class="number">5</span> + <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">10</span>)</span><br><span class="line">  <span class="keyword">while</span> numParticles--</span><br><span class="line">    part =  @createParticle left, top, color</span><br><span class="line">    @particles[@particlePointer] = part</span><br><span class="line">    @particlePointer = (@particlePointer + <span class="number">1</span>) % <span class="number">500</span></span><br><span class="line"></span><br><span class="line">createParticle: <span class="function"><span class="params">(x, y, color)</span> -&gt;</span></span><br><span class="line">  x: x</span><br><span class="line">  y: y</span><br><span class="line">  alpha: <span class="number">1</span></span><br><span class="line">  color: color</span><br><span class="line">  velocity:</span><br><span class="line">    x: <span class="number">-1</span> + <span class="built_in">Math</span>.random() * <span class="number">2</span></span><br><span class="line">    y: <span class="number">-3.5</span> + <span class="built_in">Math</span>.random() * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">drawParticles: <span class="function">-&gt;</span></span><br><span class="line">  requestAnimationFrame @drawParticles.bind(<span class="built_in">this</span>)</span><br><span class="line">  @context.clearRect <span class="number">0</span>, <span class="number">0</span>, @canvas.width, @canvas.height</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> particle <span class="keyword">in</span> @particles</span><br><span class="line">    <span class="keyword">continue</span> <span class="keyword">if</span> particle.alpha &lt;= <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">    particle.velocity.y += <span class="number">0.075</span></span><br><span class="line">    particle.x += particle.velocity.x</span><br><span class="line">    particle.y += particle.velocity.y</span><br><span class="line">    particle.alpha *= <span class="number">0.96</span></span><br><span class="line"></span><br><span class="line">    @context.fillStyle = <span class="string">&quot;rgba(<span class="subst">#&#123;particle.color[<span class="number">4.</span>..<span class="number">-1</span>]&#125;</span>, <span class="subst">#&#123;particle.alpha&#125;</span>)&quot;</span></span><br><span class="line">    @context.fillRect(</span><br><span class="line">      <span class="built_in">Math</span>.round(particle.x - <span class="number">1.5</span>)</span><br><span class="line">      <span class="built_in">Math</span>.round(particle.y - <span class="number">1.5</span>)</span><br><span class="line">      <span class="number">3</span>, <span class="number">3</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>通过<code>spawnParticles</code>方法随机创建5到15个粒子，保存到粒子数组里，数组上限是500个。<br>使用<code>createParticle</code>创建一个粒子，随机产生x轴和y轴的初始速度，y轴的初始速度越大，创建的粒子就跳得越高。<br>然后定时器每隔一段时间执行，粒子以加速度的方式下落，透明度逐渐减少。</p><p>由于我对Mac编程不太熟悉，所以使用了<code>NSView</code>来创建粒子，不知道有没有更好的方法。</p><h4 id="4、获取光标所在的位置"><a href="#4、获取光标所在的位置" class="headerlink" title="4、获取光标所在的位置"></a>4、获取光标所在的位置</h4><p>获取光标所在的位置，以便在这个位置喷出火花，花了很多时间才找到这个方法。</p><p>可以通过<code>rectArrayForCharacterRange:withinSelectedCharacterRange:inTextContainer:rectCount:</code>方法来获取光标所在的位置。</p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消失的三重密码</title>
      <link href="/triple-disappear-password-for-singles-day.html"/>
      <url>/triple-disappear-password-for-singles-day.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>【也许是双11史上最难拿的红包】What are you 弄啥嘞？</p><p>双11圈新人阿里云放大招了，向全国的程序员发出了一封密码挑战书，破解者将有机会赢取阿里云双11专属红包！</p><p>看不懂？没关系。即日起只要与阿里云官方微信互动，就能获取破解线索。当然，牛X的人无须线索[酷]。</p><p><a href="http://promotion.aliyun.com/1111/index.html">阿里云双11活动地址</a></p></blockquote><p><img src="/assets/2015/11/aliyun_problem.jpg" class="lazyload placeholder" data-srcset="/assets/2015/11/aliyun_problem.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><h3 id="一、第一重加密"><a href="#一、第一重加密" class="headerlink" title="一、第一重加密"></a>一、第一重加密</h3><p>由密文可以猜想加密方式是换字加密，所以需要先找到英文字母的对应表。<br>密文里有些字母标上了颜色，这应该就是提示了，红色字母为kearyod，绿色字母为d。<br>因为绿色是红色的反色，所以可以把绿色字母d反过来变成字母b。</p><blockquote><p>小知识：补色在医疗方面也有所应用，如做手术的大夫穿绿色手术服，是因为手术中有大量红色的血，人看久了就会怠慢，从而延误手术。青绿色是红色的补色，大夫穿上了青绿色手术服，手术中看到红色，也看到青绿色，从而避免怠慢。</p></blockquote><p>这样由kearyodb可以组合成英文单词<code>keyboard</code>。大概是密文中没有字母b，出题人才会想到这一招。<br><code>keyboard</code>是键盘的意思，也就是说要将电脑键盘上的字母排列映射为英文字母表。</p><h3 id="二、第二重加密"><a href="#二、第二重加密" class="headerlink" title="二、第二重加密"></a>二、第二重加密</h3><p>知道了映射表，就可以写一段代码来解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line">keyboard = <span class="string">&quot;qwertyuiopasdfghjklzxcvbnm&quot;</span></span><br><span class="line">alphabet = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line"></span><br><span class="line">dictionary = <span class="built_in">dict</span>(<span class="built_in">zip</span>(keyboard, alphabet))</span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">&quot;of zit kggd zitkt qkt ygxk ortfzoeqs wqlatzwqssl qfr zvg ortfzoeqs yggzwqssl. fgv oy ngx vqfz zg hxz zitd of gft soft.piv dgfn lgsxzogfl qkt zitkt? zohl:hstqlt eiqfut zit ygkd gy zit fxdwtk ngx utz.zit hkgukqddtkl!&quot;</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ciphertext:</span><br><span class="line">    <span class="keyword">if</span> x <span class="keyword">in</span> dictionary:</span><br><span class="line">        result += dictionary[x]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result += x</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><blockquote><p>in the room there are four identical basketballs and two identical footballs. now if you want to put them in one line.zhw mony solutions are there? tips:please change the form of the number you get.the programmers!</p></blockquote><p>其中<code>zhw mony</code>应该是<code>how many</code>的意思，可能出题者写错了，或者可能另有深意。</p><p>上面的两重加密也可以使用软件来暴力破解，可以参考文章<a href="/hctf-network-security-competition-fuckme.html">《HCTF网络安全大赛——FuckMe》</a>，结果如下：<br><img src="/assets/2015/11/aliyun_decrypto.png" class="lazyload placeholder" data-srcset="/assets/2015/11/aliyun_decrypto.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><h3 id="三、第三重加密"><a href="#三、第三重加密" class="headerlink" title="三、第三重加密"></a>三、第三重加密</h3><p>将上面的明文翻译为中文为：</p><blockquote><p>房间里有四个相同的篮球和两个相同的足球。现在如果你想把它们排成一行，总共有多少种方案？提示：请改变你算出的数字的形式。程序员！</p></blockquote><p>这是一道排列的数学题，只要求出2个足球放在6个位置有多少种方法就行了，因为剩下4个位置只能放篮球，不会影响排列。<br>所以排列方法有：<code>(6 * 5) / (2 * 1) = 15</code>。</p><p>如果非得写代码来解决，那么可以用两行代码来搞定：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">balls = [<span class="string">&quot;basketball&quot;</span>] * <span class="number">4</span> + [<span class="string">&quot;football&quot;</span>] * <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(<span class="built_in">set</span>(itertools.permutations(balls))))</span><br></pre></td></tr></table></figure><p>执行结果是15。</p><p>由提示<code>请改变你算出的数字的形式。程序员！</code>可知，程序员经常和二进制数据打交道，而15转成二进制是<code>1111</code>。<br>由于这是双11的活动，所以答案很有可能就是<code>1111</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> CTF比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Python脚本强化LLDB调试器</title>
      <link href="/enhanced-lldb-debugger-with-python-script.html"/>
      <url>/enhanced-lldb-debugger-with-python-script.html</url>
      
        <content type="html"><![CDATA[<p>LLDB是Xcode自带的调试器，作为一个iOS应用开发程序员，平时我在开发应用时会使用LLDB来调试代码。在逆向应用时，也会用到LLDB来跟踪应用的执行过程。</p><p>LLDB还内置了一个Python解析器，使用Python脚本可以方便LLDB的调试，比如自动化执行一些命令，或者自动化处理数据之类的，具体说明可以参考官方的文档：<a href="http://lldb.llvm.org/python-reference.html">《LLDB Python Reference》</a>。</p><p>以下就以一个具体的例子来演示一个Python脚本的编写过程：</p><h3 id="一、获取方法的偏移地址"><a href="#一、获取方法的偏移地址" class="headerlink" title="一、获取方法的偏移地址"></a>一、获取方法的偏移地址</h3><p>运行系统自带的计算器<code>Calculator.app</code>：<br><img src="/assets/2015/10/lldb_python_calculator.png" class="lazyload placeholder" data-srcset="/assets/2015/10/lldb_python_calculator.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>可以看到计算器的菜单里有一个<kbd>关于计算器</kbd>的选项：<br><img src="/assets/2015/10/lldb_python_menu.png" class="lazyload placeholder" data-srcset="/assets/2015/10/lldb_python_menu.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>如果我们要在点击<kbd>关于计算器</kbd>事件断下来的话，就要给这个方法设置一个断点。</p><p>先找到计算器的可执行文件的路径，路径为：<code>/Applications/Calculator.app/Contents/MacOS/Calculator</code>。<br>打开<code>Hopper Disassembler</code>反汇编调试器，将可执行文件拖进去，等待Hopper分析完成。</p><p>在左侧的搜索框输入<code>&quot;showabout&quot;</code>，会搜索到一个结果：<br><img src="/assets/2015/10/lldb_python_search.png" class="lazyload placeholder" data-srcset="/assets/2015/10/lldb_python_search.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>点击这个结果，会跳转到该方法的汇编代码处：</p><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">                     -[CalculatorController showAbout:]:</span><br><span class="line"><span class="number">00000001000093</span>dd         <span class="keyword">push</span>       rbp                                         <span class="comment">; Objective C Implementation defined at 0x1000188d0 (instance)</span></span><br><span class="line"><span class="number">00000001000093</span>de         <span class="keyword">mov</span>        rbp, rsp</span><br><span class="line"><span class="number">00000001000093</span>e1         <span class="keyword">mov</span>        rdi, qword [ds:objc_cls_ref_NSDictionary]   <span class="comment">; objc_cls_ref_NSDictionary, argument &quot;instance&quot; for method imp___got__objc_msgSend</span></span><br><span class="line"><span class="number">00000001000093</span>e8         <span class="keyword">mov</span>        rsi, qword [ds:<span class="number">0x10001b6f0</span>]                 <span class="comment">; @selector(dictionaryWithObject:forKey:), argument &quot;selector&quot; for method imp___got__objc_msgSend</span></span><br><span class="line"><span class="number">00000001000093</span>ef         lea        rdx, qword [ds:cfstring_2000]               <span class="comment">; @&quot;2000&quot;</span></span><br><span class="line"><span class="number">00000001000093</span><span class="built_in">f6</span>         lea        rcx, qword [ds:cfstring_CopyrightStartYear] <span class="comment">; @&quot;CopyrightStartYear&quot;</span></span><br><span class="line"><span class="number">00000001000093</span>fd         call       qword [ds:imp___got__objc_msgSend]</span><br><span class="line"><span class="number">0000000100009403</span>         <span class="keyword">mov</span>        rdi, rax</span><br><span class="line"><span class="number">0000000100009406</span>         <span class="keyword">pop</span>        rbp</span><br><span class="line"><span class="number">0000000100009407</span>         jmp        imp___stubs__NSShowSystemInfoPanel</span><br><span class="line">                        <span class="comment">; endp</span></span><br></pre></td></tr></table></figure><p>由汇编代码可知<code>[CalculatorController showAbout:]</code>方法在文件中的偏移地址为<code>0x00000001000093dd</code>。</p><h3 id="二、使用LLDB调试器设置断点"><a href="#二、使用LLDB调试器设置断点" class="headerlink" title="二、使用LLDB调试器设置断点"></a>二、使用LLDB调试器设置断点</h3><p>接下来运行终端，执行以下命令，让LLDB调试器依附计算器的进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Jobs: ~$ ps aux | grep Calculator</span><br><span class="line">Jobs            79888   0.0  0.1  2781792  11620   ??  S     6:21下午   0:01.07 /Applications/Calculator.app/Contents/MacOS/Calculator</span><br><span class="line">Jobs            80204   0.0  0.0  2432772    568 s002  R+    6:26下午   0:00.00 grep Calculator</span><br><span class="line"></span><br><span class="line">Jobs: ~$ lldb -p 79888</span><br><span class="line">(lldb) process attach --pid 79888</span><br><span class="line">Process 79888 stopped</span><br><span class="line">* thread #1: tid = 0x6030af, 0x00007fff912d34de libsystem_kernel.dylib`mach_msg_trap + 10, queue = &#x27;com.apple.main-thread&#x27;, stop reason = signal SIGSTOP</span><br><span class="line">    frame #0: 0x00007fff912d34de libsystem_kernel.dylib`mach_msg_trap + 10</span><br><span class="line">libsystem_kernel.dylib`mach_msg_trap:</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash">  0x7fff912d34de &lt;+10&gt;: retq</span></span><br><span class="line">    0x7fff912d34df &lt;+11&gt;: nop</span><br><span class="line"></span><br><span class="line">libsystem_kernel.dylib`mach_msg_overwrite_trap:</span><br><span class="line">    0x7fff912d34e0 &lt;+0&gt;:  movq   %rcx, %r10</span><br><span class="line">    0x7fff912d34e3 &lt;+3&gt;:  movl   $0x1000020, %eax</span><br><span class="line"></span><br><span class="line">Executable module set to &quot;/Applications/Calculator.app/Contents/MacOS/Calculator&quot;.</span><br><span class="line">Architecture set to: x86_64h-apple-macosx.</span><br><span class="line"></span><br><span class="line">(lldb) continue</span><br><span class="line">Process 79888 resuming</span><br></pre></td></tr></table></figure><p>接着执行以下命令获取应用的ASLR偏移地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(lldb) image list -o</span><br><span class="line">[  0] 0x000000000cafa000</span><br><span class="line">[  1] 0x00007fff93d51000</span><br><span class="line">[  2] 0x000000010cb1e000</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>第一行数据的16进制地址<code>0x000000000cafa000</code>就是应用的ASLR偏移地址，之前我们已经找到了<code>[CalculatorController showAbout:]</code>方法的偏移地址是<code>0x00000001000093dd</code>，那么该方法在内存中的地址就是<code>0x000000000cafa000 + 0x00000001000093dd</code>。</p><p>所以我们可以执行下面的命令来给这个方法设置断点，注意加号两边不要有空格：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) br set -a &quot;0x000000000cafa000+0x00000001000093dd&quot;</span><br><span class="line">Breakpoint 1: where = Calculator`___lldb_unnamed_function161$$Calculator, address = 0x000000010cb033dd</span><br></pre></td></tr></table></figure><p>这时点击菜单的<kbd>关于计算器</kbd>选项，程序就会断下来：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Process 79888 stopped</span><br><span class="line">* thread #1: tid = 0x6709de, 0x000000010cb033dd Calculator`___lldb_unnamed_function161$$Calculator, queue = &#x27;com.apple.main-thread&#x27;, stop reason = breakpoint 2.1</span><br><span class="line">    frame #0: 0x000000010cb033dd Calculator`___lldb_unnamed_function161$$Calculator</span><br><span class="line">Calculator`___lldb_unnamed_function161$$Calculator:</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash">  0x10cb033dd &lt;+0&gt;:  pushq  %rbp</span></span><br><span class="line">    0x10cb033de &lt;+1&gt;:  movq   %rsp, %rbp</span><br><span class="line">    0x10cb033e1 &lt;+4&gt;:  movq   0x12b98(%rip), %rdi       ; (void *)0x00007fff78684488: NSDictionary</span><br><span class="line">    0x10cb033e8 &lt;+11&gt;: movq   0x12301(%rip), %rsi       ; &quot;dictionaryWithObject:forKey:&quot;</span><br></pre></td></tr></table></figure><h3 id="三、编写Python脚本"><a href="#三、编写Python脚本" class="headerlink" title="三、编写Python脚本"></a>三、编写Python脚本</h3><p>那么问题来了，我们每次调试应用都要先手动获取ASLR偏移地址，如果要给多个地址打断点的话，就要写很多遍”ASLR偏移地址+方法偏移地址”，操作比较繁琐。如果这些重复性的操作可以自动完成的话，在平时的使用过程中应该能节省不少时间。</p><p>用Python就可以很方便地实现这个功能，接下来我们就来写一个简单的脚本，以简化设置断点的操作。脚本的主要功能是自动获取应用的ASLR地址，用户设置断点时只需输入方法在文件中的的偏移地址，脚本会自动把ASLR偏移地址和方法偏移地址相加，再设置断点。</p><p>新建一个Python文件，保存至<code>~/sbr.py</code>，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lldb</span><br><span class="line"><span class="keyword">import</span> commands</span><br><span class="line"><span class="keyword">import</span> optparse</span><br><span class="line"><span class="keyword">import</span> shlex</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取ASLR偏移地址</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ASLR</span>():</span></span><br><span class="line">    <span class="comment"># 获取&#x27;image list -o&#x27;命令的返回结果</span></span><br><span class="line">    interpreter = lldb.debugger.GetCommandInterpreter()</span><br><span class="line">    returnObject = lldb.SBCommandReturnObject()</span><br><span class="line">    interpreter.HandleCommand(<span class="string">&#x27;image list -o&#x27;</span>, returnObject)</span><br><span class="line">    output = returnObject.GetOutput();</span><br><span class="line">    <span class="comment"># 正则匹配出第一个0x开头的16进制地址</span></span><br><span class="line">    match = re.match(<span class="string">r&#x27;.+(0x[0-9a-fA-F]+)&#x27;</span>, output)</span><br><span class="line">    <span class="keyword">if</span> match:</span><br><span class="line">        <span class="keyword">return</span> match.group(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Super breakpoint</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sbr</span>(<span class="params">debugger, command, result, internal_dict</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#用户是否输入了地址参数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> command:</span><br><span class="line">        <span class="built_in">print</span> &gt;&gt;result, <span class="string">&#x27;Please input the address!&#x27;</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    ASLR = get_ASLR()</span><br><span class="line">    <span class="keyword">if</span> ASLR:</span><br><span class="line">        <span class="comment">#如果找到了ASLR偏移，就设置断点</span></span><br><span class="line">        debugger.HandleCommand(<span class="string">&#x27;br set -a &quot;%s+%s&quot;&#x27;</span> % (ASLR, command))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> &gt;&gt;result, <span class="string">&#x27;ASLR not found!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># And the initialization code to add your commands </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__lldb_init_module</span>(<span class="params">debugger, internal_dict</span>):</span></span><br><span class="line">    <span class="comment"># &#x27;command script add sbr&#x27; : 给lldb增加一个&#x27;sbr&#x27;命令</span></span><br><span class="line">    <span class="comment"># &#x27;-f sbr.sbr&#x27; : 该命令调用了sbr文件的sbr函数</span></span><br><span class="line">    debugger.HandleCommand(<span class="string">&#x27;command script add sbr -f sbr.sbr&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;The &quot;sbr&quot; python command has been installed and is ready for use.&#x27;</span></span><br></pre></td></tr></table></figure><p>然后在LLDB中执行下面的语句就可以把脚本导入到LLDB：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) command script import ~/sbr.py</span><br><span class="line">The &quot;sbr&quot; python command has been installed and is ready for use.</span><br></pre></td></tr></table></figure><p>输出结果表示名为<code>sbr</code>的Python命令已经装载好并可以使用了。<br><code>sbr</code>是<code>Super breakpoint</code>的意思，只需接收一个方法偏移地址作为参数。<br>接下来验证一下效果，先清除断点列表，再用<code>sbr</code>命令来设置断点。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(lldb) br delete</span><br><span class="line">About to delete all breakpoints, do you want to do that?: [Y/n] y</span><br><span class="line">All breakpoints removed. (1 breakpoint)</span><br><span class="line"></span><br><span class="line">(lldb) sbr 0x00000001000093dd</span><br><span class="line">Breakpoint 2: where = Calculator`___lldb_unnamed_function161$$Calculator, address = 0x000000010cb033dd</span><br></pre></td></tr></table></figure><p>这时点击菜单的<kbd>关于计算器</kbd>选项，方法也成功断下来了。</p><h3 id="四、启动LLDB时自动加载Python脚本"><a href="#四、启动LLDB时自动加载Python脚本" class="headerlink" title="四、启动LLDB时自动加载Python脚本"></a>四、启动LLDB时自动加载Python脚本</h3><p>对于经常要使用到的脚本，可以在LLDB的初始化文件里添加命令加载脚本，这样LLDB启动后就能使用自定义的命令了。<br>修改<code>~/.lldbinit</code>文件，在文件里加入一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command script import ~/sbr.py</span><br></pre></td></tr></table></figure><p>重新进入LLDB，可以看到脚本已经自动加载了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Jobs: ~$ lldb</span><br><span class="line">The &quot;sbr&quot; python command has been installed and is ready for use.</span><br><span class="line">(lldb) command source -s 1 &#x27;/Users/Jobs/./.lldbinit&#x27;</span><br><span class="line">The &quot;sbr&quot; python command has been installed and is ready for use.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DIY便利贴像素画壁纸</title>
      <link href="/diy-sticky-note-pixel-painting-wallpaper.html"/>
      <url>/diy-sticky-note-pixel-painting-wallpaper.html</url>
      
        <content type="html"><![CDATA[<p>最近我在网上看到一篇帖子，说的是有一个名叫Ben Brucker的上班族，他每天在办公室面对着空白的墙壁，感动非常无聊。<br>于是他跑去找老板，问老板能不能把办公室美化一下。老板表示再过几个月就要搬办公室了，所以只给了他300块让他去买些彩带什么的装扮一下。<br>然后他拿着这些钱去文具店买了一大箱子各种颜色的便利贴，开始了他的装修过程。<br>按照他的图纸，他和员工们贴了一天的便利贴，最终让一个普通的办公室墙壁变成了英雄联盟的主题墙壁！</p><p><img src="/assets/2015/09/wallpaper_lol.jpg" class="lazyload placeholder" data-srcset="/assets/2015/09/wallpaper_lol.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>看到这么漂亮的墙壁，我情不自禁地想试一试，把小房间的墙壁也贴一贴，以下是我制作便利像素画贴壁纸的过程：</p><h3 id="一、测量出墙壁尺寸"><a href="#一、测量出墙壁尺寸" class="headerlink" title="一、测量出墙壁尺寸"></a>一、测量出墙壁尺寸</h3><p>用卷尺或者绳子可以很快测量出墙壁的宽高，因为我房间的墙壁有壁柜，所以墙壁可粘贴的高度只有2.10米，宽度是3.65米。</p><h3 id="二、确定要购买的便利贴类型"><a href="#二、确定要购买的便利贴类型" class="headerlink" title="二、确定要购买的便利贴类型"></a>二、确定要购买的便利贴类型</h3><p>上淘宝搜了一下，一包便利贴有100张，尺寸一般是76cm x 76cm，颜色有4种，如下所示：<br><img src="/assets/2015/09/wallpaper_sticky_note.jpg" class="lazyload placeholder" data-srcset="/assets/2015/09/wallpaper_sticky_note.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><h3 id="三、绘制像素画"><a href="#三、绘制像素画" class="headerlink" title="三、绘制像素画"></a>三、绘制像素画</h3><p>知道了墙壁宽高和便利贴的大小，就可以算出像素画的格子数。<br>像素画宽为：3.68 / 0.076 ≈ 48(格)，高为：2.10 / 0.076 ≈ 27(格)。<br>打开<code>Fireworks</code>图片处理软件，新建一个48*27大小的画布。</p><p>我发现小时候玩过的fc游戏很适合做像素画，就用《超级玛丽》来做壁纸好了。<br>用fc游戏模拟器运行《超级玛丽》游戏，截取一些画面，如下所示：<br><img src="/assets/2015/09/wallpaper_mario.png" class="lazyload placeholder" data-srcset="/assets/2015/09/wallpaper_mario.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>然后把里面的图片抠出来，发挥自己的想象力，重新拼成一幅画。<br>以下是一些需要注意的地方：</p><ul><li>画布大小是有限的，所以放不了太多元素。</li><li>便利贴只有黄红绿蓝4种颜色，所以像素画里只能使用这4种颜色。</li><li>如果颜色不够用的话，可以用马克笔把便利贴涂黑，就能多出一种颜色。</li></ul><p>最后完成的图片如下所示(注：图片为32位的png格式)：<br><img src="/assets/2015/09/wallpaper_image.png" class="lazyload placeholder" data-srcset="/assets/2015/09/wallpaper_image.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="完成图"></p><p>下面是放大10倍的效果，显示了网格，在每10格的地方做了标注：<br><img src="/assets/2015/09/wallpaper_mark.png" class="lazyload placeholder" data-srcset="/assets/2015/09/wallpaper_mark.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="标注图"></p><h3 id="四、计算颜色数量"><a href="#四、计算颜色数量" class="headerlink" title="四、计算颜色数量"></a>四、计算颜色数量</h3><p>要购买足够数量的便利贴，就需要先计算出各种颜色的数量，如果手动来计算数量的话是很麻烦的，所以可以写一段<code>Python</code>代码来统计。</p><p>参考代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回html的div标签</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_color_text</span>(<span class="params">text, color = <span class="string">&#x27;black&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;div style=&quot;color:%s;&quot;&gt;%s&lt;/div&gt;\n&#x27;</span>%(color, text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成html文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;result.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">    <span class="comment">#打开图片</span></span><br><span class="line">    image = Image.<span class="built_in">open</span>(<span class="string">&#x27;image.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#输出每种颜色的数量</span></span><br><span class="line">    total_count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> count, color <span class="keyword">in</span> image.getcolors():</span><br><span class="line">        total_count += count</span><br><span class="line">        text = get_color_text(<span class="built_in">str</span>(count), <span class="string">&#x27;rgba&#x27;</span> + <span class="built_in">str</span>(color))</span><br><span class="line">        f.write(text)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#输出颜色总数</span></span><br><span class="line">    text = get_color_text(<span class="string">&#x27;总数 : &#x27;</span> + <span class="built_in">str</span>(total_count))</span><br><span class="line">    f.write(text)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>把上面制作完成的图片保存为<code>image.png</code>，和代码文件放在同一目录下，执行代码后会生成一个<code>result.html</code>文件。<br>因为网页可以比较方便地看到文字的颜色，在浏览器打开<code>result.html</code>文件，就可以看到以下结果：<br><img src="/assets/2015/09/wallpaper_html.png" class="lazyload placeholder" data-srcset="/assets/2015/09/wallpaper_html.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>一包便利贴有100张，所以我至少需要3包绿色、7包蓝色、2包黄色和2包红色的。<br>上淘宝搜了一下，发现有买20包便利贴包邮的店家，评论里评价便利贴的粘性不错。<br>考虑到便利贴可能会在粘贴的过程中浪费掉，所以要多买一些以备不时之需，最后我买了4包绿、8包蓝、5包黄和3包红的。</p><h3 id="五、粘贴便利贴"><a href="#五、粘贴便利贴" class="headerlink" title="五、粘贴便利贴"></a>五、粘贴便利贴</h3><p>接下来就是纯苦力活了，最好先用抹布把墙壁的灰尘抹掉，再把便利贴贴上去，会贴得比较牢固。<br>对照着标注图从左上角往右下角贴，可以在每10格的地方做个标记(比如在便利贴上面轻轻贴上一小段双面胶)，这样做的话容易跟着标注图贴。<br>这面墙一个人大抵花了一个打怪的时间才贴完，效果图如下：<br><img src="/assets/2015/09/wallpaper_result.jpg" class="lazyload placeholder" data-srcset="/assets/2015/09/wallpaper_result.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p>]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 奇思妙想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教学 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打造简洁优雅的WordPress主题</title>
      <link href="/make-a-simple-and-elegant-wordpress-theme.html"/>
      <url>/make-a-simple-and-elegant-wordpress-theme.html</url>
      
        <content type="html"><![CDATA[<p>最近利用加班后的空余时间把主题优化了一下，主要优化了以下一些内容：</p><h3 id="一、更换新的主题风格"><a href="#一、更换新的主题风格" class="headerlink" title="一、更换新的主题风格"></a>一、更换新的主题风格</h3><p>主题打算更改为简洁优雅的风格，说到优雅，当之无愧的就是苹果的产品，向乔布斯致敬！<br>所以我把主题色改为MacBook铝合金的颜色，再参考Mac系统的配色方案，结合一些扁平化的元素，打造出一种清新淡雅的感觉。可能有些地方还不太和谐，不过这个以后可以再慢慢调整。</p><p>此外还去掉很多华而不实的功能：</p><ul><li>侧边栏的自动滑动功能(影响网页速度)</li><li>二维码扫码登录(消耗太多资源)</li><li>Flash标签云(被淘汰了)</li><li>文章图片框等等等(追求平面风格)</li></ul><h3 id="二、采用响应式布局"><a href="#二、采用响应式布局" class="headerlink" title="二、采用响应式布局"></a>二、采用响应式布局</h3><p>几年前制作旧主题的时候，我的显示器分辨率为1024*768，所以博客的内容区域最多只能分配660px的宽度。<br>由于我的博客主要是分享一些代码，如果代码比较长的话，660px的宽度很导致代码换行，看起来很不舒服。所以增大内容区域的宽度是很有必要的，这也是这次主题修改的首要工作。<br>不过现在只是做了简单的修改，判断屏幕宽度大于1200px的话，内容区域的宽度就变为800px。<br>修改方法：下载一些响应式主题，参考里面的css代码。</p><h3 id="三、支持AJAX请求"><a href="#三、支持AJAX请求" class="headerlink" title="三、支持AJAX请求"></a>三、支持AJAX请求</h3><p>AJAX的好处是每次点击文章时，只加载了内容区域的数据，网页的头部、脚部和侧边栏都不会重新加载，既节省了流量，又提高了访问速度。<br>因为侧边栏不用重新加载，所以在侧边栏放一个音乐播放器的话，就可以一边浏览网站一边聆听美妙的音乐了。<br>这篇文章能教你快速地让wordpress支持AJAX：<a href="http://soz.im/wordpress-full-ajax-loading-1-alone.html">《WordPress的全站Ajax加载》</a>。</p><h3 id="四、使用Markdown写作"><a href="#四、使用Markdown写作" class="headerlink" title="四、使用Markdown写作"></a>四、使用Markdown写作</h3><p>有一位不愿意透露姓名的程序员说过：“我要用Markdown像写代码一样写文章。”<br>作为一个程序员，怎么能去使用那么笨重的富文本编辑器呢？所以用Markdown写文章是很有必要的。<br>这篇文章可以教你怎么在WordPress里使用Markdown：<a href="http://www.itoldme.net/archives/427">《使用Markdown写作WordPress》</a>。<br>如果Jetpack链接不成功，可以参考这篇文章：<a href="http://blog.sina.com.cn/s/blog_643921350102vrgo.html">《Jetpack无法连接到WordPress》</a>。<br>附上Markdown语法说明：<a href="http://www.appinn.com/markdown/">《Markdown 语法说明》</a>。</p><h3 id="五、修复自定义的评论表情"><a href="#五、修复自定义的评论表情" class="headerlink" title="五、修复自定义的评论表情"></a>五、修复自定义的评论表情</h3><p>WordPress4.2采用了更改了emoji表情，导致旧版本自定义的评论表情失效，这篇文章可以比较方便地修复：<br><a href="http://zhangge.net/5035.html">《WordPress4.2升级修复补丁：解决大量404请求以及评论表情路径及尺寸异常问题》</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 其它分类 </category>
          
          <category> 博客折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WordPress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提交Xcode插件到Alcatraz</title>
      <link href="/submit-xcode-plugin-to-alcatraz.html"/>
      <url>/submit-xcode-plugin-to-alcatraz.html</url>
      
        <content type="html"><![CDATA[<p>一个Xcode插件制作完成后，为了方便用户安装，可以将插件提交到Alcatraz的插件包列表里，因为大部分开发者都会使用Alcatraz来管理插件。</p><p>首先打开Alcatraz的插件包仓库地址：<br><a href="https://github.com/supermarin/alcatraz-packages">https://github.com/supermarin/alcatraz-packages</a></p><p>在简介里可以看到Alcatraz的包分为三类，分别为：插件(plugins)，配色方案(color schemes)和模板(templates)。<br>每个包都必须包含<code>&quot;name&quot;</code>、<code>&quot;url&quot;</code>和<code>&quot;description&quot;</code>字段，还有一个可选的<code>&quot;screenshot&quot;</code>字段。</p><p>接下来Fork这个仓库，再克隆到本地，可以看到文件列表为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── packages.json</span><br><span class="line">└── spec</span><br><span class="line">    └── packages_spec.rb</span><br></pre></td></tr></table></figure><p>以添加<code>&quot;AllTargets&quot;</code>插件为例，打开packages.json文件，在<code>&quot;plugins&quot;</code>数组里加入以下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;AllTargets&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://github.com/poboke/AllTargets&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;The plugin will auto select all targets when you add files to the project.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;screenshot&quot;</span>: <span class="string">&quot;https://github.com/poboke/AllTargets/raw/master/Screenshots/about.png&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>如果不确定文件格式是否正确，可以通过安装rspec来测试新增加包后文件格式有没有错误。<br>rspec是一个ruby测试框架，可以在终端执行以下命令来安装rspec：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install rspec</span><br></pre></td></tr></table></figure><p><code>packages_spec.rb</code>文件里制定了一些测试规则，比如检查插件名是否唯一等，如果出错的话会给出相应的错误提示。</p><p>打开终端，cd到仓库根目录，执行rspec命令。<br>如果没有错误提示出现，说明成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line"></span><br><span class="line">Finished in 0.03695 seconds (files took 0.20818 seconds to load)</span><br><span class="line">7 examples, 0 failures</span><br></pre></td></tr></table></figure><p>最后提交一个pull request到Master分支就行了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode插件AllTargets开发教程</title>
      <link href="/write-a-xcode-plugin-to-auto-select-all-targets.html"/>
      <url>/write-a-xcode-plugin-to-auto-select-all-targets.html</url>
      
        <content type="html"><![CDATA[<p>公司要为很多个企业定制app，每个app的功能基本相同，只是界面上的一些图片和文字要换掉，功能也有一些小改动。考虑到代码维护的问题，比较好的做法就是只维护一份代码，然后用不同的配置文件来管理各个target的内容。</p><p>当工程里达到上百个target的时候，为工程新增文件就成了一件非常痛苦的事情。<br><img src="/assets/2015/02/xcode_plugin_lots_of_targets.png" class="lazyload placeholder" data-srcset="/assets/2015/02/xcode_plugin_lots_of_targets.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>我必须一个一个地去勾选所有的targets，往往要花上几分钟的时间来重复无聊的操作，既浪费时间又影响心情，而Xcode也没有自带全选targets的功能。因此我萌生了一个想法：写一个能自动勾选所有targets的插件。</p><p>Google一下Xcode的制作教程，找到了VVDocumenter插件作者写的一篇教程：<a href="http://www.onevcat.com/2013/02/xcode-plugin/">《Xcode 4 插件制作入门》</a>。<br>这篇教程很适合入门，但是里面有些东西由于年代久远，已经不兼容最新的Xcode 6.1了。不过教程里很多细节都写得很详细，建议先看完这篇教程。我看了教程后加上自己的摸索，终于完成了插件的开发，因此在这里把插件的开发过程分享出来。  </p><h3 id="一、安装插件模板"><a href="#一、安装插件模板" class="headerlink" title="一、安装插件模板"></a>一、安装插件模板</h3><p><code>Alcatraz</code>是一款开源的Xcode包管理器，源码下载地址为：<a href="https://github.com/supermarin/Alcatraz">https://github.com/supermarin/Alcatraz</a>。<br>编译完成之后，重启Xcode，然后点击Xcode顶部菜单<code>Windows</code>中的<code>Package Manager</code>就可以打开Alcatraz包管理器面板。<br>搜索关键字<code>Xcode Plugin</code>，可以找到一个<code>Xcode Plugin</code>模板，该模板可以用来创建Xcode 6+的插件。<br><img src="/assets/2015/02/xcode_plugin_alcatraz.png" class="lazyload placeholder" data-srcset="/assets/2015/02/xcode_plugin_alcatraz.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>点击左边的图标按钮就可以把模板安装到Xcode里。</p><p>新建一个Xcode工程，选择<code>Xcode Plugin</code>模板，本例子的工程名为AllTargets。<br><img src="/assets/2015/02/xcode_plugin_template.png" class="lazyload placeholder" data-srcset="/assets/2015/02/xcode_plugin_template.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>该模板的部分初始代码为：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)initWithBundle:(<span class="built_in">NSBundle</span> *)plugin</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        <span class="comment">// reference to plugin&#x27;s bundle, for resource access</span></span><br><span class="line">        <span class="keyword">self</span>.bundle = plugin;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create menu items, initialize UI, etc.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sample Menu Item:</span></span><br><span class="line">        <span class="built_in">NSMenuItem</span> *menuItem = [[<span class="built_in">NSApp</span> mainMenu] itemWithTitle:<span class="string">@&quot;Edit&quot;</span>];</span><br><span class="line">        <span class="keyword">if</span> (menuItem) &#123;</span><br><span class="line">            [[menuItem submenu] addItem:[<span class="built_in">NSMenuItem</span> separatorItem]];</span><br><span class="line">            <span class="built_in">NSMenuItem</span> *actionMenuItem = [[<span class="built_in">NSMenuItem</span> alloc] initWithTitle:<span class="string">@&quot;Do Action&quot;</span> action:<span class="keyword">@selector</span>(doMenuAction) keyEquivalent:<span class="string">@&quot;&quot;</span>];</span><br><span class="line">            [actionMenuItem setTarget:<span class="keyword">self</span>];</span><br><span class="line">            [[menuItem submenu] addItem:actionMenuItem];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sample Action, for menu item:</span></span><br><span class="line">- (<span class="keyword">void</span>)doMenuAction</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSAlert</span> *alert = [[<span class="built_in">NSAlert</span> alloc] init];</span><br><span class="line">    [alert setMessageText:<span class="string">@&quot;Hello, World&quot;</span>];</span><br><span class="line">    [alert runModal];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始代码会在Xcode的<code>Edit</code>菜单里加入一个名字为<code>Do Action</code>的子菜单，当你点击这个子菜单的时候，会调用doMenuAction方法弹出一个提示框，提示内容为<code>Hello, World</code>。</p><h3 id="二、需求分析"><a href="#二、需求分析" class="headerlink" title="二、需求分析"></a>二、需求分析</h3><p>在Xcode里按住 <kbd>command</kbd> + <kbd>alt</kbd> + <kbd>A</kbd> 打开添加文件窗口：<br><img src="/assets/2015/02/xcode_plugin_add_to_targets.png" class="lazyload placeholder" data-srcset="/assets/2015/02/xcode_plugin_add_to_targets.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>所有的targets都位于白色矩形视图里，可以猜测该矩形视图是一个NSTableView（大小差不多为320*170），勾选的按钮是一个NSCell。<br>首先要获得NSTableView对象，<a href="http://www.onevcat.com/2013/02/xcode-plugin/">《Xcode 4 插件制作入门》</a>里提到可以使用递归打印subviews的方法来得到某个NSView对象。</p><p>不过我发现一种更简便的方法，在本例子中比较适用。在没打开添加文件窗口之前，NSTableView是不会创建的，而创建视图时，初始化大小会调用NSViewDidUpdateTrackingAreasNotification通知。所以我们可以先监听该通知，再打开添加文件窗口，这样就能得到添加文件窗口里所有视图对象了，修改代码为：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)doMenuAction</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//监听视图更新区域大小的通知</span></span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(notificationListener:) name:<span class="built_in">NSViewDidUpdateTrackingAreasNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)notificationListener:(<span class="built_in">NSNotification</span> *)notification</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//打印出视图对象以及视图的大小</span></span><br><span class="line">    <span class="built_in">NSView</span> *view = notification.object;</span><br><span class="line">    <span class="keyword">if</span> ([view respondsToSelector:<span class="keyword">@selector</span>(frame)]) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;view : %@, frame : %@&quot;</span>, view, [<span class="built_in">NSValue</span> valueWithRect:view.frame]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译代码后重启Xcode，打开控制台（Control+空格，输入console），并清空控制台里的log。<br>点击Xcode的<code>Do Action</code>子菜单开始监听消息，这时打开添加文件的窗口会看到控制台输出一堆log。<br>把log复制到MacVim里，搜索<code>NSTableView</code>，可以找到一条结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">view : &lt;NSTableView: 0x7fb206c65f40&gt;, frame : NSRect: &#123;&#123;0, 0&#125;, &#123;321, 170&#125;&#125;</span><br></pre></td></tr></table></figure><p>可以发现，此TableView的大小为321*170，看来正是我们正在寻找的对象。</p><h3 id="三、hook私有类"><a href="#三、hook私有类" class="headerlink" title="三、hook私有类"></a>三、hook私有类</h3><p>由于NSCell的值是由NSTableView的数据源所控制的，所以我们必须找到NSTableView的数据源，修改一下代码打印出数据源：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)notificationListener:(<span class="built_in">NSNotification</span> *)notification</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSView</span> *view = notification.object;</span><br><span class="line">    <span class="keyword">if</span> ([view.className isEqualToString:<span class="string">@&quot;NSTableView&quot;</span>]) &#123;</span><br><span class="line">        <span class="built_in">NSTableView</span> *tableView = (<span class="built_in">NSTableView</span> *)view;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;dataSource : %@&quot;</span>, tableView.dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到控制台输出了log：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataSource : &lt;Xcode3TargetMembershipDataSource: 0x7fadb7352830&gt;</span><br></pre></td></tr></table></figure><p><code>Xcode3TargetMembershipDataSource</code>是Xcode的私有类，位于<code>/Applications/Xcode.app/Contents/PlugIns/Xcode3UI.ideplugin/Contents/MacOS/Xcode3UI</code>里。要引用<code>Xcode3TargetMembershipDataSource.h</code>这个头文件的话，就要把Xcode3UI这个文件拖到工程的Frameworks里，不要勾选<code>Copy items if needed</code>，这样就会直接引用Xcode应用里的文件。</p><p>在这里可以下载从Xcode 6.1 dump出来的私有类头文件：<a href="https://github.com/luisobo/Xcode-RuntimeHeaders/tree/xcode6-beta1">https://github.com/luisobo/Xcode-RuntimeHeaders/tree/xcode6-beta1</a></p><p>打开<code>Xcode3TargetMembershipDataSource.h</code>，部分代码如下：</p><figure class="highlight objc"><figcaption><span>Xcode3TargetMembershipDataSource.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Xcode3TargetMembershipDataSource</span> : <span class="title">NSObject</span> &lt;<span class="title">NSTableViewDataSource</span>, <span class="title">NSTableViewDelegate</span>&gt;;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *_wrappedTargets;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)updateTargets;</span><br><span class="line"><span class="comment">//......</span></span><br></pre></td></tr></table></figure><p><code>_wrappedTargets</code>数组很有可能保存着targets的信息，<code>updateTargets</code>方法的作用应该是用来更新targets的值，所以可以试试hook<code>updateTargets</code>方法。<br><a href="https://github.com/rentzsch/jrswizzle">JRSwizzle</a>是一个专门处理Method Swizzling的开源库，这里可以直接使用。</p><p>将<code>Xcode3TargetMembershipDataSource.h</code>文件拖到工程里，记得勾上<code>Copy items if needed</code>。该头文件里可能引用了一些未知的类名会导致报错，所以可以把报错的语句注释掉。</p><p>然后新建一个<code>Xcode3TargetMembershipDataSource+Hook</code>的Category。<br><img src="/assets/2015/02/xcode_plugin_add_category.png" class="lazyload placeholder" data-srcset="/assets/2015/02/xcode_plugin_add_category.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>Category的代码如下：</p><figure class="highlight objc"><figcaption><span>Xcode3TargetMembershipDataSource+Hook.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;Xcode3TargetMembershipDataSource.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Xcode3TargetMembershipDataSource</span> (<span class="title">Hook</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)hook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><figcaption><span>Xcode3TargetMembershipDataSource+Hook.m</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;Xcode3TargetMembershipDataSource+Hook.h&quot;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&quot;JRSwizzle.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Xcode3TargetMembershipDataSource</span> (<span class="title">Hook</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)hook</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> jr_swizzleMethod:<span class="keyword">@selector</span>(updateTargets) withMethod:<span class="keyword">@selector</span>(updateTargetsHook) error:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)updateTargetsHook</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 先调用原来的方法</span></span><br><span class="line">    [<span class="keyword">self</span> updateTargetsHook];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看_wrappedTargets数组里保存了什么类型的对象</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *wrappedTargets = [<span class="keyword">self</span> valueForKey:<span class="string">@&quot;wrappedTargets&quot;</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">id</span> wrappedTarget <span class="keyword">in</span> wrappedTargets) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;target : %@&quot;</span>, wrappedTarget);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objc"><figcaption><span>AllTargets.m</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;Xcode3TargetMembershipDataSource+Hook.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)initWithBundle:(<span class="built_in">NSBundle</span> *)plugin</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reference to plugin&#x27;s bundle, for resource access</span></span><br><span class="line">        <span class="keyword">self</span>.bundle = plugin;</span><br><span class="line"></span><br><span class="line">        [Xcode3TargetMembershipDataSource hook];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行后可以看到控制台输出了log，由于工程只有一个target，所以只有一个对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target : &lt;Xcode3TargetWrapper: 0x7f8b59264ab0&gt;&gt;</span><br></pre></td></tr></table></figure><p>在Xcode的私有类里找到<code>Xcode3TargetWrapper.h</code>，内容如下：</p><figure class="highlight objc"><figcaption><span>Xcode3TargetWrapper.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Xcode3TargetWrapper</span> : <span class="title">NSObject</span></span></span><br><span class="line">&#123;</span><br><span class="line">    PBXTarget *_pbxTarget;</span><br><span class="line">    Xcode3Project *_project;</span><br><span class="line">    <span class="built_in">NSString</span> *_name;</span><br><span class="line">    <span class="built_in">NSImage</span> *_image;</span><br><span class="line">    <span class="built_in">BOOL</span> _selected;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) <span class="built_in">NSImage</span> *image; <span class="comment">// @synthesize image=_image;</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) <span class="built_in">NSString</span> *name; <span class="comment">// @synthesize name=_name;</span></span><br><span class="line"><span class="keyword">@property</span> <span class="built_in">BOOL</span> selected; <span class="comment">// @synthesize selected=_selected;</span></span><br><span class="line"><span class="comment">//......</span></span><br></pre></td></tr></table></figure><p>可以看到，该类有三个属性：图片、名字和是否选中，我们只要把<code>selected</code>属性改为<code>YES</code>就行了。</p><p>我们把<code>updateTargetsHook</code>方法修改为：</p><figure class="highlight objc"><figcaption><span>Xcode3TargetMembershipDataSource+Hook.m</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)updateTargetsHook</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 先调用原来的方法</span></span><br><span class="line">    [<span class="keyword">self</span> updateTargetsHook];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改wrappedTarget的属性值</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *wrappedTargets = [<span class="keyword">self</span> valueForKey:<span class="string">@&quot;wrappedTargets&quot;</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">id</span> wrappedTarget <span class="keyword">in</span> wrappedTargets) &#123;</span><br><span class="line">        [wrappedTarget setValue:@YES forKey:<span class="string">@&quot;selected&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次编译重启Xcode，打开添加文件窗口，可以发现所有targets都自动选中了：<br><img src="/assets/2015/02/xcode_plugin_auto_select_all_targets.png" class="lazyload placeholder" data-srcset="/assets/2015/02/xcode_plugin_auto_select_all_targets.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><h3 id="四、添加菜单"><a href="#四、添加菜单" class="headerlink" title="四、添加菜单"></a>四、添加菜单</h3><p>考虑到有时可能要关闭这个功能，所以可以给菜单加上是否选中的状态，此外还可以给Xcode加上一个独立的Plugins菜单，大部分插件就可以放在这个菜单里，以方便管理。<br><img src="/assets/2015/02/xcode_plugin_plugins_menu.png" class="lazyload placeholder" data-srcset="/assets/2015/02/xcode_plugin_plugins_menu.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>由于Xcode启动后加载插件时，Xcode的菜单栏可能还没加载出来，所以要确保Xcode加载出菜单栏才创建插件的菜单，可以使用<code>NSMenuDidChangeItemNotification</code>通知来监听菜单栏的改变，判断Xcode菜单栏加载出来后再添加菜单，具体代码如下：</p><figure class="highlight objc"><figcaption><span>AllTargets.m</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)initWithBundle:(<span class="built_in">NSBundle</span> *)plugin</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reference to plugin&#x27;s bundle, for resource access</span></span><br><span class="line">        <span class="keyword">self</span>.bundle = plugin;</span><br><span class="line"></span><br><span class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(addPluginsMenu) name:<span class="built_in">NSMenuDidChangeItemNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">        [Xcode3TargetMembershipDataSource hook];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)addPluginsMenu</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSMenu</span> *mainMenu = [<span class="built_in">NSApp</span> mainMenu];</span><br><span class="line">    <span class="keyword">if</span> (!mainMenu) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 增加一个&quot;Plugins&quot;菜单到&quot;Window&quot;菜单前面</span></span><br><span class="line">    <span class="built_in">NSMenuItem</span> *pluginsMenuItem = [mainMenu itemWithTitle:<span class="string">@&quot;Plugins&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!pluginsMenuItem) &#123;</span><br><span class="line">        pluginsMenuItem = [[<span class="built_in">NSMenuItem</span> alloc] init];</span><br><span class="line">        pluginsMenuItem.title = <span class="string">@&quot;Plugins&quot;</span>;</span><br><span class="line">        pluginsMenuItem.submenu = [[<span class="built_in">NSMenu</span> alloc] initWithTitle:pluginsMenuItem.title];</span><br><span class="line">        <span class="built_in">NSInteger</span> windowIndex = [mainMenu indexOfItemWithTitle:<span class="string">@&quot;Window&quot;</span>];</span><br><span class="line">        [mainMenu insertItem:pluginsMenuItem atIndex:windowIndex];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加&quot;Auto Select All Targets&quot;子菜单</span></span><br><span class="line">    <span class="built_in">NSMenuItem</span> *subMenuItem = [[<span class="built_in">NSMenuItem</span> alloc] init];</span><br><span class="line">    subMenuItem.title = <span class="string">@&quot;Auto Select All Targets&quot;</span>;</span><br><span class="line">    subMenuItem.target = <span class="keyword">self</span>;</span><br><span class="line">    subMenuItem.action = <span class="keyword">@selector</span>(toggleMenu:);</span><br><span class="line">    subMenuItem.state = <span class="built_in">NSOnState</span>;</span><br><span class="line">    [pluginsMenuItem.submenu addItem:subMenuItem];</span><br><span class="line"></span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:<span class="built_in">NSMenuDidChangeItemNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)toggleMenu:(<span class="built_in">NSMenuItem</span> *)menuItem</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//改变菜单选中状态</span></span><br><span class="line">    menuItem.state = !menuItem.state;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重新交换方法</span></span><br><span class="line">    [Xcode3TargetMembershipDataSource hook];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、下载地址"><a href="#五、下载地址" class="headerlink" title="五、下载地址"></a>五、下载地址</h3><p>插件代码下载地址为：<a href="https://github.com/poboke/AllTargets">https://github.com/poboke/AllTargets</a></p><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/poboke/AllTargets"><img src="https://github-readme-stats.vercel.app/api/pin/?username=poboke&repo=AllTargets&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=poboke&repo=AllTargets&show_owner=true" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></a>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>情人节约宝妹攻略</title>
      <link href="/write-up-of-yue-bao-mei.html"/>
      <url>/write-up-of-yue-bao-mei.html</url>
      
        <content type="html"><![CDATA[<p>安全宝在情人节前出了一个网络安全闯关游戏，题目还是比较简单的。</p><h3 id="Q1、世界上先有男人还是先有女人？"><a href="#Q1、世界上先有男人还是先有女人？" class="headerlink" title="Q1、世界上先有男人还是先有女人？"></a>Q1、世界上先有男人还是先有女人？</h3><p>答案是“男人”。</p><h3 id="Q2、世界上为什么先有男人？"><a href="#Q2、世界上为什么先有男人？" class="headerlink" title="Q2、世界上为什么先有男人？"></a>Q2、世界上为什么先有男人？</h3><p>答案是“先生”。</p><h3 id="Q3、请从本页面找到密码并输入。"><a href="#Q3、请从本页面找到密码并输入。" class="headerlink" title="Q3、请从本页面找到密码并输入。"></a>Q3、请从本页面找到密码并输入。</h3><p>查看网页源码，可以看到一段源码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page page-3 invisible&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dp c dp-4-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;password-form dp c&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-button h&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;checkPassword(this)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dp c dp-logo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可见，输入密码后点击按钮会调用<code>checkPassword</code>函数，在源码里可以看到网页引用了一个<code>index.js</code>文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/index.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问该文件，里面有一段被混淆的js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">b,a,c,d</span>)</span>&#123;b.showPage=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;c(<span class="string">&quot;.page&quot;</span>).filter(<span class="string">&quot;.page-&quot;</span>+e).show().siblings().hide()&#125;;b.checkPassword=<span class="function"><span class="keyword">function</span>(<span class="params">f</span>)</span>&#123;<span class="keyword">var</span> e=c(f).prev().val();<span class="keyword">if</span>(e==<span class="string">&quot;wo ai anquanbao&quot;</span>)&#123;showPage(<span class="number">4</span>)&#125;<span class="keyword">else</span>&#123;c(f).prev().val(<span class="string">&quot;&quot;</span>).focus()&#125;&#125;&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="built_in">window</span>.jQuery);</span><br></pre></td></tr></table></figure><p>格式化一下<code>js</code>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">b, a, c, d</span>) </span>&#123;</span><br><span class="line">    b.showPage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        c(<span class="string">&quot;.page&quot;</span>).filter(<span class="string">&quot;.page-&quot;</span> + e).show().siblings().hide()</span><br><span class="line">    &#125;;</span><br><span class="line">    b.checkPassword = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = c(f).prev().val();</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="string">&quot;wo ai anquanbao&quot;</span>) &#123;</span><br><span class="line">            showPage(<span class="number">4</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c(f).prev().val(<span class="string">&quot;&quot;</span>).focus()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">document</span>, <span class="built_in">window</span>.jQuery);</span><br></pre></td></tr></table></figure><p>可见，<code>checkPassword</code>函数会判断输入的密码是否为<code>&quot;wo ai anquanbao&quot;</code>，是的话就调用<code>showPage(4)</code>函数显示第4个问题。</p><h3 id="Q4、在这里我用-htaccess限制了访问所有图片，来找找约会地点吧。"><a href="#Q4、在这里我用-htaccess限制了访问所有图片，来找找约会地点吧。" class="headerlink" title="Q4、在这里我用.htaccess限制了访问所有图片，来找找约会地点吧。"></a>Q4、在这里我用.htaccess限制了访问所有图片，来找找约会地点吧。</h3><p><img src="/assets/2015/02/yuebaomei_tishi.png" class="lazyload placeholder" data-srcset="/assets/2015/02/yuebaomei_tishi.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>图片里提示了<code>&quot;yuehui.png&quot;</code>，访问<code>http://yuebaomei.com/yuehui.png</code>，发现访问不了。<br>查看网络请求，发现页面访问了一个地址<code>http://yuebaomei.com/show.php?p=dGlzaGkucG5n</code>，打开是上面那张图片。<br>所以<code>show.php</code>就是用来显示图片的脚本，参数p的值<code>&quot;dGlzaGkucG5n&quot;</code>看起来像base64编码，解码结果为<code>&quot;tishi.png&quot;</code>。</p><p>也就是说，参数p的值是图片名的base64编码，那么<code>&quot;yuehui.png&quot;</code>的base64编码为<code>&quot;eXVlaHVpLnBuZw==&quot;</code>。<br>访问<code>http://yuebaomei.com/show.php?p=eXVlaHVpLnBuZw==</code>，成功得到了约会地点：<br><img src="/assets/2015/02/yuebaomei_yuehui.jpg" class="lazyload placeholder" data-srcset="/assets/2015/02/yuebaomei_yuehui.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>要拿终极大奖的话可以继续答题。</p><h3 id="Q5、在这里宝妹有三个问题，任选其一做对就有终极大奖哦。"><a href="#Q5、在这里宝妹有三个问题，任选其一做对就有终极大奖哦。" class="headerlink" title="Q5、在这里宝妹有三个问题，任选其一做对就有终极大奖哦。"></a>Q5、在这里宝妹有三个问题，任选其一做对就有终极大奖哦。</h3><p><img src="/assets/2015/02/yuebaomei_q5.jpg" class="lazyload placeholder" data-srcset="/assets/2015/02/yuebaomei_q5.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><ul><li>A、我没安卓手机，不好调试。</li><li>B、我对SQL注入不太熟悉。</li><li>C、所以只能选择PHP了。</li></ul><p>选择PHP代码审计，可以看到一段PHP代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;THIS IS FLAG&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span> == <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> &gt;= preg_match(<span class="string">&#x27;/^[[:graph:]]&#123;12,&#125;$/&#x27;</span>, <span class="variable">$password</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Wrong Format&#x27;</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">TRUE</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable">$reg</span> = <span class="string">&#x27;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">6</span> &gt; preg_match_all(<span class="variable">$reg</span>, <span class="variable">$password</span>, <span class="variable">$arr</span>))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$c</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$ps</span> = <span class="keyword">array</span>(<span class="string">&#x27;punct&#x27;</span>, <span class="string">&#x27;digit&#x27;</span>, <span class="string">&#x27;upper&#x27;</span>, <span class="string">&#x27;lower&#x27;</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$ps</span> <span class="keyword">as</span> <span class="variable">$pt</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (preg_match(<span class="string">&quot;/[[:<span class="subst">$pt</span>:]]+/&quot;</span>, <span class="variable">$password</span>))</span><br><span class="line">                <span class="variable">$c</span> += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$c</span> &lt; <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;42&quot;</span> == <span class="variable">$password</span>) <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&#x27;Wrong password&#x27;</span>;</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Google一下，可以找到正则表达式里一些单词代表的含义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[:graph:]     #打印字符，不包括空格</span><br><span class="line">[:punct:]     #打印字符，匹配任何标点符号</span><br><span class="line">[:digit:]     #匹配任何数字</span><br><span class="line">[:upper:]     #匹配任何大写字母</span><br><span class="line">[:lower:]     #匹配任何小写字母</span><br><span class="line">[:alnum:]     #字母和数字</span><br><span class="line">[:alpha:]     #字母</span><br><span class="line">[:ascii:]     #0-127的ascii字符</span><br><span class="line">[:blank:]     #空格和制表符</span><br><span class="line">[:cntrl:]     #控制字符</span><br><span class="line">[:print:]     #打印字符，包括空格</span><br><span class="line">[:space:]     #空白字符(比/s多个垂直指标)</span><br><span class="line">[:word:]      #单词字符(/w)</span><br><span class="line">[:xdigit:]    #匹配任何16进制数字</span><br></pre></td></tr></table></figure><p>从代码可以看出password必须符合以下条件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &gt;= preg_match(<span class="string">&#x27;/^[[:graph:]]&#123;12,&#125;$/&#x27;</span>, <span class="variable">$password</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Wrong Format&#x27;</span>;</span><br><span class="line">    <span class="keyword">exit</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析：密码可以包含字母数字和字符，长度必须大于等于12位。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$reg</span> = <span class="string">&#x27;/([[:punct:]]+[[:digit:]]+[[:upper:]]+[[:lower:]]+)/&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">6</span> &gt; preg_match_all(<span class="variable">$reg</span>, <span class="variable">$password</span>, <span class="variable">$arr</span>))</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析：密码必须被字符，数字，大写字母，小写字母分割成至少6部分。</span></span><br><span class="line"><span class="comment">比如字符串&quot;http://www.poboke.com&quot;会被分割为7部分：</span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    [0] =&gt; http</span></span><br><span class="line"><span class="comment">    [1] =&gt; ://</span></span><br><span class="line"><span class="comment">    [2] =&gt; www</span></span><br><span class="line"><span class="comment">    [3] =&gt; .</span></span><br><span class="line"><span class="comment">    [4] =&gt; poboke</span></span><br><span class="line"><span class="comment">    [5] =&gt; .</span></span><br><span class="line"><span class="comment">    [6] =&gt; com</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$c</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable">$ps</span> = <span class="keyword">array</span>(<span class="string">&#x27;punct&#x27;</span>, <span class="string">&#x27;digit&#x27;</span>, <span class="string">&#x27;upper&#x27;</span>, <span class="string">&#x27;lower&#x27;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$ps</span> <span class="keyword">as</span> <span class="variable">$pt</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&quot;/[[:<span class="subst">$pt</span>:]]+/&quot;</span>, <span class="variable">$password</span>))</span><br><span class="line">        <span class="variable">$c</span> += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$c</span> &lt; <span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析：密码至少包含字符，数字，大写字母，小写字母中的3个。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&quot;42&quot;</span> == <span class="variable">$password</span>) <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&#x27;Wrong password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析：密码必须等于&quot;42&quot;，才能输出flag。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>既然密码必须等于<code>&quot;42&quot;</code>，那么就和上面密码长度必须大于等于12位矛盾了，所以密码应该是在和<code>&quot;42&quot;</code>做比较的时候被转成了数字。<br>一个字符串，包含了数字、标点、字母，而且会被转成数字，很容易就想到了科学计数法。<br>比如<code>&quot;0.42E+2&quot;</code>表示0.42 * 10^2 = 42。<br><code>&quot;0.42E+2&quot;</code>刚好被各种字符分割成6部分，但是长度小于12，只需要补0就行了。<br>所以密码为<code>&quot;0.4200000E+2&quot;</code>。</p><p>输入后成功通关了：<br><img src="/assets/2015/02/yuebaomei_pass.jpg" class="lazyload placeholder" data-srcset="/assets/2015/02/yuebaomei_pass.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>暂时还不知道奖品是什么，期待中……</p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> CTF比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HCTF网络安全大赛——FuckMe</title>
      <link href="/hctf-network-security-competition-fuckme.html"/>
      <url>/hctf-network-security-competition-fuckme.html</url>
      
        <content type="html"><![CDATA[<p>访问<code>fuckme.php</code>网页，可以看到一大堆平假名和罗马字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">эг いшχせひягяけχのэの, дшёжζёгいχ ягяけχのэの эの ひおё のひζうχ すд ひおё дшёжζёгいχ すд けёひひёшの すш えшすζせの すд けёひひёшの эг я いэせおёшひёπひ. ひおё ыёひおすう эの ζのёう яの яг яэう ひす юшёяくэгえ いけяののэいяけ いэせおёшの.</span><br><span class="line"></span><br><span class="line">дшёжζёгいχ ягяけχのэの эの юяのёう すг ひおё дяいひ ひおяひ, эг ягχ えэθёг のひшёひいお すд ξшэひひёг けягえζяえё, いёшひяэг けёひひёшの ягう いすыюэгяひэすгの すд けёひひёшの すいいζш ξэひお θяшχэгえ дшёжζёгいэёの. ыすшёすθёш, ひおёшё эの я いおяшяいひёшэのひэい うэのひшэюζひэすг すд けёひひёшの ひおяひ эの шすζえおけχ ひおё のяыё дすш яけыすのひ яけけ のяыせけёの すд ひおяひ けягえζяえё. дすш эгのひягいё, えэθёг я のёいひэすг すд ёгえけэのお けягえζяえё, ё, ひ, я ягう す яшё ひおё ыすのひ いすыыすг, ξおэけё ω, ж ягう π яшё шяшё. けэくёξэのё, ひお, ёш, すг, ягう яг яшё ひおё ыすのひ いすыыすг せяэшの すд けёひひёшの (ひёшыёう юэえшяыの すш うэえшяせおの), ягう のの, ёё, ひひ, ягう дд яшё ひおё ыすのひ いすыыすг шёせёяひの.[1] ひおё гすгのёгのё せおшяのё &quot;ёひяすэг のおшうけζ&quot; шёせшёのёгひの ひおё 12 ыすのひ дшёжζёгひ けёひひёшの эг ひχせэいяけ ёгえけэのお けягえζяえё ひёπひ.</span><br><span class="line"></span><br><span class="line">эг のすыё いэせおёшの, のζいお せшすせёшひэёの すд ひおё гяひζшяけ けягえζяえё せけяэгひёπひ яшё せшёのёшθёう эг ひおё いэせおёшひёπひ, ягう ひおёのё せяひひёшгの おяθё ひおё せすひёгひэяけ ひす юё ёπせけすэひёう эг я いэせおёшひёπひ-すгけχ яひひяいく.</span><br><span class="line"></span><br><span class="line">эг я のэыせけё のζюのひэひζひэすг いэせおёш, ёяいお けёひひёш すд ひおё せけяэгひёπひ эの шёせけяいёう ξэひお ягすひおёш, ягう ягχ せяшひэいζけяш けёひひёш эг ひおё せけяэгひёπひ ξэけけ яけξяχの юё ひшягのдすшыёう эгひす ひおё のяыё けёひひёш эг ひおё いэせおёшひёπひ. дすш эгのひягいё, эд яけけ すいいζшшёгいёの すд ひおё けёひひёш ё ひζшг эгひす ひおё けёひひёш π, я いэせおёшひёπひ ыёののяえё いすгひяэгэгえ гζыёшすζの эгのひягいёの すд ひおё けёひひёш π ξすζけう のζええёのひ ひす я いшχせひягяけχのひ ひおяひ π шёせшёのёгひの ё.</span><br><span class="line"></span><br><span class="line">ひおё юяのэい ζのё すд дшёжζёгいχ ягяけχのэの эの ひす дэшのひ いすζгひ ひおё дшёжζёгいχ すд いэせおёшひёπひ けёひひёшの ягう ひおёг яののすいэяひё えζёののёう せけяэгひёπひ けёひひёшの ξэひお ひおёы. ыすшё π&#x27;の эг ひおё いэせおёшひёπひ ひおяг ягχひおэгえ ёけのё のζええёのひの ひおяひ π いすшшёのせすгうの ひす ё эг ひおё せけяэгひёπひ, юζひ ひおэの эの гすひ いёшひяэг; ひ ягう я яшё яけのす θёшχ いすыыすг эг ёгえけэのお, のす π ыэえおひ юё ёэひおёш すд ひおёы яけのす. эひ эの ζгけэくёけχ ひす юё я せけяэгひёπひ ω すш ж ξおэいお яшё けёのの いすыыすг. ひおζの ひおё いшχせひягяけχのひ ыяχ гёёう ひす ひшχ のёθёшяけ いすыюэгяひэすгの すд ыяせせэгえの юёひξёёг いэせおёшひёπひ ягう せけяэгひёπひ けёひひёшの.</span><br><span class="line"></span><br><span class="line">ыすшё いすыせけёπ ζのё すд のひяひэのひэいの いяг юё いすгいёэθёう, のζいお яの いすгのэうёшэгえ いすζгひの すд せяэшの すд けёひひёшの (うэえшяыの), ひшэせけёひの (ひшэえшяыの), ягう のす すг. ひおэの эの うすгё ひす せшすθэうё ыすшё эгдすшыяひэすг ひす ひおё いшχせひягяけχのひ, дすш эгのひягいё, ж ягう ζ гёяшけχ яけξяχの すいいζш ひすえёひおёш эг ひおяひ すшうёш эг ёгえけэのお, ёθёг ひおすζえお ж эひのёけд эの шяшё.</span><br><span class="line"></span><br><span class="line">ひおё дэшのひ くгすξг шёいすшうёう ёπせけягяひэすг すд дшёжζёгいχ ягяけχのэの (эгうёёう, すд ягχ くэгう すд いшχせひягяけχのэの) ξяの えэθёг эг ひおё 9ひお いёгひζшχ юχ яけ-くэгうэ, яг яшяю せすけχыяひお, эг я ыягζのいшэせひ すг うёいэせおёшэгえ いшχせひすえшяせおэい ыёののяえёの.[3] эひ おяの юёёг のζええёのひёう ひおяひ いけすのё ひёπひζяけ のひζうχ すд ひおё жζш&#x27;яг дэшのひ юшすζえおひ ひす けэえおひ ひおяひ яшяюэい おяの я おいひд&#123;ёгфすχχすζшのёけдэгおいひд&#125;.いおяшяいひёшэのひэい けёひひёш дшёжζёгいχ.[4] эひの ζのё のせшёяう, ягう のэыэけяш のχのひёыの ξёшё ξэうёけχ ζのёう эг ёζшすせёяг のひяひёの юχ ひおё ひэыё すд ひおё шёгяэののягいё. юχ 1474, いэいいす のэыすгёひひя おяう ξшэひひёг я ыягζяけ すг うёいэせおёшэгえ ёгいшχせひэすгの すд けяひэг ягう эひяけэяг ひёπひ.[5] яшяюэい けёひひёш дшёжζёгいχ ягう я うёひяэけёう のひζうχ すд けёひひёш ягう ξすшう дшёжζёгいχ ягяけχのэの すд ひおё ёгひэшё юすすく すд жζш&#x27;яг яшё せшすθэうёう юχ эгひёけけяшёг яшひэいけёの.</span><br><span class="line"></span><br><span class="line">я うэのяうθягひяえё すд яけけ ひおёのё яひひёыせひの ひす うёдёяひ дшёжζёгいχ いすζгひэгえ яひひяいくの эの ひおяひ эひ эгいшёяのёの いすыせけэいяひэすг すд юすひお ёгいэせおёшэгえ ягう うёいэせおёшэгえ, けёяうэгえ ひす ыэのひяくёの. дяыすζのけχ, я юшэひэのお дすшёэえг のёいшёひяшχ эの のяэう ひす おяθё шёфёいひёう ひおё せけяχдяэш いэせおёш юёいяζのё, ёθёг эд のいおすすけ юすχの いすζけう いすせё のζいいёののдζけけχ яの ξおёяひのひすгё ягう せけяχдяэш おяう のおすξг, &quot;すζш яひひяいおéの いすζけう гёθёш けёяшг эひ!&quot;.</span><br><span class="line"></span><br><span class="line">ひおё шすひすш ыяいおэгёの すд ひおё дэшのひ おяけд すд ひおё 20ひお いёгひζшχ (дすш ёπяыせけё, ひおё ёгэえыя ыяいおэгё) ξёшё ёののёгひэяけけχ эыыζгё ひす のひшяэえおひдすшξяшう дшёжζёгいχ ягяけχのэの. おすξёθёш, すひおёш くэгうの すд ягяけχのэの (&quot;яひひяいくの&quot;) のζいいёののдζけけχ うёいすうёう ыёののяえёの дшすы のすыё すд ひおすのё ыяいおэгёの. けёひひёш дшёжζёгいэёの эг のせягэのお.</span><br><span class="line"></span><br><span class="line">дшёжζёгいχ ягяけχのэの шёжζэшёの すгけχ я юяのэい ζгうёшのひягうэгえ すд ひおё のひяひэのひэいの すд ひおё せけяэгひёπひ けягえζяえё ягう のすыё せшすюけёы のすけθэгえ のくэけけの, ягう, эд せёшдすшыёう юχ おягう, ひすけёшягいё дすш ёπひёгのэθё けёひひёш юすすくくёёせэгえ. うζшэгえ ξすшけう ξяш ээ (ξξээ), юすひお ひおё юшэひэのお ягう ひおё яыёшэいягの шёいшζэひёう いすうёюшёяくёшの юχ せけяいэгえ いшすののξすшう せζωωけёの эг ыяфすш гёξのせяせёшの ягう шζггэгえ いすгひёのひの дすш ξおす いすζけう のすけθё ひおёы ひおё дяのひёのひ. のёθёшяけ すд ひおё いэせおёшの ζのёう юχ ひおё яπэの せすξёшの ξёшё юшёяくяюけё ζのэгえ дшёжζёгいχ ягяけχのэの, дすш ёπяыせけё, のすыё すд ひおё いすгのζけяш いэせおёшの ζのёう юχ ひおё фяせягёのё. ыёいおягэいяけ ыёひおすうの すд けёひひёш いすζгひэгえ ягう のひяひэのひэいяけ ягяけχのэの (えёгёшяけけχ эюы いяшう ひχせё ыяいおэгёшχ) ξёшё дэшのひ ζのёう эг ξξээ, せすののэюけχ юχ ひおё ζの яшыχ&#x27;の のэの. ひすうяχ, ひおё おяшう ξすшく すд けёひひёш いすζгひэгえ ягう ягяけχのэの おяの юёёг шёせけяいёう юχ いすыせζひёш のすдひξяшё, ξおэいお いяг いяшшχ すζひ のζいお ягяけχのэの эг のёいすгうの. ξэひお ыすうёшг いすыせζひэгえ せすξёш, いけяののэいяけ いэせおёшの яшё ζгけэくёけχ ひす せшすθэうё ягχ шёяけ せшすひёいひэすг дすш いすгдэうёгひэяけ うяひя.</span><br></pre></td></tr></table></figure><p>搜索<code>&quot;&#123;&quot;</code>，发现了一个字符串<code>&quot;おいひд&#123;ёгфすχχすζшのёけдэгおいひд&#125;&quot;</code>，格式符合<code>hctf&#123;...&#125;</code>。<br>可以猜测明文用了换字加密的方法替换成了别的字符。</p><p>在很久以前，破解换字加密是使用统计词频的方法，推理小说的开山鼻祖<code>埃德加·爱伦·坡</code>就在他的短篇小说《金甲虫》里利用词频和推理的方法破解了一张羊皮上的密码。在英文里最常见的字母是<code>e</code>，按照使用多少的次序排列是：<code>eaoidhnrstuycfglmwbkpqxz</code>。</p><p>不过现在破解换字加密比较快速的方法是暴力破解，通过遍历英文单词表，可以快速地得出结果。现在已经有软件实现了这个功能，在使用之前需要要先把这些特殊字符替换成英文字母。</p><p>先把上面的密文保存到<code>clipher.txt</code>文件里，编码为<code>utf-8</code>，再执行下面的python代码就可以把密文转成英文字母：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取密文</span></span><br><span class="line">ciphertext = <span class="built_in">open</span>(<span class="string">&quot;clipher.txt&quot;</span>).read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取去除ascii字符外的密文字符集</span></span><br><span class="line">charset = <span class="built_in">set</span>(ciphertext) - <span class="built_in">set</span>(string.printable)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将加密的字符作为key，英文字母作为value拼成字典</span></span><br><span class="line">dictionary = <span class="built_in">dict</span>(<span class="built_in">zip</span>(charset, string.letters))</span><br><span class="line"></span><br><span class="line"><span class="comment">#将加密的字符替换成英文字母</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dictionary:</span><br><span class="line">    ciphertext = ciphertext.replace(key, dictionary[key])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ciphertext)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pc amjvzqcqsjypy, dmwbewcaj qcqsjypy py zow yzekj ud zow dmwbewcaj ud swzzwmy um Amuevy ud swzzwmy pc q apvowmzwhz. zow nwzouk py eywk qy qc qpk zu rmwqtpcA asqyypaqs apvowmy.</span><br><span class="line"></span><br><span class="line">dmwbewcaj qcqsjypy py rqywk uc zow dqaz zoqz, pc qcj Apfwc yzmwzao ud gmpzzwc sqcAeqAw, awmzqpc swzzwmy qck aunrpcqzpucy ud swzzwmy uaaem gpzo fqmjpcA dmwbewcapwy. numwufwm, zowmw py q aoqmqazwmpyzpa kpyzmprezpuc ud swzzwmy zoqz py mueAosj zow yqnw dum qsnuyz qss yqnvswy ud zoqz sqcAeqAw. dum pcyzqcaw, Apfwc q ywazpuc ud wcAspyo sqcAeqAw, w, z, q qck u qmw zow nuyz aunnuc, gopsw l, b qck h qmw mqmw. sptwgpyw, zo, wm, uc, qck qc qmw zow nuyz aunnuc vqpmy ud swzzwmy (zwmnwk rpAmqny um kpAmqvoy), qck yy, ww, zz, qck dd qmw zow nuyz aunnuc mwvwqzy.[1] zow cucywcyw vomqyw &quot;wzqupc yomkse&quot; mwvmwywczy zow 12 nuyz dmwbewcz swzzwmy pc zjvpaqs wcAspyo sqcAeqAw zwhz.</span><br><span class="line"></span><br><span class="line">pc yunw apvowmy, yeao vmuvwmzpwy ud zow cqzemqs sqcAeqAw vsqpczwhz qmw vmwywmfwk pc zow apvowmzwhz, qck zowyw vqzzwmcy oqfw zow vuzwczpqs zu rw whvsupzwk pc q apvowmzwhz-ucsj qzzqat.</span><br><span class="line"></span><br><span class="line">pc q ypnvsw yeryzpzezpuc apvowm, wqao swzzwm ud zow vsqpczwhz py mwvsqawk gpzo qcuzowm, qck qcj vqmzpaesqm swzzwm pc zow vsqpczwhz gpss qsgqjy rw zmqcydumnwk pczu zow yqnw swzzwm pc zow apvowmzwhz. dum pcyzqcaw, pd qss uaaemmwcawy ud zow swzzwm w zemc pczu zow swzzwm h, q apvowmzwhz nwyyqAw auczqpcpcA cenwmuey pcyzqcawy ud zow swzzwm h guesk yeAAwyz zu q amjvzqcqsjyz zoqz h mwvmwywczy w.</span><br><span class="line"></span><br><span class="line">zow rqypa eyw ud dmwbewcaj qcqsjypy py zu dpmyz auecz zow dmwbewcaj ud apvowmzwhz swzzwmy qck zowc qyyuapqzw Aewyywk vsqpczwhz swzzwmy gpzo zown. numw h&#x27;y pc zow apvowmzwhz zoqc qcjzopcA wsyw yeAAwyzy zoqz h aummwyvucky zu w pc zow vsqpczwhz, rez zopy py cuz awmzqpc; z qck q qmw qsyu fwmj aunnuc pc wcAspyo, yu h npAoz rw wpzowm ud zown qsyu. pz py ecsptwsj zu rw q vsqpczwhz l um b gopao qmw swyy aunnuc. zoey zow amjvzqcqsjyz nqj cwwk zu zmj ywfwmqs aunrpcqzpucy ud nqvvpcAy rwzgwwc apvowmzwhz qck vsqpczwhz swzzwmy.</span><br><span class="line"></span><br><span class="line">numw aunvswh eyw ud yzqzpyzpay aqc rw aucawpfwk, yeao qy aucypkwmpcA aueczy ud vqpmy ud swzzwmy (kpAmqny), zmpvswzy (zmpAmqny), qck yu uc. zopy py kucw zu vmufpkw numw pcdumnqzpuc zu zow amjvzqcqsjyz, dum pcyzqcaw, b qck e cwqmsj qsgqjy uaaem zuAwzowm pc zoqz umkwm pc wcAspyo, wfwc zoueAo b pzywsd py mqmw.</span><br><span class="line"></span><br><span class="line">zow dpmyz tcugc mwaumkwk whvsqcqzpuc ud dmwbewcaj qcqsjypy (pckwwk, ud qcj tpck ud amjvzqcqsjypy) gqy Apfwc pc zow 9zo awczemj rj qs-tpckp, qc qmqr vusjnqzo, pc q nqceyampvz uc kwapvowmpcA amjvzuAmqvopa nwyyqAwy.[3] pz oqy rwwc yeAAwyzwk zoqz asuyw zwhzeqs yzekj ud zow bem&#x27;qc dpmyz rmueAoz zu spAoz zoqz qmqrpa oqy q oazd&#123;wciujjuemywsdpcoazd&#125;.aoqmqazwmpyzpa swzzwm dmwbewcaj.[4] pzy eyw yvmwqk, qck ypnpsqm yjyzwny gwmw gpkwsj eywk pc wemuvwqc yzqzwy rj zow zpnw ud zow mwcqpyyqcaw. rj 1474, apaau ypnucwzzq oqk gmpzzwc q nqceqs uc kwapvowmpcA wcamjvzpucy ud sqzpc qck pzqspqc zwhz.[5] qmqrpa swzzwm dmwbewcaj qck q kwzqpswk yzekj ud swzzwm qck gumk dmwbewcaj qcqsjypy ud zow wczpmw ruut ud bem&#x27;qc qmw vmufpkwk rj pczwssqmwc qmzpaswy.</span><br><span class="line"></span><br><span class="line">q kpyqkfqczqAw ud qss zowyw qzzwnvzy zu kwdwqz dmwbewcaj aueczpcA qzzqaty py zoqz pz pcamwqywy aunvspaqzpuc ud ruzo wcapvowmpcA qck kwapvowmpcA, swqkpcA zu npyzqtwy. dqnueysj, q rmpzpyo dumwpAc ywamwzqmj py yqpk zu oqfw mwiwazwk zow vsqjdqpm apvowm rwaqeyw, wfwc pd yaouus rujy auesk auvw yeaawyydessj qy gowqzyzucw qck vsqjdqpm oqk yougc, &quot;uem qzzqaoxy auesk cwfwm swqmc pz!&quot;.</span><br><span class="line"></span><br><span class="line">zow muzum nqaopcwy ud zow dpmyz oqsd ud zow 20zo awczemj (dum whqnvsw, zow wcpAnq nqaopcw) gwmw wyywczpqssj pnnecw zu yzmqpAozdumgqmk dmwbewcaj qcqsjypy. ougwfwm, uzowm tpcky ud qcqsjypy (&quot;qzzqaty&quot;) yeaawyydessj kwaukwk nwyyqAwy dmun yunw ud zouyw nqaopcwy. swzzwm dmwbewcapwy pc yvqcpyo.</span><br><span class="line"></span><br><span class="line">dmwbewcaj qcqsjypy mwbepmwy ucsj q rqypa eckwmyzqckpcA ud zow yzqzpyzpay ud zow vsqpczwhz sqcAeqAw qck yunw vmurswn yusfpcA ytpssy, qck, pd vwmdumnwk rj oqck, zuswmqcaw dum whzwcypfw swzzwm ruuttwwvpcA. kempcA gumsk gqm pp (ggpp), ruzo zow rmpzpyo qck zow qnwmpaqcy mwamepzwk aukwrmwqtwmy rj vsqapcA amuyygumk vellswy pc nqium cwgyvqvwmy qck meccpcA auczwyzy dum gou auesk yusfw zown zow dqyzwyz. ywfwmqs ud zow apvowmy eywk rj zow qhpy vugwmy gwmw rmwqtqrsw eypcA dmwbewcaj qcqsjypy, dum whqnvsw, yunw ud zow aucyesqm apvowmy eywk rj zow iqvqcwyw. nwaoqcpaqs nwzouky ud swzzwm aueczpcA qck yzqzpyzpaqs qcqsjypy (Awcwmqssj prn aqmk zjvw nqaopcwmj) gwmw dpmyz eywk pc ggpp, vuyyprsj rj zow ey qmnj&#x27;y ypy. zukqj, zow oqmk gumt ud swzzwm aueczpcA qck qcqsjypy oqy rwwc mwvsqawk rj aunvezwm yudzgqmw, gopao aqc aqmmj uez yeao qcqsjypy pc ywaucky. gpzo nukwmc aunvezpcA vugwm, asqyypaqs apvowmy qmw ecsptwsj zu vmufpkw qcj mwqs vmuzwazpuc dum aucdpkwczpqs kqzq. </span><br></pre></td></tr></table></figure><p>然后<a href="http://windows.lisisoft.com/apps/594339-decrypto-for-linux.html">下载Decrypto软件</a>，该软件会自动通过英文字典暴力破解密文。<br>解压后cd到该目录，执行<code>java -jar decrypto.jar</code>命令就可以运行了。</p><p>把密文粘贴到<code>Cipher Text</code>文本框里，点击<kbd>Solve</kbd>按钮就可以得出结果了：<br><img src="/assets/2014/11/fuckme_decrypto.png" class="lazyload placeholder" data-srcset="/assets/2014/11/fuckme_decrypto.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>在明文里可以找到key：<code>hctf&#123;enjoyyourselfinhctf&#125;</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> CTF比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XDCTF网络安全大赛——Web100</title>
      <link href="/2014-xdctf-network-security-competition-web100.html"/>
      <url>/2014-xdctf-network-security-competition-web100.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、数据分析"><a href="#一、数据分析" class="headerlink" title="一、数据分析"></a>一、数据分析</h3><p>访问答题网页，网页中显示了一张图片，图片名为<code>hackkey.png</code>：<br><img src="http://i2.tietuku.com/62d35b1b76f95c1e.png" class="lazyload placeholder" data-srcset="http://i2.tietuku.com/62d35b1b76f95c1e.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"> </p><p>还有一段文字：</p><blockquote><p>话说，攻防，到底是先有攻还是先有防，到底有没有绝对的安全与绝对的不安全，仁者见仁智者见智，这不,杀软开始欺负一些工具流，但牛牛都不怕，他们总是有办法，道高一尺魔高一丈，你知道他们怎么过杀软的吗?找到key,你就明白了……………</p></blockquote><p>查看网页源码，发现有一段html注释：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;center&gt;&lt;img src=&quot;src/2328266727 .png&quot;&gt;&lt;/img&gt;&lt;/center&gt;!--&gt;</span></span><br></pre></td></tr></table></figure><p>访问注释里的图片，可以看到一张二维码图片：<br><img src="/assets/2014/10/hackkey_qrcode.png" class="lazyload placeholder" data-srcset="/assets/2014/10/hackkey_qrcode.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>扫码后发现是一个网址：<code>http://mp.weixin.qq.com/s?\_\_biz=MjM5Njc3NjM4MA==&amp;mid=200689499&amp;idx=2&amp;sn=76a5cb177facf0ca76dfcc2db7e135cf#rdRGB</code>。</p><p>访问网址后可以看到一篇文章：<a href="http://mp.weixin.qq.com/s?__biz=MjM5Njc3NjM4MA==&mid=200689499&idx=2&sn=76a5cb177facf0ca76dfcc2db7e135cf#rdRGB">《【牛技术】恶意软件采用密写 把代码隐藏在图片中》</a>，文章里有这么一段文字：</p><blockquote><p>“潜伏”主要任务是一个下载器，用来下载后续的恶意代码，用来搭建一个进行点击欺诈的僵尸网络。“潜伏“的DLL资源区域带有一个BMP位图。而“潜伏”把恶意代码的URL放在了每个像素的颜色字节的最低位上。</p></blockquote><p>所以可以猜测，key很有可能就藏在<code>hackkey.png</code>的像素颜色值的最低位上。</p><h3 id="二、手动解密"><a href="#二、手动解密" class="headerlink" title="二、手动解密"></a>二、手动解密</h3><p>可以用Python来获取图片的所有颜色值，并把所有颜色值的最低位提取出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">&quot;hack.jpg&quot;</span>)</span><br><span class="line">width, height = image.size</span><br><span class="line"></span><br><span class="line">binary_string = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">        <span class="comment">#获取坐标(x, y)处的颜色值</span></span><br><span class="line">        r, g, b = image.getpixel((x, y))</span><br><span class="line">        color = (r &lt;&lt; <span class="number">16</span>) + (g &lt;&lt; <span class="number">8</span>) + b</span><br><span class="line"></span><br><span class="line">        <span class="comment">#获取颜色二进制值的最后一位</span></span><br><span class="line">        last_bit = <span class="built_in">str</span>(<span class="built_in">bin</span>(color))[-<span class="number">1</span>]</span><br><span class="line">        binary_string += last_bit</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(binary_string)</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">010110000110010000100100011001010100001101000000001100100110111100110001001101000000000000000000000000000000000000000000000......</span><br></pre></td></tr></table></figure><p>可见，开头有几十个颜色位隐藏了一些信息，后面的都是0说明没数据。 再将二进制数据转成字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="comment">#将2进制字符串转成16进制字符串</span></span><br><span class="line">hex_string = <span class="string">&quot;%x&quot;</span>%(<span class="built_in">int</span>(binary_string, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#截取偶数个字符，因为字符是奇数会报错</span></span><br><span class="line">hex_string = hex_string[ : <span class="built_in">len</span>(hex_string) / <span class="number">2</span> * <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出16进制值对应的字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;key :&quot;</span>, binascii.a2b_hex(hex_string))</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key : Xd$eC@2o14</span><br></pre></td></tr></table></figure><h3 id="三、自动解密"><a href="#三、自动解密" class="headerlink" title="三、自动解密"></a>三、自动解密</h3><p>如果觉得代码比较麻烦的话，也可以使用图片隐写解码神器<code>StegSolve</code>来找出图片中隐藏的信息，下载地址为：<br><code>http://www.caesum.com/handbook/Stegsolve.jar</code></p><p>用终端执行<code>java -jar Stegsolve.jar</code>运行<code>StegSolve</code>，点击<kbd>File</kbd>按钮载入图片，然后点击<kbd>Analyse</kbd> – <kbd>Data Exreact</kbd>，出现以下界面。  </p><p>在<code>Bit Planes</code>里勾上<code>Blue</code>的第0位，再点击<kbd>Preview</kbd>按钮，就可以看到蓝色最低位组合成的字符：<br><img src="/assets/2014/10/hackkey_stegsolve.png" class="lazyload placeholder" data-srcset="/assets/2014/10/hackkey_stegsolve.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> CTF比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字母算术的Python算法</title>
      <link href="/python-solve-alphametics.html"/>
      <url>/python-solve-alphametics.html</url>
      
        <content type="html"><![CDATA[<p>据说Google出过一道题目：WWWDOT - GOOGLE = DOTCOM。<br>其中每个字母代表一个数字，数字不能重复，而且最高位的数字不能为0。</p><p>像这样的谜题被称为cryptarithms或者字母算术(alphametics)。字母可以拼出实际的单词，而如果你把每一个字母都用0–9中的某一个数字代替后, 也同样可以拼出一个算术等式。关键的地方是找出每个字母都映射到了哪个数字。每个字母所有出现的地方都必须映射到同一个数字，数字不能重复, 并且“单词”不能以0开始。</p><p>最著名的字母算术谜题是SEND + MORE = MONEY。</p><p>Raymond Hettinger写过一个令人难以置信的Python程序，这个程序只用14行代码来解决任何字母算术谜题。<br>代码见：<a href="http://woodpecker.org.cn/diveintopython3/advanced-iterators.html">http://woodpecker.org.cn/diveintopython3/advanced-iterators.html</a></p><p>不过该代码是python 3.x版本的，下面是我改过的可以在2.x版运行的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># Copyright (c) 2009, Raymond Hettinger, All rights reserved.</span></span><br><span class="line"><span class="comment"># Ported to Python 2.x and modified by poboke.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">puzzle</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#匹配出所有字母，转为大写</span></span><br><span class="line">    words = re.findall(<span class="string">&#x27;[A-Z]+&#x27;</span>, puzzle.upper())</span><br><span class="line"></span><br><span class="line">    <span class="comment">#将字母放到集合里</span></span><br><span class="line">    unique_chars = <span class="built_in">set</span>(<span class="string">&#x27;&#x27;</span>.join(words))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#因为数字只有10个，所以如果字母大于10个就会出错</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(unique_chars) &lt;= <span class="number">10</span>, <span class="string">&#x27;Too many letters&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#将式子的首字母排到前面，方便判断首字母是否为0</span></span><br><span class="line">    first_letters = &#123;word[<span class="number">0</span>] <span class="keyword">for</span> word <span class="keyword">in</span> words&#125;</span><br><span class="line">    n = <span class="built_in">len</span>(first_letters)</span><br><span class="line">    sorted_chars = <span class="string">&#x27;&#x27;</span>.join(first_letters) + \</span><br><span class="line">        <span class="string">&#x27;&#x27;</span>.join(unique_chars - first_letters)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#所有数字</span></span><br><span class="line">    digits = <span class="string">&#x27;0123456789&#x27;</span></span><br><span class="line">    zero = digits[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取所有数字的全排列</span></span><br><span class="line">    <span class="keyword">for</span> guess <span class="keyword">in</span> itertools.permutations(digits, <span class="built_in">len</span>(sorted_chars)):</span><br><span class="line"></span><br><span class="line">        <span class="comment">#所有式子的首字母都不能为0</span></span><br><span class="line">        <span class="keyword">if</span> zero <span class="keyword">not</span> <span class="keyword">in</span> guess[:n]:</span><br><span class="line"></span><br><span class="line">            <span class="comment">#将字母替换为数字</span></span><br><span class="line">            trans = string.maketrans(sorted_chars, <span class="string">&#x27;&#x27;</span>.join(guess))</span><br><span class="line">            equation = puzzle.translate(trans)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#如果数字式子的计算结果正确</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">eval</span>(equation):</span><br><span class="line">                <span class="built_in">print</span> equation</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    <span class="keyword">for</span> puzzle <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</span><br><span class="line">        <span class="built_in">print</span>(puzzle)</span><br><span class="line">        solve(puzzle)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ python alphametics.py &quot;WWWDOT - GOOGLE == DOTCOM&quot;</span><br><span class="line">WWWDOT - GOOGLE == DOTCOM</span><br><span class="line">777589 - 188103 == 589486</span><br><span class="line">777589 - 188106 == 589483</span><br><span class="line"></span><br><span class="line">$ python alphametics.py &quot;WWWDOT - POBOKE == DOTCOM&quot;</span><br><span class="line">WWWDOT - POBOKE == DOTCOM</span><br><span class="line">666435 - 231397 == 435038</span><br><span class="line">666435 - 231398 == 435037</span><br><span class="line">666180 - 485893 == 180287</span><br><span class="line">666180 - 485897 == 180283</span><br><span class="line"></span><br><span class="line">$ python alphametics.py &quot;SEND + MORE == MONEY&quot;</span><br><span class="line">SEND + MORE == MONEY</span><br><span class="line">9567 + 1085 == 10652</span><br><span class="line"></span><br><span class="line">$ python alphametics.py &quot;SIX + SEVEN + SEVEN == TWENTY&quot;</span><br><span class="line">SIX + SEVEN + SEVEN == TWENTY</span><br><span class="line">650 + 68782 + 68782 == 138214</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清除iOS工程里未使用的图片</title>
      <link href="/clear-ios-project-unused-pics.html"/>
      <url>/clear-ios-project-unused-pics.html</url>
      
        <content type="html"><![CDATA[<p>一个iOS工程经过多次改版之后，往往有很多废弃的图片没有清理掉，如果清理掉这些图片就可以让ipa包的体积大大减小。<br>我做的项目里有700多张图片，其中没用到的就有200多张，所以清理图片还是很有必要的。</p><p>一般iOS项目的目录结构大致如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/Users/Jobs/Documents/Poboke      //项目文件夹</span><br><span class="line">│</span><br><span class="line">├── Poboke.xcodeproj        //工程启动文件</span><br><span class="line">│</span><br><span class="line">└── Poboke                  //资源文件夹</span><br><span class="line">    ├── main.m</span><br><span class="line">    ├── AppDelegate.h</span><br><span class="line">    ├── AppDelegate.m</span><br><span class="line">    ├── ViewController.h    //代码文件</span><br><span class="line">    ├── ViewController.m</span><br><span class="line">    ├── Poboke-Info.plist</span><br><span class="line">    ├── Poboke-Prefix.pch</span><br><span class="line">    │</span><br><span class="line">    ├── Icon.png</span><br><span class="line">    ├── Icon@2x.png</span><br><span class="line">    ├── Icon-60@2x.png</span><br><span class="line">    ├── button.png</span><br><span class="line">    ├── button@2x.png       //图片文件</span><br><span class="line">    ├── dialog.png</span><br><span class="line">    ├── dialog@2x.png</span><br><span class="line">    ├── line@2x.png</span><br><span class="line">    └── ......</span><br></pre></td></tr></table></figure><h3 id="一、安装Silver-Searcher"><a href="#一、安装Silver-Searcher" class="headerlink" title="一、安装Silver Searcher"></a>一、安装Silver Searcher</h3><p>在linux系统里可以使用<code>ack-grep</code>命令来搜索内容，但是MacOS系统里没有<code>ack-grep</code>。<br>不过MacOS系统可以安装<code>Silver Searcher</code>来搜索字符串，使用方法和<code>ack-grep</code>相似，而且搜索速度比<code>ack-grep</code>快。</p><p>打开终端，输入以下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先安装homebrew</span></span><br><span class="line">ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#再安装Silver Searcher</span></span><br><span class="line">brew install the_silver_searcher</span><br></pre></td></tr></table></figure><p>安装完后就可以通过<code>ag</code>命令(<code>ack-grep</code>的缩写)来搜索字符串了。</p><h3 id="二、搜索iOS工程里没用到的图片"><a href="#二、搜索iOS工程里没用到的图片" class="headerlink" title="二、搜索iOS工程里没用到的图片"></a>二、搜索iOS工程里没用到的图片</h3><p>iOS的图片分为标清和高清两种，高清图片的名字是以<code>&quot;@2x&quot;</code>结尾的。一般代码里不会写上<code>&quot;@2x&quot;</code>，所以搜索时要先把<code>&quot;@2x&quot;</code>去掉。如果搜索到的结果为空字符串，说明代码里没有引用该图片。  </p><p>获取到所有未使用的图片名，排序后保存到<code>pics.txt</code>文件里，Python代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"><span class="comment">#资源路径</span></span><br><span class="line">path = <span class="string">&#x27;/Users/Jobs/Documents/Poboke/Poboke&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取资源路径下所有的png图片名</span></span><br><span class="line">pics = glob.glob1(path, <span class="string">&#x27;*.png&#x27;</span>)</span><br><span class="line">pics = [pic[:-<span class="number">4</span>].replace(<span class="string">&#x27;@2x&#x27;</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">for</span> pic <span class="keyword">in</span> pics]</span><br><span class="line"></span><br><span class="line"><span class="comment">#找出未使用的图片</span></span><br><span class="line">unused_pics = []</span><br><span class="line"><span class="keyword">for</span> pic <span class="keyword">in</span> <span class="built_in">set</span>(pics):</span><br><span class="line">    command = <span class="string">&#x27;ag &quot;%s&quot; %s&#x27;</span>%(pic, path)</span><br><span class="line">    result = os.popen(command).read()</span><br><span class="line">    <span class="keyword">if</span> result == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        unused_pics.append(pic)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将未使用的图片文件名保存到文本</span></span><br><span class="line">txt_path = <span class="string">&#x27;pics.txt&#x27;</span></span><br><span class="line">txt = <span class="string">&#x27;\n&#x27;</span>.join(<span class="built_in">sorted</span>(unused_pics))</span><br><span class="line">os.system(<span class="string">&#x27;echo &quot;%s&quot; &gt; %s&#x27;</span>%(txt, txt_path))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Done!&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="三、手动检查图片名"><a href="#三、手动检查图片名" class="headerlink" title="三、手动检查图片名"></a>三、手动检查图片名</h3><p>把图片名保存到文本里是为了先确认一下是否有误搜到的图片。</p><p>比如搜到了这么几张未使用的图片：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">star_01.png</span><br><span class="line">star_02.png</span><br><span class="line">star_03.png</span><br><span class="line">star_04.png</span><br></pre></td></tr></table></figure><p>而代码是这么写的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; ++i) &#123;</span><br><span class="line">    NSString *imageName = [NSString stringWithFormat:@<span class="string">&quot;star_%02i&quot;</span>, i];</span><br><span class="line">    UIImage *image = [UIImage imageNamed:imageName];</span><br><span class="line">    <span class="comment">#......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在代码里肯定搜索不到<code>&quot;star_01&quot;</code>，而实际上用到了这张图片。<br>所以需要看文本里的图片名有没有含有连续数字，有的话在工程里手动搜索一下关键代码。<br>如果发现用到图片的话，就手动将图片名从文本里删掉。</p><h3 id="四、批量删除图片"><a href="#四、批量删除图片" class="headerlink" title="四、批量删除图片"></a>四、批量删除图片</h3><p>用Python代码读取<code>pics.txt</code>的内容，将里面的图片删掉，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment">#资源路径</span></span><br><span class="line">path = <span class="string">&#x27;/Users/Jobs/Documents/Poboke/Poboke&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取要删除的图片名</span></span><br><span class="line">txt_path = <span class="string">&#x27;pics.txt&#x27;</span></span><br><span class="line">pics = <span class="built_in">open</span>(txt_path).readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除标清和高清图片</span></span><br><span class="line"><span class="keyword">for</span> pic <span class="keyword">in</span> pics:</span><br><span class="line">    pic = pic.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    sd_pic = path + pic + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">    hd_pic = path + pic + <span class="string">&#x27;@2x.png&#x27;</span></span><br><span class="line"></span><br><span class="line">    os.system(<span class="string">&#x27;rm &quot;%s&quot;&#x27;</span>%sd_pic)</span><br><span class="line">    os.system(<span class="string">&#x27;rm &quot;%s&quot;&#x27;</span>%hd_pic)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Done!&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用锚点优雅地开发iOS</title>
      <link href="/use-the-anchor-point-in-ios-development.html"/>
      <url>/use-the-anchor-point-in-ios-development.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、坐标系"><a href="#一、坐标系" class="headerlink" title="一、坐标系"></a>一、坐标系</h3><p>做iOS开发时，有很多东西都用不惯，比如没有单独设置View的位置和大小的方法，而要把位置和大小一起初始化，感觉有点麻烦。<br>在Cocos2d里就非常方便，因为Cocos2d的锚点可以很方便地设置子视图的位置，而iOS里没有锚点这个概念。<br>所以我把Cocos2d的锚点移植到了iOS里，并做了一些修改，使其成为了有着iOS特色的锚点。</p><p>Cocos2d里采用OpenGL ES坐标系，坐标原点在屏幕左下角。而iOS采用的是Quartz 2D坐标系，坐标原点在屏幕左上角。<br>在Cocos2d和iOS中分别把视图的坐标点设为(10,10)，结果如下：<br><img src="/assets/2014/07/anchor_coordinate.png" class="lazyload placeholder" data-srcset="/assets/2014/07/anchor_coordinate.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>因为Cocos2d的视图是以视图的中心位置设置坐标点的，而iOS的视图是以左上角设置坐标点的。</p><h3 id="二、锚点的概念"><a href="#二、锚点的概念" class="headerlink" title="二、锚点的概念"></a>二、锚点的概念</h3><p>那么什么是锚点呢？下面以一个例子来说明：<br>比如要创建以下两个视图，橙色视图是蓝色视图的子视图，蓝色视图左上角在坐标(5,4)处，而橙色视图右边和蓝色视图对齐，有一半的高度处于蓝色视图外面：<br><img src="/assets/2014/07/anchor_frame.png" class="lazyload placeholder" data-srcset="/assets/2014/07/anchor_frame.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>按照iOS标准的创建视图的写法可以这样写代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIView</span> *blueView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">5</span>, <span class="number">4</span>, W, H)];</span><br><span class="line">blueView.backgroundColor = [<span class="built_in">UIColor</span> blueColor];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:blueView];</span><br><span class="line"></span><br><span class="line"><span class="built_in">UIView</span> *orangeView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="built_in">CGRectMake</span>(W-w, H-h/<span class="number">2</span>, w, h)];</span><br><span class="line">orangeView.backgroundColor = [<span class="built_in">UIColor</span> orangeColor];</span><br><span class="line">[blueView addSubview:orangeView];</span><br></pre></td></tr></table></figure><p>可以看到创建视图时就要计算视图左上角的坐标，非常麻烦。</p><p>而使用了锚点的代码可以这样写：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIView</span> *blueView = [[<span class="built_in">UIView</span> alloc] initWithSize:<span class="built_in">CGSizeMake</span>(W, H)];</span><br><span class="line">[blueView setPosition:<span class="built_in">CGPointMake</span>(<span class="number">5</span>, <span class="number">4</span>) atAnchorPoint:<span class="built_in">CGPointMake</span>(<span class="number">0</span>, <span class="number">0</span>)];</span><br><span class="line">blueView.backgroundColor = [<span class="built_in">UIColor</span> blueColor];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:blueView];</span><br><span class="line"></span><br><span class="line"><span class="built_in">UIView</span> *orangeView = [[<span class="built_in">UIView</span> alloc] initWithSize:<span class="built_in">CGSizeMake</span>(w, h)];</span><br><span class="line">[orangeView setPosition:<span class="built_in">CGPointMake</span>(W, H) atAnchorPoint:<span class="built_in">CGPointMake</span>(<span class="number">1</span>, <span class="number">0.5</span>)];</span><br><span class="line">orangeView.backgroundColor = [<span class="built_in">UIColor</span> orangeColor];</span><br><span class="line">[blueView addSubview:orangeView];</span><br></pre></td></tr></table></figure><p>可见代码十分优雅，一开始先初始化视图大小，然后再设置视图的位置。</p><p>橙色视图的坐标点是(W, H)，锚点是(1, 0.5)，通过这两个点就可以设置视图的准确位置了，根本就不用去计算橙色视图的左上角的坐标(W - w, H - h/2)。</p><blockquote><p>可以这样说：锚点是子视图用来设置位置的一个定位点，使用锚点就不会用子视图的宽高参与计算，省去了麻烦的计算，从而让代码更优雅。</p></blockquote><h3 id="三、锚点的取值范围"><a href="#三、锚点的取值范围" class="headerlink" title="三、锚点的取值范围"></a>三、锚点的取值范围</h3><p>从下图可知，锚点的取值范围是[0, 1]：<br><img src="/assets/2014/07/anchor_point.png" class="lazyload placeholder" data-srcset="/assets/2014/07/anchor_point.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>设置一个子视图的坐标时，锚点(0, 0)表示把子视图的左上角放到该坐标的位置，锚点(0.5, 0.5)表示把子视图的中点放到该坐标的位置。</p><h3 id="四、源码下载"><a href="#四、源码下载" class="headerlink" title="四、源码下载"></a>四、源码下载</h3><p>通过<code>Category</code>为UIView添加设置锚点的方法，让所有View的子类就可以使用该方法。</p><p>可以在<a href="https://github.com/poboke/OCElegant">https://github.com/poboke/OCElegant</a>下载该代码。</p><p>将<code>UIView+Frame</code>类添加到工程里即可，这个类里面还定义了一些获取和设置View的大小和位置的方法，比如设置锚点的方法：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setPosition:(<span class="built_in">CGPoint</span>)point atAnchorPoint:(<span class="built_in">CGPoint</span>)anchorPoint</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> x = point.x - anchorPoint.x * <span class="keyword">self</span>.width;</span><br><span class="line">    <span class="built_in">CGFloat</span> y = point.y - anchorPoint.y * <span class="keyword">self</span>.height;</span><br><span class="line">    [<span class="keyword">self</span> setOrigin:<span class="built_in">CGPointMake</span>(x, y)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码里通过<code>self.width</code>就能取到View的宽度了，而不用写<code>self.frame.size.width</code>。</p><p>通过代码也可以清楚地知道：实现锚点的方法其实很简单，就是在<code>setPosition:atAnchorPoint:</code>方法里面利用锚点和子视图的宽高进行计算，从而调整了子视图的位置。</p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WordPress扫码登录</title>
      <link href="/wordpress-auto-login-account.html"/>
      <url>/wordpress-auto-login-account.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>去年我在网页版QQ空间看到了一个扫描二维码安全登录的功能，也就是在pc端不用输入账号和密码，直接用QQ手机客户端扫一扫网页上的二维码就可以在网页安全登录。<br>这个功能真是太神奇了，我想知道是怎么实现的，于是我用二维码扫描软件读出二维码图片的内容，再用<code>firebug</code>查看了网页的网络请求。根据上面的信息大概知道了这个功能的实现原理，然后我就萌生出把这个功能移植到<code>WordPress</code>的想法。<br>去年我已经利用一些空余时间把网页前端和服务端做好了，但是当时还不会做手机客户端，所以就暂停了这个功能的开发。不过现在我已经做了一段时间的<code>iOSer</code>，于是在不久前我就把手机客户端做好了，总算是完成了扫描二维码登录<code>WordPress</code>这个功能。</p><p>演示视频如下：<br><code>https://v.youku.com/v_show/id_XNzM5NDMwNTcy.html</code></p><p>后来我整理了一下代码，发现用到的知识还挺多的，所以我把实现扫码登录可能会遇到的坑记录下来。<br>不过一篇文章应该写不完，所以就分开几篇写了。</p><h3 id="二、如何让WordPress自动登录帐号"><a href="#二、如何让WordPress自动登录帐号" class="headerlink" title="二、如何让WordPress自动登录帐号"></a>二、如何让WordPress自动登录帐号</h3><p>扫码登录的功能就是为了让某个帐号能够在网页能够自动登录，所以首先要完成<code>WordPress</code>自动登录帐号的功能。</p><p>百度一下<code>WordPress自动登录</code>，发现了这篇文章：<a href="http://www.solagirl.net/autologin-wordpress-php-script.html">《通过PHP脚本自动登陆WordPress》</a>，文章内容是忘记管理员密码时让管理员自动登录的方法，实现原理都是一样的。</p><p>新建一个<code>test.php</code>文件，把文章里的代码复制进去，然后把文件上传到网站根目录：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&#x27;wp-blog-header.php&#x27;</span>);</span><br><span class="line"><span class="variable">$user_login</span> = <span class="string">&#x27;[username]&#x27;</span>;</span><br><span class="line"><span class="variable">$user</span> = get_userdatabylogin(<span class="variable">$user_login</span>);</span><br><span class="line"><span class="variable">$user_id</span> = <span class="variable">$user</span>-&gt;ID;</span><br><span class="line">wp_set_current_user(<span class="variable">$user_id</span>, <span class="variable">$user_login</span>);</span><br><span class="line">do_action(<span class="string">&#x27;wp_login&#x27;</span>, <span class="variable">$user_login</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>访问后出现 <code>HTTP/1.1 404 Not Found</code>，也就是找不到网页。<br>而把<code>require(&#39;wp-blog-header.php&#39;);</code>这一句代码去掉后就不会出现<code>404</code>，但是为了使用<code>WordPress</code>里的函数，又必须要引用这个文件。<br>为什么会出现<code>404</code>呢，一开始我也觉得很奇怪，于是看了<code>index.php</code>文件，发现文件里面只有两行代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">&#x27;WP_USE_THEMES&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="keyword">require</span>( dirname( <span class="keyword">__FILE__</span> ) . <span class="string">&#x27;/wp-blog-header.php&#x27;</span> );</span><br></pre></td></tr></table></figure><p>复制<code>index.php</code>，改名为<code>index2.php</code>，放到网站根目录，访问后也出现了<code>404</code>。<br>为什么同样的代码，<code>index.php</code>访问正常，<code>index2.php</code>就不能访问呢？<br>最可能的答案就是<code>WordPress</code>判断了引用<code>wp-blog-header.php</code>的网页是不是网站首页，不是首页就会出现<code>404</code>。</p><p>在<code>WordPress</code>的源码里搜索<code>is_home()</code>，得到以下结果：<br><img src="/assets/2014/07/qrcode_ack_grep.png" class="lazyload placeholder" data-srcset="/assets/2014/07/qrcode_ack_grep.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>可以发现<code>class-wp.php</code>的代码有点可疑，查看该文件的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set the Headers for 404, if nothing is found for requested URL.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Issue a 404 if a request doesn&#x27;t match any posts and doesn&#x27;t match</span></span><br><span class="line"><span class="comment"> * any object (e.g. an existing-but-empty category, tag, author) and a 404 was not already</span></span><br><span class="line"><span class="comment"> * issued, and if the request was not a search or the homepage.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Otherwise, issue a 200.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle_404</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$wp_query</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we&#x27;ve already issued a 404, bail.</span></span><br><span class="line">    <span class="keyword">if</span> ( is_404() )</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Never 404 for the admin, robots, or if we found posts.</span></span><br><span class="line">    <span class="keyword">if</span> ( is_admin() || is_robots() || <span class="variable">$wp_query</span>-&gt;posts ) &#123;</span><br><span class="line">        status_header( <span class="number">200</span> );</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We will 404 for paged queries, as no posts were found.</span></span><br><span class="line">    <span class="keyword">if</span> ( ! is_paged() ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Don&#x27;t 404 for these queries if they matched an object.</span></span><br><span class="line">        <span class="keyword">if</span> ( ( is_tag() || is_category() || is_tax() || is_author() || is_post_type_archive() ) &amp;&amp; <span class="variable">$wp_query</span>-&gt;get_queried_object() ) &#123;</span><br><span class="line">            status_header( <span class="number">200</span> );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Don&#x27;t 404 for these queries either.</span></span><br><span class="line">        <span class="keyword">if</span> ( is_home() || is_search() ) &#123;</span><br><span class="line">            status_header( <span class="number">200</span> );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Guess it&#x27;s time to 404.</span></span><br><span class="line">    <span class="variable">$wp_query</span>-&gt;set_404();</span><br><span class="line">    status_header( <span class="number">404</span> );</span><br><span class="line">    nocache_headers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数判断了很多个条件，最后判断了<code>if ( is_home() || is_search() )</code>，如果访问的是首页或者是搜索页就返回<code>200</code>，否则就返回<code>404</code>。<br>所以可以在<code>test.php</code>里面加上一行代码，强制输出<code>200</code>状态码，这样就不会出现<code>404</code>错误了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span>(<span class="string">&#x27;wp-blog-header.php&#x27;</span>);</span><br><span class="line">status_header( <span class="number">200</span> );</span><br></pre></td></tr></table></figure><p>不过后来在<code>Google</code>发现更优雅的实现方法，就是改成引用<code>wp-load.php</code>文件，完整的代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&#x27;wp-load.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!is_user_logged_in()) &#123;</span><br><span class="line">    <span class="variable">$user_login</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="variable">$user</span> = get_userdatabylogin(<span class="variable">$user_login</span>);</span><br><span class="line">    <span class="variable">$user_id</span> = <span class="variable">$user</span>-&gt;ID;</span><br><span class="line">    wp_set_current_user(<span class="variable">$user_id</span>, <span class="variable">$user_login</span>);</span><br><span class="line">    wp_set_auth_cookie(<span class="variable">$user_id</span>);</span><br><span class="line">    do_action(<span class="string">&#x27;wp_login&#x27;</span>, <span class="variable">$user_login</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其它分类 </category>
          
          <category> 博客折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> WordPress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刀塔传奇刷副本辅助lua脚本</title>
      <link href="/an-assisted-lua-script-of-dota-legend.html"/>
      <url>/an-assisted-lua-script-of-dota-legend.html</url>
      
        <content type="html"><![CDATA[<p>最近玩了一个手机网游《刀塔传奇》，感觉画面很好看，而且技能挺丰富的，操作也比较简单。<br>但是玩游戏太浪费时间了，所以写了一段lua代码来自动刷副本。<br>请别误会，我玩游戏只是为了测试这款游戏的性能，而不是沉迷其中。</p><p>脚本测试环境：</p><ul><li>设备：iPod 4（没钱买iPod 5）</li><li>系统：ios 6.1.6（越狱）</li><li>屏幕分辨率：640 * 960</li><li>游戏版本：1.8.2</li></ul><p>首先设备需要越狱，然后在Cydia里面搜索“触动精灵”并安装。<br>触动精灵这个应用类似于电脑上的按键精灵，可以执行lua脚本，自带有丰富的函数库，可以很方便地实现各种功能。<br>但是未注册版只能执行5分钟，如果在5分钟内刷不完体力的话，再多执行几次。也可以配合烧饼加速器使用，这样一般5分钟内能刷完。</p><p>视频演示地址：<br><a href="http://v.youku.com/v_show/id_XNzA3NzYyMzQ4.html">http://v.youku.com/v_show/id_XNzA3NzYyMzQ4.html</a></p><p>脚本实现方法：</p><h3 id="一、操作步骤"><a href="#一、操作步骤" class="headerlink" title="一、操作步骤"></a>一、操作步骤</h3><p>脚本需要模拟玩家的操作，操作流程如下：<br><img src="/assets/2014/05/dota_process.jpg" class="lazyload placeholder" data-srcset="/assets/2014/05/dota_process.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><ol><li>处于【关卡界面】，点击按钮进入【选择英雄界面】，若提示体力不足则结束。</li><li>处于【选择英雄界面】，点击按钮进入【战斗界面】。</li><li>处于【战斗界面】，点击自动战斗按钮。</li><li>处于【战斗结算界面】，点击继续战斗按钮进入【关卡界面】。</li><li>循环第一步操作。</li></ol><p>网络游戏是需要联网的，假设你处于【选择英雄界面】，点击进入副本的按钮后游戏就会请求网络，客户端收到数据后才会跳转到战斗界面。<br>这个请求网络的响应时间和网速有关，网速慢的话可以要转一两秒的菊花才能进入战斗界面。<br>如果脚本点击了进入副本的按钮后就马上点击自动战斗按钮是不可以的，因为这时可能还没进入战斗界面。<br>所以脚本需要判断是否进入了战斗界面，可以通过判断界面某个坐标点是否出现了某个颜色来确定进入了战斗界面。</p><h3 id="二、提取关键点颜色"><a href="#二、提取关键点颜色" class="headerlink" title="二、提取关键点颜色"></a>二、提取关键点颜色</h3><p>下面以【关卡界面】为例子来说明怎么获取颜色的值：<br>首先要确定取哪个坐标的颜色，这个坐标的颜色值必须是固定的，而且该坐标在相邻两个界面的颜色不能相同。<br>因为【战斗结算界面】会跳转到【关卡界面】，所以要找出这两个界面不相同的颜色的坐标点，通过观察可发现左上角那个点(44, 55)符合条件：<br><img src="/assets/2014/05/dota_color.jpg" class="lazyload placeholder" data-srcset="/assets/2014/05/dota_color.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>那么怎么知道这个点的坐标呢，我的做法是把iPod通过usb连接到电脑，然后iPod截屏，电脑用图片处理软件打开截屏图片，就可以获取坐标了。<br>然后把下面的代码另存为lua文件：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--获取某个坐标的颜色</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_color</span><span class="params">(x, y)</span></span></span><br><span class="line">    init(<span class="string">&quot;0&quot;</span>, <span class="number">2</span>)    <span class="comment">--设置屏幕方向：home键在左边</span></span><br><span class="line">    mSleep(<span class="number">2000</span>)    <span class="comment">--延迟2秒</span></span><br><span class="line">    color = getColor(x, y)  <span class="comment">--获取坐标上的颜色</span></span><br><span class="line">    hex_color = <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%x&quot;</span>, color)</span><br><span class="line">    dialog(hex_color, <span class="number">20</span>)  <span class="comment">--显示颜色20秒</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">get_color(<span class="number">45</span>, <span class="number">55</span>)</span><br></pre></td></tr></table></figure><p>再通过PP助手或者iTools把lua文件复制到<code>/var/mobile/Media/TouchSprite/lua/</code>文件夹里，如下图所示：<br><img src="/assets/2014/05/dota_filepath.png" class="lazyload placeholder" data-srcset="/assets/2014/05/dota_filepath.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>在触动精灵里点击lua文件，设为启动脚本，再回到游戏按音量键运行脚本，就会弹出坐标(44, 55)处的颜色，如上上图所示。<br>为什么不在电脑的图片编辑软件里取色呢，因为截图的颜色有偏差，会导致代码判断出错，也可以用代码实现判断两个颜色是否相近来解决这个问题。</p><h3 id="三、脚本源码"><a href="#三、脚本源码" class="headerlink" title="三、脚本源码"></a>三、脚本源码</h3><p>全部代码如下，目前只在iPod4测试过：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 保存游戏处于某个界面时，某个坐标点的颜色</span></span><br><span class="line"><span class="keyword">local</span> scenes = &#123;</span><br><span class="line">    stage = &#123;   <span class="comment">--关卡界面</span></span><br><span class="line">        pos = &#123;x = <span class="number">45</span>, y = <span class="number">55</span>&#125;,</span><br><span class="line">        color = <span class="string">&quot;f5d36a&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    hero = &#123;    <span class="comment">--选择英雄界面</span></span><br><span class="line">        pos = &#123;x = <span class="number">912</span>, y = <span class="number">538</span>&#125;,</span><br><span class="line">        color = <span class="string">&quot;f7da82&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    battle = &#123;  <span class="comment">--战斗界面</span></span><br><span class="line">        pos = &#123;x = <span class="number">53</span>, y = <span class="number">80</span>&#125;,</span><br><span class="line">        color = <span class="string">&quot;31241b&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    reward = &#123;  <span class="comment">--战斗结算界面</span></span><br><span class="line">        pos = &#123;x = <span class="number">890</span>, y = <span class="number">195</span>&#125;,</span><br><span class="line">        color = <span class="string">&quot;764f32&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    msgbox = &#123;  <span class="comment">--体力不足的提示框</span></span><br><span class="line">        pos = &#123;x = <span class="number">500</span>, y = <span class="number">210</span>&#125;,</span><br><span class="line">        color = <span class="string">&quot;b3a290&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    timeout = &#123; <span class="comment">--网络连接超时提示框</span></span><br><span class="line">        pos = &#123;x = <span class="number">520</span>, y = <span class="number">330</span>&#125;,</span><br><span class="line">        color = <span class="string">&quot;694e36&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">--保存要执行的动作，即要点击的坐标</span></span><br><span class="line"><span class="keyword">local</span> actions = &#123;</span><br><span class="line">    enter_hero   = &#123;x = <span class="number">906</span>, y = <span class="number">512</span>&#125;,</span><br><span class="line">    enter_battle = &#123;x = <span class="number">912</span>, y = <span class="number">538</span>&#125;,</span><br><span class="line">    auto_battle  = &#123;x = <span class="number">924</span>, y = <span class="number">562</span>&#125;,</span><br><span class="line">    exit_reward  = &#123;x = <span class="number">850</span>, y = <span class="number">220</span>&#125;,</span><br><span class="line">    timeout      = &#123;x = <span class="number">520</span>, y = <span class="number">330</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--游戏类</span></span><br><span class="line">Game = &#123;</span><br><span class="line">    <span class="comment">--实例化函数</span></span><br><span class="line">    new = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        <span class="keyword">local</span> property = &#123;&#125;</span><br><span class="line">        <span class="built_in">setmetatable</span>(property, Game)</span><br><span class="line">        <span class="keyword">return</span> property</span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">--函数入口</span></span><br><span class="line">    main = <span class="function"><span class="keyword">function</span><span class="params">(self)</span></span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">self</span>.init_game()    <span class="comment">--初始化游戏</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">            <span class="comment">--等待进入关卡界面</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">self</span>.wait_for(<span class="built_in">self</span>, <span class="string">&quot;stage&quot;</span>) <span class="keyword">then</span></span><br><span class="line">                <span class="comment">--点击进入选择英雄界面</span></span><br><span class="line">                <span class="built_in">self</span>.do_action(<span class="built_in">self</span>, <span class="string">&quot;enter_hero&quot;</span>)  </span><br><span class="line">                <span class="comment">--判断是否出现体力不足的提示框</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">self</span>.is_in_scene(<span class="built_in">self</span>, <span class="string">&quot;msgbox&quot;</span>, <span class="number">1000</span>) <span class="keyword">then</span></span><br><span class="line">                    lua_exit()  <span class="comment">--停止脚本</span></span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">--等待出现选择英雄界面</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">self</span>.wait_for(<span class="built_in">self</span>, <span class="string">&quot;hero&quot;</span>) <span class="keyword">then</span></span><br><span class="line">                mSleep(<span class="number">1000</span>)</span><br><span class="line">                <span class="comment">--点击进入战斗界面</span></span><br><span class="line">                <span class="built_in">self</span>.do_action(<span class="built_in">self</span>, <span class="string">&quot;enter_battle&quot;</span>)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">--等待进入战斗界面</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">self</span>.wait_for(<span class="built_in">self</span>, <span class="string">&quot;battle&quot;</span>) <span class="keyword">then</span></span><br><span class="line">                <span class="comment">--点击自动战斗按钮</span></span><br><span class="line">                <span class="built_in">self</span>.do_action(<span class="built_in">self</span>, <span class="string">&quot;auto_battle&quot;</span>)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">--等待出现战斗结算界面</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">self</span>.wait_for(<span class="built_in">self</span>, <span class="string">&quot;reward&quot;</span>) <span class="keyword">then</span></span><br><span class="line">                <span class="comment">--点击退出结算界面</span></span><br><span class="line">                <span class="built_in">self</span>.do_action(<span class="built_in">self</span>, <span class="string">&quot;exit_reward&quot;</span>)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">--初始化游戏</span></span><br><span class="line">    init_game = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">        init(<span class="string">&quot;0&quot;</span>, <span class="number">2</span>)    <span class="comment">--设置屏幕方向：home键在左边</span></span><br><span class="line">        mSleep(<span class="number">1000</span>)    <span class="comment">--延迟1秒</span></span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">--游戏循环等待出现某个场景</span></span><br><span class="line">    wait_for = <span class="function"><span class="keyword">function</span><span class="params">(self, scene)</span></span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">100</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">--等待1秒判断一次</span></span><br><span class="line">            mSleep(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">--如果游戏出现网络超时提示框，就把提示框点掉</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">self</span>.is_in_scene(<span class="built_in">self</span>, <span class="string">&quot;timeout&quot;</span>) <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">self</span>.do_action(<span class="built_in">self</span>, <span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">--如果在某个场景中就返回true</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">self</span>.is_in_scene(<span class="built_in">self</span>, scene) <span class="keyword">then</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        lua_exit()  <span class="comment">--超过100秒就停止脚本</span></span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">--点击某个场景</span></span><br><span class="line">    do_action = <span class="function"><span class="keyword">function</span><span class="params">(self, action)</span></span></span><br><span class="line">        <span class="keyword">local</span> pos = actions[action]</span><br><span class="line">        <span class="built_in">self</span>.click(pos.x, pos.y)</span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">--点击某个坐标</span></span><br><span class="line">    click = <span class="function"><span class="keyword">function</span><span class="params">(x, y)</span></span></span><br><span class="line">        touchDown(<span class="number">0</span>, x, y)</span><br><span class="line">        mSleep(<span class="number">100</span>)</span><br><span class="line">        touchUp(<span class="number">0</span>, x, y)</span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">--判断游戏是否处于某个场景</span></span><br><span class="line">    is_in_scene = <span class="function"><span class="keyword">function</span><span class="params">(self, scene, delay)</span></span></span><br><span class="line">        mSleep(delay <span class="keyword">or</span> <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">local</span> pos = scenes[scene].pos</span><br><span class="line">        <span class="keyword">local</span> color = <span class="built_in">self</span>.hex(getColor(pos.x, pos.y))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>.is_similar_color(color, scenes[scene].color)</span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">--判断颜色是否相近</span></span><br><span class="line">    is_similar_color = <span class="function"><span class="keyword">function</span><span class="params">(color1, color2)</span></span></span><br><span class="line">        <span class="comment">--这里直接判断颜色是否相等了</span></span><br><span class="line">        <span class="keyword">return</span> (color1 == color2)</span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">--10进制转16进制</span></span><br><span class="line">    hex = <span class="function"><span class="keyword">function</span><span class="params">(number)</span></span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%x&quot;</span>, number)</span><br><span class="line">    <span class="keyword">end</span>,</span><br><span class="line">&#125;</span><br><span class="line">Game.<span class="built_in">__index</span> = Game</span><br><span class="line"></span><br><span class="line">game = Game.new()</span><br><span class="line">game.main(game)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 编程开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lua </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数学与魔术：完美洗牌》</title>
      <link href="/math-and-magic-faro-shuffle.html"/>
      <url>/math-and-magic-faro-shuffle.html</url>
      
        <content type="html"><![CDATA[<div class="note link green"><p>点击链接查看第6集的魔术表演：<a href="https://open.163.com/newview/movie/free?pid=M8JHGS5KF&mid=M8JHKM94V">《数学与魔术：完美洗牌》</a></p></div><h3 id="一、洗牌的方法"><a href="#一、洗牌的方法" class="headerlink" title="一、洗牌的方法"></a>一、洗牌的方法</h3><p>将一副牌平均分成两份进行完美洗牌法，有两种方法，如图所示：<br><img src="/assets/2014/02/faro_shuffle_method.png" class="lazyload placeholder" data-srcset="/assets/2014/02/faro_shuffle_method.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><h4 id="1、顶牌洗到第1张"><a href="#1、顶牌洗到第1张" class="headerlink" title="1、顶牌洗到第1张"></a>1、顶牌洗到第1张</h4><p>不考虑下半部分的牌，如果设上半部分的牌中某张牌的位置为<code>i</code>，那么这张牌经过完美洗牌法后位置就变成<code>i*2-1</code>(奇数)。<br>例如，第2张牌去到了第3张的位置。</p><h4 id="2、顶牌洗到第2张"><a href="#2、顶牌洗到第2张" class="headerlink" title="2、顶牌洗到第2张"></a>2、顶牌洗到第2张</h4><p>同理，上半部分的牌中某张牌的位置变成了<code>i*2</code>(偶数)。例如，第2张牌去到了第4张的位置。</p><h3 id="二、考虑几个问题"><a href="#二、考虑几个问题" class="headerlink" title="二、考虑几个问题"></a>二、考虑几个问题</h3><h4 id="1、问题1"><a href="#1、问题1" class="headerlink" title="1、问题1"></a>1、问题1</h4><p>如何运用两种完美洗牌法把第<code>2</code>张牌洗到第<code>21</code>张？</p><p>因为完美洗牌法只能把牌洗到第<code>i*2-1</code>(奇数)张或者第<code>i*2</code>(偶数)张，那么通过位置的奇偶就能知道该用哪种洗牌法了，可以采用由后往前倒推的方法。<br>例如，第<code>21</code>张是奇数，那么只能是通过<code>i*2-1</code>得到的，于是可以求出前一个位置<code>i</code>为第<code>11</code>张。同理可得出位置的变化为<code>2, 3, 6, 11, 21</code>。</p><p>知道了位置的变化，就可以求出该用那种洗牌法洗牌。例如一开始黑桃<code>A</code>在第<code>2</code>张，要洗到第<code>3</code>张的位置，所以要采用<code>i*2-1</code>的方法，也就是第一种方法。</p><p>用python写的算法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding : utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取牌的位置变化</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_faro_shuffle_pos</span>(<span class="params">last_pos</span>):</span></span><br><span class="line">    pos_list = [last_pos]</span><br><span class="line">    <span class="keyword">while</span> last_pos <span class="keyword">is</span> <span class="keyword">not</span> <span class="number">1</span>:</span><br><span class="line">        last_pos = <span class="built_in">int</span>(math.ceil(last_pos / <span class="number">2.0</span>))</span><br><span class="line">        pos_list = [last_pos] + pos_list</span><br><span class="line">    <span class="keyword">return</span> pos_list</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取洗牌的方法</span></span><br><span class="line"><span class="comment">#0代表第一种方法，1代表第二种方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_faro_shuffle_method</span>(<span class="params">pos_list</span>):</span></span><br><span class="line">    method_list = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> pos_list[<span class="number">1</span>:]:</span><br><span class="line">        method_list.append((x + <span class="number">1</span>) % <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> method_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    cards = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">52</span>+<span class="number">1</span>)</span><br><span class="line">    pos_list = get_faro_shuffle_pos(<span class="number">21</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;位置变化 :&quot;</span>, pos_list)</span><br><span class="line"></span><br><span class="line">    method_list = get_faro_shuffle_method(pos_list)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;洗牌方法 :&quot;</span>, method_list)</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">位置变化 : [1, 2, 3, 6, 11, 21]</span><br><span class="line">洗牌方法 : [1, 0, 1, 0, 0]</span><br></pre></td></tr></table></figure><p>算法如此简单，以至于心算也能很快完成，毫无压力。</p><p>视频里选定的牌是在第<code>2</code>张，而上面的代码假定了选定的牌在第<code>1</code>张，那么经过一次完美洗牌后选定牌就到了第<code>2</code>张，就跟视频里的位置一样了。这样做能够比较容易观察出牌的位置变化。</p><p>牌的位置变化可以通过以下代码得出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回完美洗牌后的数组</span></span><br><span class="line"><span class="comment">#0代表第一种方法，1代表第二种方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">faro_shuffle</span>(<span class="params">cards, method=<span class="number">0</span></span>):</span></span><br><span class="line">    new_cards = cards[:]</span><br><span class="line">    num = <span class="built_in">len</span>(cards)</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        new_index = (index*<span class="number">2</span> + (index*<span class="number">2</span>/num)^method) % num</span><br><span class="line">        new_cards[new_index] = cards[index]</span><br><span class="line">    <span class="keyword">return</span> new_cards</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    cards = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">52</span>+<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;原牌的顺序：&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(cards)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;完美洗牌后的顺序：&quot;</span>)</span><br><span class="line">    method_list = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> method_list:</span><br><span class="line">        cards = faro_shuffle(cards, x)</span><br><span class="line">        <span class="built_in">print</span>(cards)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">原牌的顺序：</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52]</span><br><span class="line"></span><br><span class="line">完美洗牌后的顺序：</span><br><span class="line">[27, 1, 28, 2, 29, 3, 30, 4, 31, 5, 32, 6, 33, 7, 34, 8, 35, 9, 36, 10, 37, 11, 38, 12, 39, 13, 40, 14, 41, 15, 42, 16, 43, 17, 44, 18, 45, 19, 46, 20, 47, 21, 48, 22, 49, 23, 50, 24, 51, 25, 52, 26]</span><br><span class="line">[27, 40, 1, 14, 28, 41, 2, 15, 29, 42, 3, 16, 30, 43, 4, 17, 31, 44, 5, 18, 32, 45, 6, 19, 33, 46, 7, 20, 34, 47, 8, 21, 35, 48, 9, 22, 36, 49, 10, 23, 37, 50, 11, 24, 38, 51, 12, 25, 39, 52, 13, 26]</span><br><span class="line">[7, 27, 20, 40, 34, 1, 47, 14, 8, 28, 21, 41, 35, 2, 48, 15, 9, 29, 22, 42, 36, 3, 49, 16, 10, 30, 23, 43, 37, 4, 50, 17, 11, 31, 24, 44, 38, 5, 51, 18, 12, 32, 25, 45, 39, 6, 52, 19, 13, 33, 26, 46]</span><br><span class="line">[7, 23, 27, 43, 20, 37, 40, 4, 34, 50, 1, 17, 47, 11, 14, 31, 8, 24, 28, 44, 21, 38, 41, 5, 35, 51, 2, 18, 48, 12, 15, 32, 9, 25, 29, 45, 22, 39, 42, 6, 36, 52, 3, 19, 49, 13, 16, 33, 10, 26, 30, 46]</span><br><span class="line">[7, 2, 23, 18, 27, 48, 43, 12, 20, 15, 37, 32, 40, 9, 4, 25, 34, 29, 50, 45, 1, 22, 17, 39, 47, 42, 11, 6, 14, 36, 31, 52, 8, 3, 24, 19, 28, 49, 44, 13, 21, 16, 38, 33, 41, 10, 5, 26, 35, 30, 51, 46]</span><br></pre></td></tr></table></figure><p>由上面的执行结果可以看出，假设黑桃<code>A</code>一开始的位置是<code>1</code>，通过<code>5</code>次完美洗牌后位置就变成了<code>21</code>。</p><h4 id="2、问题2"><a href="#2、问题2" class="headerlink" title="2、问题2"></a>2、问题2</h4><p>如何精确地把一副牌分成牌数相等的两部份？</p><p>答案是不用平均分。<br>可能很多人会产生一个错觉，以为两叠牌的牌数相等才能进行完美洗牌法，但在这个视频中并不需要，两叠牌的牌数允许存在误差。<br>魔术师把牌分成两半，误差张数一般在<code>0~2</code>之间，也就是说两叠牌的张数差大于<code>4</code>张就能感觉出来了。<br>魔术师表演魔术时是要去掉大小王牌的，整副牌有<code>52</code>张，当误差为<code>2</code>张时，上半叠牌可能会拿到<code>24</code>张。为了保证把牌洗到某个位置的准确性，那么牌的最终位置最大只能为<code>24 * 2 = 48</code>。</p><p>可能有人会问，如果魔术师用骰子得出的数字大于48怎么办？我认为这是不可能的。<br>因为骰子只有<code>123456</code>，如果投出来的两个数字都大于等于<code>5</code>，那么组合出的数字都大于<code>52</code>，魔术师会重新投骰子。<br>如果其中一个数字小于<code>5</code>，那么组合出来的数字最大是<code>46</code>，在安全区内。<br>如果投出<code>5</code>和<code>2</code>，魔术师会说这是<code>25</code>，而不会说是<code>52</code>。</p><h4 id="3、问题3"><a href="#3、问题3" class="headerlink" title="3、问题3"></a>3、问题3</h4><p>如何让一张牌隔着一张牌进行完美洗牌法？</p><p>这确实不难，很多年以前我上初中的时候，有一天在电视看到魔术师用了完美洗牌法，于是就买了一副牌研究，练习了一两天就成功了。<br>当时用的牌是两块钱一副的，练习起来比较难，如果用视频里的单车牌的话，完美洗牌是非常容易完成的。</p>]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 魔术学堂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教学 </tag>
            
            <tag> Python </tag>
            
            <tag> 魔术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大，大，大，大，大……</title>
      <link href="/big-big-big-big-big.html"/>
      <url>/big-big-big-big-big.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者：周德东</p></blockquote><p>一个小孩，他从小就爱胡思乱想：</p><p>假如，有一种宇航飞行器……</p><p>它超越了宇宙速度，比光速还要快很多很多很多倍……</p><p>它朝着一个方向，一直朝黑暗的宇宙深处飞……</p><p>它可以自行躲开一个个天体，恒星，行星，卫星，彗星，流星……</p><p>它的航线没有一丝一毫的弧度，因此，它永远不可能飞回来。驾驶这个宇航飞行器的人，等于把自己的生命射了出去……</p><p>宇宙是无限的……</p><p>宇航飞行器的动力是永恒的……</p><p>宇航员被注射了一种东西，不需要任何营养，不需要新陈代谢……</p><p>他的生命是永恒的……</p><p>他年复一年，一直飞……</p><p>亿万斯年之后，他还在飞吗？</p><p>最终，他会看见什么？</p><p>最终，他会撞到什么上？</p><p>这个小孩叫马面。</p><p>一次，他读了一个叫卫斯理的人写的小说：</p><p>宇宙万物，其实一刻不停地在膨胀，在变大。</p><p>因为所有的东西都在变大，而且幅度相同，所以我们是察觉不到的……</p><p>这种说法让人越想越恐怖。</p><p>马面换了一种想象：</p><p>假如宇宙万物都停止了膨胀，只有一个人没有停止，继续变大，变大，变大……</p><p>最后，会发生什么？</p><p>马面还经常想这样的事：</p><p>空中漂浮一粒灰尘，灰尘上有无数的菌。</p><p>菌永远弄不清灰尘之外还有个房子，房子里有人，有面包，有电脑，有字典，有爱情。</p><p>菌永远弄不清房屋之外有地球，有海，有森林。</p><p>菌永远弄不清地球之外是宇宙，是无边无际的太空……</p><p>假设地球是漂浮在空中的一粒灰尘，人类是附在灰尘上的菌，一瞬间就是人类的亿万斯年。</p><p>那么，人类永远弄不懂，在人类科技永远无法达到的茫茫宇宙的终极之处，是不是一个房子，房子里是不是有什么存在，房子之外是不是有一个承载它的更大的物体，而那物体之外是不是无穷大的空间，那物体就像漂浮的一粒灰尘，再之外……</p><p>这个黑夜里，马面睡着睡着，突然摔到了地上。</p><p>他醒了，睁眼一看，发现家里的房子变小了！他仔细看，他的床、被子、枕头统统都变小了……</p><p>他急忙拿出一个尺子，想量一量，那个尺子也明显变小了！</p><p>不用量了，他猛然意识到：他在变大！</p><p>低头看了看，短裤已经撑破了，布片掉在地上。</p><p>惊悚间，眼前的一切东西又小了许多，他如果再不出去，就会把房子撑破！</p><p>他迅速爬进妈妈的房间，看见妈妈变得几乎和婴孩一般大，正在小小的床上安详地睡着。</p><p>他不敢惊醒妈妈，怕吓着她。</p><p>他机灵地爬出房子，站起来，长长透了一口气。</p><p>他恐惧极了，不知道该怎么办。</p><p>假如，有人发现了他，一定会吓得半死，接着，就会打110。</p><p>警察不会伤害他，他可能被带到什么研究所。</p><p>可是，他一刻不停地在变大，没有房子能装进他，很快他就只能站在广场上了。</p><p>再过一些时间，整个城市都找不到可以容纳他的空间了，他只能来到野外。那时候，他看人类已经成了一只只的蚂蚁，无法再对话，那一只只的蚂蚁也无法再研究他，只能眼巴巴地看着他越来越大……</p><p>那时候，他成了异类。</p><p>那时候，他无法保证人类依然对他友善。</p><p>他一刻不停地在变大，毫无疑问开始威胁人类的安危了，人类必须想办法消灭他。他了解人类现存武器的杀伤力，别说他，就是地球都可以毁灭多少次。</p><p>趁着深夜大家都在睡着，巨大的人，怀着巨大的惊恐，朝野外奔逃。</p><p>城市的北部，是一片原始森林。那是他唯一的去处了。</p><p>街道两旁的的居民都以为地震了，很多人跑到了楼下，议论刚才的震感。可是，第二天官方并没有发布关于昨夜地震的消息……</p><p>马面越来越大，他看楼房、道路、河流，就像积木一样了，就像飞机爬上高空之后，旅客从舷窗朝下看的感觉。</p><p>他放轻了脚步。一是担心把更多的人惊醒，二是他怕不小心踩到哪个房子上。</p><p>此时，他还没有走太远。在他心里，他和脚下这些蚂蚁大小的人类，似乎还是一脉相传的同类，他们长着鼻子眼睛嘴巴，他也长着鼻子眼睛嘴巴……他还不忍践踏他们的财产，不忍伤害他们的生命。</p><p>天亮之前，他终于跨进了原始森林。</p><p>对于他来说，这里是一片宽阔的草地，没有人类的影子。他可以喘口气。</p><p>他突然感到饿了。</p><p>四下看看，没有食物。他低下头，想捉个什么活物吃掉。</p><p>吃什么呢？</p><p>老虎？</p><p>捉到了，只能生吃，他没有火。人类的文明，尘世的繁华，都不属于他了。</p><p>他眼望四周，就像史前，他强烈地感到了孤独。</p><p>天地之初，是一个英雄主义时代。那时候，虽然人类一无所有，却敢于战天斗地。没有工具，用石头磨造；没有粮食，开荒耕种；没有火，钻石；没有水，挖井……</p><p>马面拨拉一棵棵的树，没有发现一只老虎，也没有发现其他大型动物。</p><p>巨大的恐惧感又一次涌上他的心头——恐龙是怎么灭绝的？</p><p>他的眼睛盯住了远处的城市。</p><p>野生动物越来越少了，现在，最多的动物是人，密密麻麻，俯拾即是。</p><p>他想活命，只能吃人了。</p><p>他轻轻地走过去……</p><p>人们发现了他，四处奔逃！</p><p>马面看不见他们惊惶的表情，听不见他们狂乱的叫喊，只看见他们像虫子一样四下跑动……</p><p>他一个个捏起来，开始吞吃。</p><p>吃着吃着，他猛地停住了。</p><p>他不知道他吃的这些人里，有没有他的妈妈，有没有他的两个弟弟一个妹妹，有没有他的启蒙老师张宝泉，有没有他的女朋友鲍莉……</p><p>他希望吃掉他的仇人，一直跟他过不去的办公室黄主任，街道派出所的那个叫丁培森的警察，还有骂过弟弟的那个邻居……</p><p>可是他无法辨别。</p><p>他咬了咬牙，继续捉人吃。</p><p>他还在变大，变大，变大……</p><p>终于，他的肉眼看不到人了，连最高的建筑物都变成了沙粒一样大……</p><p>天地间彻骨的冷。</p><p>山山岭岭，沟沟壑壑，在他脚下就是不太平整的地面而已。他想起了“泥丸”一词。</p><p>他已经和人类诀别了……</p><p>马面摆脱了地心引力，漂浮在黑暗的太空中。这时候，已经没有了东、南、西、北、上、下这些方位的概念。</p><p>他在延长，增长，扩大……</p><p>他离开地球之后，就好像进入了另一种时间，膨胀的速度越来越快。</p><p>他一点点伸向宇宙的尽头，时间的末端。</p><p>他已经变成了另一种东西，他不需要粮食，不需要呼吸。</p><p>他一直不死。</p><p>很多很多很多年过去了……</p><p>太空中的天体，都在急速或者缓慢地运动着，它们越来越小。</p><p>地球已经像灰尘一样大了，人类是附着在上面的细菌。</p><p>太阳仅仅是无边无际的黑暗中的蜡烛。</p><p>太空中，有无数的蜡烛，闪闪烁烁。陆续有蜡烛点亮，也陆续有蜡烛熄灭……</p><p>还有一团团的亮星云，暗星云……</p><p>马面想起了在体育馆看演出，舞台上暗下来，黑压压的看台上就是这样的效果，有打火机，荧火棒，手电筒……星星点点，闪闪烁烁。</p><p>假如，突然有一个比太阳更强大更永恒的东西，骤然照亮这无边的黑暗，他会不会看见密密麻麻的脸呢？</p><p>从太阳系内的一颗星球到另一颗星球，很可能就需要一万光年。</p><p>人类永远无法知道这里的秘密。</p><p>那些细菌只能探究灰尘附近的灰尘。</p><p>这时候，他摆脱地球已经亿万斯年。</p><p>他借着蜡烛的光，端详着那一粒漂浮的灰尘，想——这上面还有人类吗？是不是已经灭绝了？</p><p>假如还延续着，那也是不知多少代之后的人类了，跟他没有什么关系了。</p><p>他们的数量是不是已经达到了一百亿了呢？</p><p>他突然有了一种暴力欲。他用手捏起那粒灰尘，把它投进了蜡烛的火苗中。</p><p>他继续变大，变大，变大……</p><p>太阳越来越小，终于变成了萤火虫一样，最后连看都看不见了。</p><p>宇宙更黑暗了。</p><p>马面想起在地球上看过的一本书。</p><p>那是一本宗教书，上面有这样一个故事：</p><p>一个清早，一个科学家去看他的一个朋友。</p><p>进了朋友家的门，科学家看到了一个奇异的场景——屋子的半空漂浮着几个精致的天体模型，地球围着太阳转，月亮围着地球转……</p><p>科学家惊呆了，大声问朋友：“是谁让它们在动？”</p><p>朋友淡淡地说：“没有人让它们动，是它们自己在动。”</p><p>科学家大声说：“不可能！没有人驱动它们，它们怎么可能配合得如此精妙？”</p><p>朋友说：“宇宙中的太阳、地球、月亮也是这样动，而且更玄妙，说是自然生成，你怎么相信呢？”</p><p>这个故事很具说服力。</p><p>可是，是谁在驱动这些天体呢？</p><p>马面感到黑暗中确实有一双巨大的眼珠，像盯着灰尘一样盯着他……</p><p>变大，变大，变大……</p><p>又过了亿万斯年……</p><p>终于，马面的脑袋顶在了一个什么东西上，好像是一个巨大的盖子！</p><p>他的心猛跳起来——也许，这就是宇宙的终极之处了！打开盖子，也许就看见那个幕后的那个主宰了！……</p><p>盖子被他顶开了。</p><p>准确地说，是被促使他不停变大的那股神秘力量顶开了。</p><p>马面好像钻出了一个黑糊糊的球体，无边的光明刺得他紧紧闭上眼睛……</p><p>这是永恒的光明。</p><p>这不是太阳的光明！</p><p>恐惧的巨大阴影在他的心中弥漫开来。他不敢睁开眼，他无法想象他会看见什么……</p><p>最终他还是从眼皮缝隙望出去：上方不是蓝色，而是红色——无边无际的红色。</p><p>遥望四面八方，出现了很多鲜艳的东西，赤橙黄绿青蓝紫，像房屋，像机器，像动物，像植物……</p><p>这是一个更大的世界。</p><p>马面不知道谁主宰着这个更大的世界，不知道那些花花绿绿的东西都是什么。</p><p>为了表达方便，我们得给这个主宰者一个称呼，那就叫它上帝吧。</p><p>上帝和地球生命的化学成分也许完全不同，上帝甚至不一定需要液态水，也没有形体。</p><p>上帝可能熟知太阳系的事。</p><p>那黑暗的球体，也许正是它的一个实验室，而人类是它培植的一些物种……它掌握着每个人的命运和喜怒哀乐……</p><p>而那无边无际的红色也许仅仅是它制造的一盏灯。</p><p>人类一直在苦苦地思索，他们这个物种从哪里来，灵魂到哪里去。他们永远不可能得到答案。</p><p>他们这个物种很可能是被上帝造出来的。最后，他们的灵魂很可能被上帝回收。</p><p>可是，上帝的实验不知道出了什么偏差，致使马面一个人突然变大了，就像我们培育植物出现了偏差，突然有一个疯长不止……</p><p>当然，上帝也可能不了解太阳系的事，就像一个人不知道衣柜里生活着一些米粒大的蜘蛛。</p><p>马面一片茫然，他根本无法和这个更大的世界沟通，正像前面说的那样：一个细菌无法懂得电脑。</p><p>话说回来，电脑也不可能懂得细菌。</p><p>马面继续变大，变大，变大……</p><p>又过了亿万斯年……</p><p>马面终于发现，那红光也是漂浮在宇宙中的一个蜡烛，它们变得越来越微茫……</p><p>马面又陷入了一片无边无际的黑暗……</p><p>孤独，无望，恐惧，悲伤……经过漫长漫长漫长的时间之后，马面又撑破了这个黑暗的空间，在更大的一个世界里露了头。</p><p>他像鸡雏撑破蛋壳一样，跳了出来。</p><p>他慢慢睁开眼睛，环顾四周的情况……</p><p>他目瞪口呆！</p><p>——是一个大房子，有很多穿白衣服的人。他们围着他，笑呵呵地说着什么，好像都在等他。</p><p>房子里有很多医疗设备，还有一股浓郁的化学药品气味。</p><p>……是的，马面经过那么漫长的发育，来到了我们这个世界。</p><p>他来到了我们这种时间。</p><p>在我们的体内，缩小无数无数无数倍，在我们肉眼看不见的那个黑暗的微空间，包含着很多五颜六色的世界。</p><p>再缩小无数无数无数倍，其中一个五颜六色的世界里，包含着很多更小的黑暗世界。</p><p>再缩小无数无数无数倍，其中一个黑暗的世界里，包含着无数的飞行物，其中一个飞行物上，依附着众多奇妙的生物……</p><p>假如有那么一个神奇的放大镜，把这些奇妙的生物无限地放大，我们会看见，他们都穿着衣服，有四肢和五官，有仇恨、恐惧和美丽的爱情……</p><p>前面我说：</p><p>马面在家里睡觉，发现房子、床、被子、枕头、尺子统统变小了……</p><p>他看了妈妈一眼，就连夜朝原始森林逃去，街道两旁的居民都以为地震了……</p><p>都是那个微世界里的事情。</p><p>你可能不信。没事你好好想一想吧。</p><p>马面长大成人，如今就在你我他身边生活。只是我们不知道他的来历。而且他改了名字。</p><p>有一天，他会突然膨胀，撑破房子，撑破天，给我们带来震撼、惊喜、恐惧、威胁……</p><p>接着，他就离我们远去了。</p><p>他无休止地膨胀，终于有一天，他会见到另一群宏大的活物。</p><p>那已是亿万光年之外，那已是亿万斯年之后。</p><p>那时候，人类、地球、太阳可能都消亡了。</p><p>不知道他用什么方式对那些活物描述了我们的存在，那些活物惊讶了。</p><p>他们低头看了看自己的身体，终于不相信地摇摇头，笑起来。</p>]]></content>
      
      
      <categories>
          
          <category> 其它分类 </category>
          
          <category> 故事小说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渡河难题</title>
      <link href="/river-crossing-problem.html"/>
      <url>/river-crossing-problem.html</url>
      
        <content type="html"><![CDATA[<p>这是一个悲惨的故事：<br>一家六口，包括爸爸、妈妈、两个女儿及两个儿子在远足途中迷了路，还不幸遇上一个逃狱的犯人，幸好犯人给一个正在远足的休班警员逮捕，一家六口才得以保住性命。<br>可是，在荒效野外无线电接受不灵，他们都不能与外界联络，休班警员亦不能找到支援。</p><p>任务：你要设法帮助他们在天未晚之前安全地离开这个山头。<br>他们现在只有渡河这一条捷径可走，在河边有一艘舢舨，可以把他们载到对岸。<br>可是，只有爸爸、妈妈及警员能控制舢舨；不论成人或小孩，舢舨一次最多只可乘2人。  </p><p>在渡河期间，你要防止以下情况发生：</p><ul><li>当警员与犯人分开时，犯人会伤害一家六口。</li><li>当爸爸看见妈妈离开女儿时，爸爸便会教训女儿。</li><li>当妈妈看见爸爸离开儿子时，妈妈便会教训儿子。</li></ul><blockquote><p>此文章年代久远，现代浏览器已不再支持flash。<br>如果想下载游戏到本地玩，可以<a href="/assets/2013/12/river.swf">点击这里下载</a>。</p></blockquote><br /><embed src="/assets/2013/12/river.swf" type="application/x-shockwave-flash" width="610" height="480" quality="high" />]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 挑战智慧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智力题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数学与魔术：运气偏向一方的骰子游戏》</title>
      <link href="/math-and-magic-dicing-with-destiny.html"/>
      <url>/math-and-magic-dicing-with-destiny.html</url>
      
        <content type="html"><![CDATA[<div class="note link green"><p>点击链接查看第4集的魔术表演：<a href="https://open.163.com/newview/movie/free?pid=M8JHGS5KF&mid=M8JHKPH2R">《数学与魔术：运气偏向一方的骰子游戏》</a></p></div><p>视频里没有详细说明各种骰子的点数，但是经过我专业的观察，终于得出了各种骰子的点数。<br>这些骰子的点数设计得非常精妙，任意两颗骰子都没有相同的点数，所以不会出现平局的情况。</p><p>于是我写了一段<code>Python</code>代码来求出骰子的胜率，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#骰子的点数</span></span><br><span class="line">dices = &#123;</span><br><span class="line">    <span class="string">&quot;red&quot;</span>    : [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">9</span>],</span><br><span class="line">    <span class="string">&quot;blue&quot;</span>   : [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>],</span><br><span class="line">    <span class="string">&quot;green&quot;</span>  : [<span class="number">0</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">    <span class="string">&quot;yellow&quot;</span> : [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">8</span>],</span><br><span class="line">    <span class="string">&quot;purple&quot;</span> : [<span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回第一种颜色赢第二种颜色的次数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_win_times</span>(<span class="params">color1, color2</span>):</span></span><br><span class="line">    times = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dices[color1]:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> dices[color2]:</span><br><span class="line">            <span class="keyword">if</span> i &gt; j:</span><br><span class="line">                times += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> times</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#输出赢的概率</span></span><br><span class="line">    colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;purple&quot;</span>, <span class="string">&quot;red&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(colors)-<span class="number">1</span>):</span><br><span class="line">        color1 = colors[i]</span><br><span class="line">        color2 = colors[i + <span class="number">1</span>]</span><br><span class="line">        win_times = get_win_times(color1, color2)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%6s beats %-6s : %d/36&quot;</span>%(color1, color2, win_times))</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   red beats blue   : 21/36</span><br><span class="line">  blue beats green  : 21/36</span><br><span class="line"> green beats yellow : 20/36</span><br><span class="line">yellow beats purple : 20/36</span><br><span class="line">purple beats red    : 20/36</span><br></pre></td></tr></table></figure><p>一个骰子有6面，投两个骰子就可以得出6*6=36种局面，通过判断局面就可以得出骰子赢的次数，再除以36就能得出赢的概率了。<br>从执行的结果可以看出，如果用红色骰子跟蓝色骰子玩，红色骰子有21/36的概率能赢，也就是视频里面所说的7/12，约等于58%。<br>理论上讲，投够一定的次数后，红色骰子必定赢蓝色骰子。</p>]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 魔术学堂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教学 </tag>
            
            <tag> 魔术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XDSEC——伪造ip地址访问网站</title>
      <link href="/curl-forge-ip-to-visit-the-website.html"/>
      <url>/curl-forge-ip-to-visit-the-website.html</url>
      
        <content type="html"><![CDATA[<p>从西电一道信息安全技术比赛的题目说起吧，题目是《Black Hat》。<br>访问答题网页，提示信息为：<code>&quot;Make sure that you are from Vatican.&quot;</code>。<br>翻译成中文是：<code>&quot;请确保你来自梵蒂冈&quot;</code>。</p><p>意思是需要用梵蒂冈的ip访问才能成功，找梵蒂冈的代理服务器是不可行的，但是可以通过伪造梵蒂冈的ip来绕过检测。<br>由于某些网站是通过请求头的<code>&quot;X-Forwarded-For&quot;</code>值来获取访问者的ip地址，而请求头是可以修改的，所以很多网站都可以通过伪造请求头来绕过ip检测。<br>具体原理可以看这篇文章：<a href="http://zhangxugg-163-com.iteye.com/blog/1663687">http://zhangxugg-163-com.iteye.com/blog/1663687</a></p><p>在搜索引擎搜一下<code>&quot;梵蒂冈ip&quot;</code>，可以得到一个ip地址：<code>&quot;212.77.1.243&quot;</code>。<br>利用火狐浏览器的<code>Moify Headers</code>插件可以修改请求头信息。<br>下图是在插件中把请求头的<code>&quot;X-Forwarded-For&quot;</code>修改为<code>&quot;212.77.1.243&quot;</code>：<br><img src="/assets/2013/10/modify_headers.png" class="lazyload placeholder" data-srcset="/assets/2013/10/modify_headers.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>点击<kbd>Start</kbd>按钮启用插件后再访问网页，提示信息变成：<code>&quot;The Requested URL was not found on this server. Apache Server at www.blackhat.com Port 80&quot;</code>。<br>根据提示信息，需要访问这台服务器上配置的<a href="http://www.blackhat.com网站./">www.blackhat.com网站。</a></p><p>再把请求头的<code>&quot;Host&quot;</code>值改为<code>&quot;www.blackhat.com&quot;</code>就行了。修改后再访问网站就得到了通关的key。</p><p>下面再来看看某个discuz论坛，我把<code>&quot;X-Forwarded-For&quot;</code>修改为<code>&quot;8.8.8.8&quot;</code>后注册一个帐号，结果如下：<br><img src="/assets/2013/10/modify_ip.png" class="lazyload placeholder" data-srcset="/assets/2013/10/modify_ip.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>可见，该网站存在ip伪造的问题，事实上很多论坛都是这样。</p><p>再接一个新手任务，该任务要求有5个ip访问推广地址：<br><img src="/assets/2013/10/modify_task.png" class="lazyload placeholder" data-srcset="/assets/2013/10/modify_task.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>使用curl可以修改请求头信息，执行下面的php代码，可以瞬间完成任务：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">5</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    task();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">task</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$url</span> = <span class="string">&quot;http://www.xxx.com/?fromuid=272539&quot;</span>;</span><br><span class="line">    <span class="variable">$ip</span> = <span class="string">&quot;100.100.&quot;</span>.rand(<span class="number">1</span>, <span class="number">255</span>).<span class="string">&quot;.&quot;</span>.rand(<span class="number">1</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="variable">$headers</span> = <span class="keyword">array</span>(<span class="string">&quot;X-FORWARDED-FOR:<span class="subst">$ip</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$curl</span> = curl_init(<span class="variable">$url</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_HTTPHEADER, <span class="variable">$headers</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_USERAGENT,  <span class="string">&quot;Mozilla/4.0&quot;</span>);</span><br><span class="line">    <span class="variable">$src</span> = curl_exec(<span class="variable">$curl</span>);</span><br><span class="line">    curl_close(<span class="variable">$curl</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> CTF比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置银行卡密码的个人bug</title>
      <link href="/a-personal-bug-in-setting-bank-card-password.html"/>
      <url>/a-personal-bug-in-setting-bank-card-password.html</url>
      
        <content type="html"><![CDATA[<p>国庆前去某银行新办了张银行卡，办卡的时候修改了默认的密码。<br>国庆期间要网上购物，结果密码输入3次都错误，所以银行卡被锁定了，只能等国庆后银行上班再去解锁。  </p><p>国庆结束后跑去银行重置了密码，流程是这样的：<br>1、客服MM先确认我的证件，没问题就继续下一步。<br>2、让我在密码键盘上输入6位新密码，然后按确定。<br>3、修改成功。</p><p>接着我用新密码到银行里面的ATM机取钱，但是当我输入密码后，ATM提示密码错误。<br>我当时就郁闷了，这家银行的系统也太差了吧，刚设置的密码我是不会忘记的，怎么可能会错误呢？  </p><p>于是我又来到了柜台，跟客服MM说了这个问题，客服MM拿我的银行卡在机器刷了一下，然后让我在密码键盘上输入密码看能不能登陆。<br>我刚要输入密码，突然就明白为什么密码会错误了，原来这是由一个神奇的bug引起的。  </p><p>下面是手机键盘的按键：<br><img src="/assets/2013/10/mima_phone.jpg" class="lazyload placeholder" data-srcset="/assets/2013/10/mima_phone.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg">  </p><p>银行要求密码要6位数字，但是我的密码是6位字母。比如我的密码是<code>poboke</code>，那么对应的数字就是<code>762653</code>。<br>我用了那么多年的诺基亚，键盘上哪个字母对应哪个数字都已经成为条件反射了。<br>在输入密码的时候，因为脑海里要回忆起手机键盘的画面，所以只把字母转换成了按键的位置，而忽略了数字本身。</p><p>再来看看这个坑爹的密码键盘：<br><img src="/assets/2013/10/mima_keyboard.jpg" class="lazyload placeholder" data-srcset="/assets/2013/10/mima_keyboard.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"><br>布局跟电脑键盘一样，而数字的位置却和手机键盘相反，也就是说我把密码设成了<code>168659</code>。  </p><p>然后再看ATM机的键盘的数字，位置跟手机键盘的一样：<br><img src="/assets/2013/10/mima_atm.jpg" class="lazyload placeholder" data-srcset="/assets/2013/10/mima_atm.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg">  </p><p>而我之所以会发现位置反了，是因为刚才取钱时输入了<code>762653</code>，取钱时比较小心，所以对这个数字留有印象，在密码键盘输入密码时发现数字不太一样就引起警觉了。</p><p>最后客服MM会心的一笑说：“输反了吧。”<br>我只好无奈地说：“是的。”  </p><p><img src="/assets/2013/10/mima_dont_mind.jpg" class="lazyload placeholder" data-srcset="/assets/2013/10/mima_dont_mind.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p>]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 奇思妙想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯微云音乐外链解析源码</title>
      <link href="/the-source-code-of-tencent-weiyun-music-outside-link.html"/>
      <url>/the-source-code-of-tencent-weiyun-music-outside-link.html</url>
      
        <content type="html"><![CDATA[<p>最近有人问怎么解析微云的音乐外链，于是我花了点时间看了一下。<br>例如有一个音乐分享地址：<a href="http://share.weiyun.com/37b92875f407f6d595c6eab92792d41a">http://share.weiyun.com/37b92875f407f6d595c6eab92792d41a</a>。<br>查看网页源码，源码里面没有音乐的下载地址，只有一个加密过的地址<code>dl_encrypt_url</code>。<br>用<code>firebug</code>调试了下，发现<code>js</code>的解密函数太麻烦，所以放弃另寻他法。  </p><p>先用<code>firefox</code>的插件<code>User Agent Switcher</code>伪装成手机浏览器：<br><img src="/assets/2013/09/weiyun_useragent.png" class="lazyload placeholder" data-srcset="/assets/2013/09/weiyun_useragent.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg">  </p><p>然后访问页面，可以发现微云的手机版网页源码里有下载地址：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;ui-btn-open&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://sync.box.qq.com/share_dl.fcg?sharekey=37b92875f407f6d595c6eab92792d41a&amp;uin=1989052999&amp;skey=&amp;fid=0ef59818-982c-42e6-96ef-85460737055c&amp;dir=&amp;pdir=478a8e765ccd740aa7b6436361a4fccb&amp;zn=%E5%A4%A9%E4%B9%8B%E7%97%95%E5%A6%82%E5%BF%86%E7%8E%89%E5%84%BF%E6%9B%B2.mp3&amp;os_info=iphone&amp;browser=webkit&amp;ver=11&quot;</span>&gt;</span>打 开<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是匹配出这个地址后跳转，发现不成功。<br>复制这个地址在浏览器中打开，会发现网页返回<code>403</code>错误，拒绝访问：<br><img src="/assets/2013/09/weiyun_403.png" class="lazyload placeholder" data-srcset="/assets/2013/09/weiyun_403.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg">  </p><p>但是在微云网页里点击下载按钮后，会打开这个地址下载音乐。<br>根据上面的信息可以推断出，服务器判断了下载地址的来路<code>referer</code>。</p><p>如果用<code>curl</code>伪造来路访问下载地址，就不会出现<code>403</code>错误了。<br>但是<code>curl</code>不能进行<code>301</code>重定向，而音乐外链需要<code>301</code>重定向才能实现。  </p><p>用<code>firebug</code>监控网页请求，发现请求下载地址后，会跳转到真实的音乐地址：<br><img src="/assets/2013/09/weiyun_location.png" class="lazyload placeholder" data-srcset="/assets/2013/09/weiyun_location.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"><br>那么可以从下载地址的响应头信息里匹配出<code>Location</code>的地址再进行跳转。  </p><p>把下面的代码保存为<code>weiyun.php</code>文件，放在网站根目录：  </p><figure class="highlight php"><figcaption><span>weiyun.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//最后更新时间：2013-12-12</span></span><br><span class="line"><span class="comment">//构造微云分享地址</span></span><br><span class="line">preg_match(<span class="string">&#x27;|\/.+\/(\w+)\.|&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>], <span class="variable">$res</span>);</span><br><span class="line"><span class="variable">$key</span> = <span class="variable">$res</span> ? <span class="variable">$res</span>[<span class="number">1</span>] : <span class="keyword">exit</span>(<span class="string">&quot;Url format error!&quot;</span>);</span><br><span class="line"><span class="variable">$url</span> = <span class="variable">$referer</span> = <span class="string">&quot;http://share.weiyun.com/<span class="subst">$key</span>&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取源码，匹配出下载地址</span></span><br><span class="line"><span class="variable">$src</span> = curl_get_contents(<span class="variable">$url</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">preg_match(<span class="string">&#x27;|shareInfo = (.*);|Ui&#x27;</span>, <span class="variable">$src</span>, <span class="variable">$res</span>);</span><br><span class="line"><span class="variable">$json</span> = <span class="variable">$res</span> ? json_decode(<span class="variable">$res</span>[<span class="number">1</span>]) : <span class="keyword">exit</span>(<span class="string">&quot;Can not get shareInfo!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//拼接歌曲链接</span></span><br><span class="line"><span class="variable">$songurl</span> = implode(<span class="string">&quot;&quot;</span>, <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&quot;http://&quot;</span>.<span class="variable">$json</span>-&gt;dl_svr_host,</span><br><span class="line">    <span class="string">&quot;:&quot;</span>.<span class="variable">$json</span>-&gt;dl_svr_port,</span><br><span class="line">    <span class="string">&quot;/ftn_handler&quot;</span>,</span><br><span class="line">    <span class="string">&quot;/&quot;</span>.<span class="variable">$json</span>-&gt;dl_encrypt_url,</span><br><span class="line">    <span class="string">&quot;?fname=&quot;</span>.urlencode(<span class="variable">$json</span>-&gt;filename),</span><br><span class="line">));</span><br><span class="line">header(<span class="string">&quot;Location: <span class="subst">$songurl</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用curl获取网页源码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl_get_contents</span>(<span class="params"><span class="variable">$url</span>, <span class="variable">$referer</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$curl</span> = curl_init(<span class="variable">$url</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_HEADER, <span class="number">1</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_REFERER, <span class="variable">$referer</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_USERAGENT, <span class="string">&quot;Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us)&quot;</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_TIMEOUT, <span class="number">10</span>);</span><br><span class="line">    <span class="variable">$src</span> = curl_exec(<span class="variable">$curl</span>);</span><br><span class="line">    curl_close(<span class="variable">$curl</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$src</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果分享地址为：<br><code>http://share.weiyun.com/37b92875f407f6d595c6eab92792d41a</code></p><p>则外链地址为：<br><code>http://www.poboke.com/weiyun.php/37b92875f407f6d595c6eab92792d41a.mp3</code></p>]]></content>
      
      
      <categories>
          
          <category> 其它分类 </category>
          
          <category> 过期代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 音乐外链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数学与魔术：会说话的王牌》</title>
      <link href="/math-and-magic-the-chatty-jokers.html"/>
      <url>/math-and-magic-the-chatty-jokers.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>伦敦大学玛丽女王学院的公开课《数学与魔术》，教授的是一些和数学有关的魔术。</p><p>公开课里有一些魔术表演并没有解说魔术的秘密，而是让观众自己去分析推理出魔术所用到的数学原理，本系列文章探讨的是公开课里面魔术表演的推理过程。</p></blockquote><div class="note link green"><p>点击链接查看第3集的魔术表演：<a href="https://open.163.com/newview/movie/free?pid=M8JHGS5KF&mid=M8JHKKFU2">《数学与魔术：会说话的王牌》</a></p></div><p><strong>接下来就是见证推理的时刻：</strong></p><p>一、因为魔术表演前没有展牌，而且魔术表演中没有翻牌的动作，而魔术最后有两张鬼牌正面向上，这说明了两张鬼牌在表演前就已经翻过来了。<br>魔术表演最后看到一张鬼牌后面写着17，另一张鬼牌后面写着43，这些数字都是表演前就写好的。既然早就写好了，那么无论表演多少次，无论观众选到什么牌，魔术师通过一定的魔术手法，观众选的两张牌都只会出现在第17张和第43张的位置。  </p><p>二、如果观察得仔细的话，应该不难发现，魔术师在把两张鬼牌拿出来的时候，两张鬼牌把整副牌分成A、B、C三叠：<br><img src="/assets/2013/09/joker_1.png" class="lazyload placeholder" data-srcset="/assets/2013/09/joker_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>而收牌的时候，魔术师偷偷地把C放到了A、B中间，在做完了这个隐蔽的动作后，观众选的牌才会跑到17和43两个位置。：<br><img src="/assets/2013/09/joker_2.png" class="lazyload placeholder" data-srcset="/assets/2013/09/joker_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p><strong>（注：红心K在C1里面，黑桃A在B1里面）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">这时可以得出下面的公式：</span><br><span class="line">A + C1 = 17    ①</span><br><span class="line">A + C1 + C2 + B1 = 43    ②</span><br><span class="line"></span><br><span class="line">由①②可以得出：</span><br><span class="line">C2 + B1 = 43 - 17 = 26    ③</span><br><span class="line"></span><br><span class="line">由于整副牌有52张，所以：</span><br><span class="line">B2 = 52 - 43 = 9    ④</span><br></pre></td></tr></table></figure><p>三、回到魔术师还没交换A、B、C牌叠的时候，看起来应该是这个样子的：<br><img src="/assets/2013/09/joker_3.png" class="lazyload placeholder" data-srcset="/assets/2013/09/joker_3.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>四、再回到观众选牌的时候，首先观众A拿了三分之一的牌，然后观众B也拿了三分之一的牌。然后观众A先放下牌，观众B再放下牌，也就是说，观众AB拿的牌叠的顺序交换了。<br>那么把观众拿到的两叠牌交换回去，结果是这样子的：<br><img src="/assets/2013/09/joker_4.png" class="lazyload placeholder" data-srcset="/assets/2013/09/joker_4.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>也就是求出两张王牌在牌中的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">由上图可以得出以下公式：</span><br><span class="line">J1 = B2 + 1</span><br><span class="line">J2 = B2 + C1 + A + 2</span><br><span class="line"></span><br><span class="line">结合前面得出的公式③④可以得出：</span><br><span class="line">J1 = B2 + 1 = 9 + 1 = 10</span><br><span class="line">J2 = B2 + C1 + A + 2 = 52 - (B1+C2) + 2 = 52 - 26 + 2 = 28</span><br></pre></td></tr></table></figure><p>所以第一张王牌在第10张，背后写着43；<br>第二张王牌在第28张，背后写着17。</p>]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 魔术学堂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教学 </tag>
            
            <tag> 魔术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac大家来找碴豪华版辅助工具</title>
      <link href="/pictures-mania-deluxe-cheater.html"/>
      <url>/pictures-mania-deluxe-cheater.html</url>
      
        <content type="html"><![CDATA[<p>最近想学一下Mac系统的程序编写，觉得从辅助工具开始写起比较有兴趣学下去。</p><p>在App Store的免费游戏分类里有一个《大家来找碴豪华版》的游戏，因为几年前写过《QQ美女找茬》游戏的辅助，所以就决定写一个找碴的辅助工具了。</p><p>《QQ美女找茬》左右两幅图都是未修改过的原图，然后游戏把5个修改过的小图片绘制在右边的图片上面，这样就形成了5处不同的地方。</p><p>通过判断左右两幅图相同位置的点的颜色值是否相同，就可以知道该点是不是修改过的。如果把不同的点都替换为黄色的话，可以看到有5个很规则的小方块：<br><img src="/assets/2013/08/zhaocha_girl.jpg" class="lazyload placeholder" data-srcset="/assets/2013/08/zhaocha_girl.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>但是《大家来找碴豪华版》这个游戏比较复杂，首先图片5处不同的地方都是直接ps的，所以不会形成很规则的方块。<br>还有右边的图片经过一定的处理，左右两幅图相同位置的点的颜色值有所偏差，所以不能通过判断两个点的颜色值是否相等来区分，而是通过计算颜色的RBG值的方差是否大于某个值来区分。<br><img src="/assets/2013/08/zhaocha_image.jpg" class="lazyload placeholder" data-srcset="/assets/2013/08/zhaocha_image.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>下面是用到的一些代码：</p><p><strong>一、遍历所有打开的窗口，通过游戏窗口名获取窗口id。</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line">- (<span class="keyword">id</span>)initWithWindowName:(<span class="built_in">NSString</span> *)windowName</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.windowName = windowName;</span><br><span class="line">        <span class="keyword">self</span>.windowId = [<span class="keyword">self</span> windowId];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过窗口名字获取窗口id</span></span><br><span class="line">- (<span class="built_in">CGWindowID</span>)windowId</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取屏幕上所有窗口的信息</span></span><br><span class="line">    <span class="built_in">CFArrayRef</span> windowsRef = <span class="built_in">CGWindowListCreate</span>(kCGWindowListOptionOnScreenOnly, kCGNullWindowID);</span><br><span class="line">    <span class="built_in">NSArray</span> *windowInfos = (__bridge <span class="built_in">NSArray</span> *)<span class="built_in">CGWindowListCreateDescriptionFromArray</span>(windowsRef);</span><br><span class="line">    <span class="built_in">NSUInteger</span> count = windowInfos.count;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历窗口，找到名字相同的窗口，获取窗口id</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="built_in">NSDictionary</span> *windowInfo = windowInfos[i];</span><br><span class="line">        <span class="built_in">NSString</span> *name = [windowInfo objectForKey:(<span class="built_in">NSString</span> *)kCGWindowName];</span><br><span class="line">        <span class="keyword">if</span> ([name isEqualToString:<span class="keyword">self</span>.windowName]) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">CGWindowID</span>)<span class="built_in">CFArrayGetValueAtIndex</span>(windowsRef, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二、截取该窗口的图像。</strong>  </p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)captrueWindow</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//通过窗口id获取窗口信息</span></span><br><span class="line">    <span class="built_in">CFArrayRef</span> windowRef = <span class="built_in">CGWindowListCreate</span>(kCGWindowListOptionIncludingWindow, <span class="keyword">self</span>.windowId);</span><br><span class="line">    <span class="built_in">NSArray</span> *windowInfos = (__bridge <span class="built_in">NSArray</span> *)(<span class="built_in">CGWindowListCreateDescriptionFromArray</span>(windowRef));</span><br><span class="line">    <span class="built_in">NSDictionary</span> *windowInfo = windowInfos[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取窗口坐标和大小</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *bounds = [windowInfo objectForKey:(<span class="built_in">NSString</span> *)kCGWindowBounds];</span><br><span class="line">    <span class="built_in">CGRectMakeWithDictionaryRepresentation</span>((__bridge <span class="built_in">CFDictionaryRef</span>)(bounds), &amp;_imageRect);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过和大小创建图像</span></span><br><span class="line">    <span class="built_in">CGImageRef</span> imgRef = <span class="built_in">CGWindowListCreateImageFromArray</span>(_imageRect, windowRef, kCGWindowImageDefault);</span><br><span class="line">    <span class="built_in">NSImage</span> *image = [[<span class="built_in">NSImage</span> alloc] initWithCGImage:imgRef size:<span class="built_in">NSZeroSize</span>];</span><br><span class="line">    [image lockFocus];</span><br><span class="line">    <span class="keyword">self</span>.bitmap = [[<span class="built_in">NSBitmapImageRep</span> alloc] initWithFocusedViewRect:<span class="built_in">NSMakeRect</span>(<span class="number">0</span>, <span class="number">0</span>, image.size.width, image.size.height)];</span><br><span class="line">    [image unlockFocus];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>三、求两点颜色RGB值的方差。</strong>  </p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CGFloat</span> avgRed = (red1 + red2) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">CGFloat</span> avgGreen = (green1 + green2) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">CGFloat</span> avgBlue = (blue1 + blue2) / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">CGFloat</span> sRed = pow(red1 - avgRed, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">CGFloat</span> sGreen = pow(green1 - avgGreen, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">CGFloat</span> sBlue = pow(blue1 - avgBlue, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">CGFloat</span> s2 = sRed + sGreen + sBlue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s2 &gt; <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="comment">//如果该点不同，则替换为红色</span></span><br><span class="line">    [<span class="keyword">self</span>.leftBitmap setColor:[<span class="built_in">NSColor</span> redColor] atX:i y:j];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//否则降低该点红色的色值</span></span><br><span class="line">    <span class="built_in">NSColor</span> *color = [<span class="built_in">NSColor</span> colorWithCalibratedRed:red1*<span class="number">0.1</span> green:green1 blue:blue1 alpha:<span class="number">1</span>];</span><br><span class="line">    [<span class="keyword">self</span>.leftBitmap setColor:color atX:i y:j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果方差大于某个值(例如200)，就说明两点的颜色不相近，则把该点的颜色替换为红色。否则就把该点的R值除以10以降低红色值，这样就不会干扰到红点了。结果如下所示：<br><img src="/assets/2013/08/zhaocha_grid.png" class="lazyload placeholder" data-srcset="/assets/2013/08/zhaocha_grid.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p><strong>四、自动点击。</strong></p><p>要实现自动点击，就要找出5个红点连起来的区域。<br>我的做法是把图片分割成20*20=400个方块，创建一个400个元素的数组，统计每个方块里红点的数量存到数组里，然后按从多到少排序。<br>排序后数组的第一个元素就是有最多红点的，然后以这个格子所在的位置开始上下左右递归。如果相邻的格子里有红点，就说明它们是连在一起的区域，把它们存到一个临时数组，并把他们从大数组里移除。<br>递归结束后把临时数组里的元素的x坐标和y坐标分别进行排序，然后把最小的x值和最大的x值相加再除以2可以得出区域的横坐标中点，同理得出区域的纵坐标中点。<br>再让鼠标移动到这个中点的坐标点击就行了。  </p><p>不知道是不是录像的原因，视频里辅助的窗口显示的颜色有问题，而实际看到是没问题的。</p><p>视频观看地址为：<br><code>https://v.youku.com/v_show/id_XNTk3NTY3NTU2.html</code></p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Objective-C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python解《十滴水》辅助工具算法源码</title>
      <link href="/python-solve-10drops-cheater.html"/>
      <url>/python-solve-10drops-cheater.html</url>
      
        <content type="html"><![CDATA[<p>接上一篇：<a href="/python-solve-10drops.html">Python解《十滴水》算法</a></p><p><strong>先看个演示视频，建议超清全屏看。</strong><br><code>https://v.youku.com/v_show/id_XNTgyMzU2NTA4.html</code></p><p>自动点击使用了AutoPy库，AutoPy是一个简单跨平台的Python GUI工具包，可以控制鼠标，键盘，匹配颜色和屏幕上的位图。使用纯ANSI C编写而成，可运行在Mac OS X、Windows和X11上。<br><strong>GitHub地址：</strong><a href="https://github.com/msanders/autopy"><strong>https://github.com/msanders/autopy</strong></a><br><strong>API帮助文档：</strong><a href="http://www.autopy.org/documentation/api-reference/index.html"><strong>http://www.autopy.org/documentation/api-reference/index.html</strong></a><br>虽然介绍说是跨平台，但是从Mac OS X 10.6之后开始，Mac系统就禁用了不少API，作者也停止了维护，所以Mac版本用不了了，只能用Windows虚拟机进行测试。</p><p>辅助工具制作过程如下：</p><h3 id="一、定位游戏的位置"><a href="#一、定位游戏的位置" class="headerlink" title="一、定位游戏的位置"></a>一、定位游戏的位置</h3><p>因为要通过屏幕取色的方法来获取水滴数，所以首先要知道游戏在屏幕上的位置。<br>用屏幕取色工具可以发现，游戏边框的颜色(#CFDFEB)和其它颜色不同，所以可以通过查找游戏边框的颜色的方法来定位：<br><img src="/assets/2013/07/cheater_boder.png" class="lazyload placeholder" data-srcset="/assets/2013/07/cheater_boder.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>因为屏幕的坐标原点在屏幕左上角，所以可以把浏览器移到屏幕左上角，竖直方向在屏幕垂直居中，搜索游戏边框的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过游戏边框的颜色获取游戏边框的位置</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_border_position</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="comment">#截取整个屏幕</span></span><br><span class="line">    self.screen = bitmap.capture_screen()</span><br><span class="line">    <span class="comment">#注意：浏览器移到屏幕左上角，游戏垂直居中</span></span><br><span class="line">    self.border_x = <span class="number">0</span></span><br><span class="line">    self.border_y = <span class="number">0</span></span><br><span class="line">    self.border_color = <span class="number">0xCFDFEB</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(self.screen.width):</span><br><span class="line">        color_value = self.screen.get_color(x, self.screen.height/<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">if</span> color_value == self.border_color:</span><br><span class="line">            self.border_x = x</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(self.screen.height):</span><br><span class="line">        <span class="keyword">if</span> self.screen.get_color(<span class="number">500</span>, y) == self.border_color:</span><br><span class="line">            self.border_y = y</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="二、确定格子边距"><a href="#二、确定格子边距" class="headerlink" title="二、确定格子边距"></a>二、确定格子边距</h3><p>装水滴的格子边缘与游戏边框的距离是固定的，用图片编辑工具可以很方便地测量出格子边缘与游戏边框水平相差35像素，竖直相差20像素。<br>顺便测量出每个格子的大小是60*60像素。</p><h3 id="三、判断某个点是不是绿色"><a href="#三、判断某个点是不是绿色" class="headerlink" title="三、判断某个点是不是绿色"></a>三、判断某个点是不是绿色</h3><p>因为水滴是半透明的，会和背景颜色混在一起，所以不能判断一个点的颜色是不是等于某种绿色。<br>用屏幕取色工具观察颜色的规律，很快就能得出一个结论：“如果一个点的颜色的r值小于0x70，并且g值大于0XA0，就表示该点是绿色。”这只是一个大概的范围，比如r小于0x80也是可以的。</p><h3 id="四、获取每个格子的水滴数"><a href="#四、获取每个格子的水滴数" class="headerlink" title="四、获取每个格子的水滴数"></a>四、获取每个格子的水滴数</h3><p>因为水滴是绿色的，可以很容易区分开水滴和背景的颜色，再找出4种水滴不重叠的地方：<br><img src="/assets/2013/07/cheater_position.png" class="lazyload placeholder" data-srcset="/assets/2013/07/cheater_position.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>把4种水滴的相对位置的图拼在一起，然后在每种水滴不重叠的地方随便找1个坐标点，分别用来标识4种水滴。<br>程序首先判断(35,55)处是不是绿色，是的话就说明该格子有4滴水，不是就判断(30,5)是不是绿色，是的话就说明该格子有3滴水……如果4个点都不是绿色，那么该格子就有0滴水：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取某个格子上的水滴数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_drops</span>(<span class="params">self, i, j</span>):</span></span><br><span class="line">    <span class="comment">#pos_list数组存放4、3、2、1滴水的位置相对坐标</span></span><br><span class="line">    pos_list = [(<span class="number">35</span>, <span class="number">55</span>), (<span class="number">30</span>, <span class="number">5</span>), (<span class="number">48</span>, <span class="number">25</span>), (<span class="number">30</span>, <span class="number">25</span>)]</span><br><span class="line">    <span class="comment">#计算第j行第i列的格子原点(格子左上角的屏幕坐标)</span></span><br><span class="line">    grid_x = self.offset_x + self.grid_length * i</span><br><span class="line">    grid_y = self.offset_y + self.grid_length * j</span><br><span class="line">    <span class="keyword">for</span> index, (x, y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(pos_list):</span><br><span class="line">        <span class="comment">#获取格子原点加上相对坐标后的点的颜色值</span></span><br><span class="line">        color_value = self.screen.get_color(grid_x + x, grid_y + y)</span><br><span class="line">        r, g, b = color.hex_to_rgb(color_value)</span><br><span class="line">        <span class="comment">#如果该点是水滴的颜色就返回水滴数</span></span><br><span class="line">        <span class="keyword">if</span> r &lt; <span class="number">0x70</span> <span class="keyword">and</span> g &gt; <span class="number">0xA0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span> - index</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="五、移动鼠标点击格子"><a href="#五、移动鼠标点击格子" class="headerlink" title="五、移动鼠标点击格子"></a>五、移动鼠标点击格子</h3><p>要把格子的坐标转化为屏幕坐标，再移动鼠标指针到该位置单击左键：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#鼠标点击某个格子</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">click</span>(<span class="params">self, point</span>):</span></span><br><span class="line">    grid_x = self.offset_x + self.grid_length * (point[<span class="number">1</span>] + <span class="number">0.5</span>)</span><br><span class="line">    grid_y = self.offset_y + self.grid_length * (point[<span class="number">0</span>] + <span class="number">0.5</span>)</span><br><span class="line">    mouse.move(<span class="built_in">int</span>(grid_x), <span class="built_in">int</span>(grid_y))</span><br><span class="line">    mouse.click()</span><br></pre></td></tr></table></figure><h3 id="六、源码下载地址"><a href="#六、源码下载地址" class="headerlink" title="六、源码下载地址"></a>六、源码下载地址</h3><p>源码可以在这里下载：<a href="https://github.com/poboke/Ten-drops-cheater">https://github.com/poboke/Ten-drops-cheater</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息安全技术大赛——破解apk</title>
      <link href="/information-security-technology-contest-crack-apk.html"/>
      <url>/information-security-technology-contest-crack-apk.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目标题：可以用金币购买的key<br>题目描述：努力赚金币买key吧。<br>题目附件：<a href="http://pan.baidu.com/share/link?shareid=501373&uk=1562437020">Game.apk</a></p></blockquote><p>下载附件后解压，在Android手机或模拟器中安装apk：<br><img src="/assets/2013/05/apk_buy_key.png" class="lazyload placeholder" data-srcset="/assets/2013/05/apk_buy_key.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>要求有999个金币才能买key，但是因为余额只有99，所以买不了。<br>接下来就是反编译apk的时刻，首先下载dex2jar：<br><a href="https://code.google.com/p/dex2jar/downloads/list">https://code.google.com/p/dex2jar/downloads/list</a></p><p>将Game.apk改名为Game.zip，然后用压缩软件解压。<br>把解压后的classes.dex文件放到dex2jar文件夹里，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh d2j-dex2jar.sh classes.dex</span><br></pre></td></tr></table></figure><p>执行后生成了classes_dex2jar.jar文件。</p><p>再下载JD-GUI软件，作用是查看jar文件反编译后的java代码：<br><a href="http://java.decompiler.free.fr/?q=jdgui">http://java.decompiler.free.fr/?q=jdgui</a></p><p>用JD-GUI打开classes-dex2jar.jar，搜索关键字<code>&quot;价格只能数字&quot;</code>，就会转到判断金币的代码处：<br><img src="/assets/2013/05/apk_jdgui.png" class="lazyload placeholder" data-srcset="/assets/2013/05/apk_jdgui.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>可见<code>a.class</code>的包名是<code>syclover.jerryl3e.cuitinfosecgamelevel1</code>，下面为验证金币的代码：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class">  <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  a(MainActivity paramMainActivity)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View paramView)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 获取文本框输入的数字</span></span><br><span class="line">      <span class="keyword">int</span> j = Integer.parseInt(MainActivity.a(<span class="keyword">this</span>.a).getEditableText().toString());</span><br><span class="line">      i = j;</span><br><span class="line">      <span class="comment">// 如果输入的数字小于等于0或者大于99，就弹出提示</span></span><br><span class="line">      <span class="keyword">if</span> ((i &gt; <span class="number">99</span>) || (i == <span class="number">0</span>) || (i &lt;= <span class="number">0</span>))</span><br><span class="line">      &#123;</span><br><span class="line">        MainActivity.a(<span class="keyword">this</span>.a, <span class="string">&quot;价格只能数字，而且要不能大于当前余额&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception localException)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 这里会跳出循环？好像反编译后的代码有问题。</span></span><br><span class="line">      <span class="keyword">while</span> (<span class="keyword">true</span>)</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// 向服务器提交加密后的金币</span></span><br><span class="line">      ProgressDialog localProgressDialog = ProgressDialog.show(paramView.getContext(), <span class="string">&quot;&quot;</span>, <span class="string">&quot;正在购买……&quot;</span>, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">      h localh = <span class="keyword">new</span> h(paramView.getContext(), localProgressDialog);</span><br><span class="line">      String[] arrayOfString1 = &#123; <span class="string">&quot;price&quot;</span> &#125;;</span><br><span class="line">      String[] arrayOfString2 = <span class="keyword">new</span> String[<span class="number">1</span>];</span><br><span class="line">      arrayOfString2[<span class="number">0</span>] = MainActivity.a(<span class="keyword">this</span>.a, MainActivity.a(<span class="keyword">this</span>.a).getEditableText().toString(), <span class="string">&quot;JerryL3e&quot;</span>);</span><br><span class="line">      String[] arrayOfString3 = &#123; <span class="string">&quot;flag&quot;</span>, <span class="string">&quot;key&quot;</span> &#125;;</span><br><span class="line">      localh.a(<span class="string">&quot;http://www.jerryl3e.com/cuitandroidgame/api.php&quot;</span>);</span><br><span class="line">      localh.a(arrayOfString1);</span><br><span class="line">      localh.b(arrayOfString2);</span><br><span class="line">      localh.c(arrayOfString3);</span><br><span class="line">      localh.start();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前在Windows下反编译出的Java代码里有一些跳转语句，但是在MacOS反编译出来的却没有。<br>根据上面的判断条件，如果金币在1到99之间的话，就会转到下面的分支执行，用金币购买key时用了不少加密算法，好像先把金币用DES加密后再提交数据，验证成功后再用AES解密key。</p><p>由于游戏界面显示要输入999才能购买成功，所以最简单的方法就是修改上面的判断条件，但是在这里改是不行的，因为这个jar不能再编译成apk。<br>支持正反编译apk的只有apktool了，但是apktool反编译后的代码是smali代码，比较难懂。<br>虽然语法难懂，但是多看看帮助文档就懂了，那么下载apktool。<br><a href="https://code.google.com/p/android-apktool/downloads/list">https://code.google.com/p/android-apktool/downloads/list</a>  </p><p>需要下载<code>apktool1.5.2.tar.bz2</code>和<code>apktool-install-macosx-r05-ibot.tar.bz2</code>，解压后和Game.apk放到一起，文件如下图所示：<br><img src="/assets/2013/05/apk_apktool_files.png" class="lazyload placeholder" data-srcset="/assets/2013/05/apk_apktool_files.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>用终端进入apktool的文件夹后用以下命令反编译apk：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./apktool d -f Game.apk game</span><br></pre></td></tr></table></figure><p>执行后生成了一个名字为game的文件夹，以下是game目录的树状图。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── AndroidManifest.xml</span><br><span class="line">├── apktool.yml</span><br><span class="line">├── res</span><br><span class="line">│   └── ......</span><br><span class="line">└── smali</span><br><span class="line">    ├── android</span><br><span class="line">    │   └── ......</span><br><span class="line">    └── syclover</span><br><span class="line">        └── jerryl3e</span><br><span class="line">            └── cuitinfosecgamelevel1</span><br><span class="line">                ├── MainActivity.smali</span><br><span class="line">                ├── a.smali</span><br><span class="line">                ├── b.smali</span><br><span class="line">                ├── c.smali</span><br><span class="line">                ├── d.smali</span><br><span class="line">                ├── e.smali</span><br><span class="line">                ├── f.smali</span><br><span class="line">                ├── g.smali</span><br><span class="line">                ├── h.smali</span><br><span class="line">                └── i.smali</span><br></pre></td></tr></table></figure><p>根据包名<code>syclover.jerryl3e.cuitinfosecgamelevel1</code>找到<code>a.smali</code>，代码如下：  </p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">.method</span><span class="keyword"> public</span> onClick(<span class="class">Landroid/view/View;</span>)V</span><br><span class="line"></span><br><span class="line">    // ......</span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">:goto_0</span></span><br><span class="line">    // 把16位(两字节)的0x63(99)放入v2寄存器</span><br><span class="line">   <span class="built_in"> const/16 </span>v2, 0x63</span><br><span class="line">    // 如果v0的值(用户输入的金币)大于v2，就跳到标签cond_0</span><br><span class="line">   <span class="built_in"> if-gt </span>v0, v2,<span class="keyword"> :cond_0</span></span><br><span class="line">    // 如果v0的值等于0，就跳到标签cond_0</span><br><span class="line">   <span class="built_in"> if-eqz </span>v0,<span class="keyword"> :cond_0</span></span><br><span class="line">    // 如果v0大于0就跳到cond_1，也就是购买key的地方</span><br><span class="line">   <span class="built_in"> if-gtz </span>v0,<span class="keyword"> :cond_1</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">:cond_0</span></span><br><span class="line">    // 提示<span class="string">&quot;价格只能数字，而且要不能大于当前余额&quot;</span></span><br><span class="line">   <span class="built_in"> iget-object </span>v0, p0, <span class="class">Lsyclover/jerryl3e/cuitinfosecgamelevel1/a;</span>-&gt;a:<span class="class">Lsyclover/jerryl3e/cuitinfosecgamelevel1/MainActivity;</span></span><br><span class="line">   <span class="built_in"> const-string </span>v1, <span class="string">&quot;\u4ef7\u683c\u53ea\u80fd\u6570\u5b57\uff0c\u800c\u4e14\u8981\u4e0d\u80fd\u5927\u4e8e\u5f53\u524d\u4f59\u989d&quot;</span></span><br><span class="line">   <span class="built_in"> invoke-static </span>&#123;v0, v1&#125;, <span class="class">Lsyclover/jerryl3e/cuitinfosecgamelevel1/MainActivity;</span>-&gt;a(<span class="class">Lsyclover/jerryl3e/cuitinfosecgamelevel1/MainActivity;</span><span class="class">Ljava/lang/String;</span>)V</span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">:goto_1</span></span><br><span class="line">    // 返回，不执行下面的代码</span><br><span class="line">   <span class="built_in"> return-void</span></span><br><span class="line"><span class="built_in"></span><span class="keyword"></span></span><br><span class="line"><span class="keyword">:catch_0</span></span><br><span class="line">    // 异常处理</span><br><span class="line">   <span class="built_in"> move-exception </span>v0</span><br><span class="line">   <span class="built_in"> move </span>v0, v1</span><br><span class="line">   <span class="built_in"> goto </span>:goto_0</span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">:cond_1</span></span><br><span class="line">    // 购买key</span><br><span class="line">   <span class="built_in"> invoke-virtual </span>&#123;p1&#125;, <span class="class">Landroid/view/View;</span>-&gt;getContext()<span class="class">Landroid/content/Context;</span></span><br><span class="line">   <span class="built_in"> move-result-object </span>v0</span><br><span class="line">   <span class="built_in"> const-string </span>v2, <span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="built_in"> const-string </span>v3, <span class="string">&quot;\u6b63\u5728\u8d2d\u4e70\u2026\u2026&quot;</span></span><br><span class="line"></span><br><span class="line">    // ......<span class="keyword"></span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">.end method</span></span><br></pre></td></tr></table></figure><p>根据上面的判断条件，只要把0x63改成一个大于999的数值就行了，不妨改成：  </p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const/16 v2, 0x6363</span><br></pre></td></tr></table></figure><p>这样的话999既不大于0x6363，也不等于0，而且大于0，所以会跳到购买key的地方。<br>保存后回到apktool文件夹，执行以下命令把smali文件编译成apk：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./apktool b game</span><br></pre></td></tr></table></figure><p>执行后在game目录下生成了一个dist目录，里面就是编译好的Game.apk。<br>但这个apk是不能安装到手机的，因为还没签名，所以要下载签名工具：<br><a href="https://github.com/glitterballs/release-tools/tree/master/SignApk">https://github.com/glitterballs/release-tools/tree/master/SignApk</a>  </p><p>把编译出来的Game.apk改名为Game.zip，放到SignApk目录里。<br>用终端进入SignApk目录，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar signapk.jar certificate.pem key.pk8 Game.zip Game_signed.zip</span><br></pre></td></tr></table></figure><p>执行后生成了Game_signed.zip，再改名为Game_signed.apk就可以在手机安装了。<br>安装后输入999金币购买，终于购买成功了：<br><img src="/assets/2013/05/apk_key.png" class="lazyload placeholder" data-srcset="/assets/2013/05/apk_key.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> CTF比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息安全技术大赛——big data</title>
      <link href="/information-security-technology-contest-big-data.html"/>
      <url>/information-security-technology-contest-big-data.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目标题：big data<br>题目描述：要吐就去wc，合并起来吐哦亲。<br>题目附件：<a href="http://pan.baidu.com/share/link?shareid=499174&uk=1562437020">bigdata.7z</a></p></blockquote><p>看题目就知道是要用到很大的数据了，其实这道题说难不难，说简单也不简单。<br>首先下载题目的附件，发现有150.85Mb。</p><p>我用的是MacOS系统，安装p7zip后用以下命令解压7z压缩包：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7za x bigdata.7z</span><br></pre></td></tr></table></figure><p>下面是终端输出的解压信息：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Extracting  0/0/1/0/3/1/3/3/400</span><br><span class="line">Extracting  0/0/2/0/2/2/5/6/401</span><br><span class="line">Extracting  0/0/0/2/3/5/1/3/402</span><br><span class="line">Extracting  0/1/0/0/3/4/3/3/403</span><br><span class="line">Extracting  0/1/2/0/2/5/4/0/404</span><br><span class="line">Extracting  0/0/0/0/0/3/5/1/405</span><br><span class="line">Extracting  0/1/1/1/3/5/5/2/406</span><br><span class="line">Extracting  0/0/2/1/3/5/6/7/407</span><br><span class="line">Extracting  0/1/0/1/1/3/0/0/408</span><br><span class="line">Extracting  0/1/0/0/0/4/1/6/409</span><br><span class="line">Extracting  myboyfriend.png</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">Folders: 46233</span><br><span class="line">Files: 11</span><br><span class="line">Size:       503091348</span><br><span class="line">Compressed: 158023104</span><br></pre></td></tr></table></figure><p>感觉很牛B的样子，150多M的压缩包解压后有500多M，包含了46233个文件夹和11个文件。<br>其中有一张名为<code>myboyfriend.png</code>的图片，还有10个文件，每个文件有50多M。</p><p>先打开图片看一下，居然是一张很猥琐的图片：<br><img src="/assets/2013/05/bigdata_myboyfriend.png" class="lazyload placeholder" data-srcset="/assets/2013/05/bigdata_myboyfriend.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>看来题目的提示就是<code>Python image steganography</code>了。<br>Google一下关键字，点开第一个链接<a href="http://domnit.org/stepic/doc/">《Stepic》</a>。<br>看介绍说是Python的图片隐写术，也就是把一些信息隐藏在图片里的技术。</p><p>按照官方教程先安装Stepic:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">easy_install stepic</span><br></pre></td></tr></table></figure><p>然后提取图片里的隐藏信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stepic --decode --image-in=myboyfriend.png --out=tips</span><br></pre></td></tr></table></figure><p>执行后在目录下生成了一个tips文件，用MacVim打开文件，查看内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tip</span>&gt;</span><span class="symbol">&amp;#26377;</span>10<span class="symbol">&amp;#20010;</span><span class="symbol">&amp;#20307;</span><span class="symbol">&amp;#31215;</span><span class="symbol">&amp;#36739;</span><span class="symbol">&amp;#22823;</span><span class="symbol">&amp;#30340;</span><span class="symbol">&amp;#25991;</span><span class="symbol">&amp;#26412;</span><span class="symbol">&amp;#25991;</span><span class="symbol">&amp;#20214;</span><span class="symbol">&amp;#38543;</span><span class="symbol">&amp;#26426;</span><span class="symbol">&amp;#25955;</span><span class="symbol">&amp;#33853;</span><span class="symbol">&amp;#22312;</span><span class="symbol">&amp;#25991;</span><span class="symbol">&amp;#20214;</span><span class="symbol">&amp;#22841;</span>0<span class="symbol">&amp;#30340;</span><span class="symbol">&amp;#23376;</span><span class="symbol">&amp;#30446;</span><span class="symbol">&amp;#24405;</span><span class="symbol">&amp;#20013;</span><span class="symbol">&amp;#65292;</span><span class="symbol">&amp;#25991;</span><span class="symbol">&amp;#20214;</span><span class="symbol">&amp;#20869;</span><span class="symbol">&amp;#23481;</span><span class="symbol">&amp;#20026;</span><span class="symbol">&amp;#33521;</span><span class="symbol">&amp;#25991;</span><span class="symbol">&amp;#21333;</span><span class="symbol">&amp;#35789;</span><span class="symbol">&amp;#65292;</span><span class="symbol">&amp;#35831;</span><span class="symbol">&amp;#32479;</span><span class="symbol">&amp;#35745;</span><span class="symbol">&amp;#20986;</span><span class="symbol">&amp;#36825;</span>10<span class="symbol">&amp;#20010;</span><span class="symbol">&amp;#25991;</span><span class="symbol">&amp;#20214;</span><span class="symbol">&amp;#20013;</span><span class="symbol">&amp;#20986;</span><span class="symbol">&amp;#29616;</span><span class="symbol">&amp;#27425;</span><span class="symbol">&amp;#25968;</span><span class="symbol">&amp;#26368;</span><span class="symbol">&amp;#22810;</span><span class="symbol">&amp;#30340;</span><span class="symbol">&amp;#21333;</span><span class="symbol">&amp;#35789;</span><span class="symbol">&amp;#21644;</span><span class="symbol">&amp;#20986;</span><span class="symbol">&amp;#29616;</span><span class="symbol">&amp;#27425;</span><span class="symbol">&amp;#25968;</span><span class="symbol">&amp;#26368;</span><span class="symbol">&amp;#23569;</span><span class="symbol">&amp;#30340;</span><span class="symbol">&amp;#21333;</span><span class="symbol">&amp;#35789;</span><span class="symbol">&amp;#36824;</span><span class="symbol">&amp;#26377;</span><span class="symbol">&amp;#20182;</span><span class="symbol">&amp;#20204;</span><span class="symbol">&amp;#23545;</span><span class="symbol">&amp;#24212;</span><span class="symbol">&amp;#30340;</span><span class="symbol">&amp;#20010;</span><span class="symbol">&amp;#25968;</span><span class="symbol">&amp;#65292;</span><span class="symbol">&amp;#36830;</span><span class="symbol">&amp;#25509;</span><span class="symbol">&amp;#36215;</span><span class="symbol">&amp;#26469;</span><span class="symbol">&amp;#23601;</span><span class="symbol">&amp;#26159;</span>key<span class="symbol">&amp;#12290;</span><span class="symbol">&amp;#20363;</span><span class="symbol">&amp;#22914;</span><span class="symbol">&amp;#65306;</span><span class="symbol">&amp;#20986;</span><span class="symbol">&amp;#29616;</span><span class="symbol">&amp;#27425;</span><span class="symbol">&amp;#25968;</span><span class="symbol">&amp;#26368;</span><span class="symbol">&amp;#22810;</span><span class="symbol">&amp;#30340;</span><span class="symbol">&amp;#21333;</span><span class="symbol">&amp;#35789;</span><span class="symbol">&amp;#20026;</span>max<span class="symbol">&amp;#65292;</span><span class="symbol">&amp;#27425;</span><span class="symbol">&amp;#25968;</span><span class="symbol">&amp;#20026;</span>100,<span class="symbol">&amp;#20986;</span><span class="symbol">&amp;#29616;</span><span class="symbol">&amp;#27425;</span><span class="symbol">&amp;#25968;</span><span class="symbol">&amp;#26368;</span><span class="symbol">&amp;#23569;</span><span class="symbol">&amp;#30340;</span><span class="symbol">&amp;#21333;</span><span class="symbol">&amp;#35789;</span><span class="symbol">&amp;#20026;</span>min<span class="symbol">&amp;#65292;</span><span class="symbol">&amp;#27425;</span><span class="symbol">&amp;#25968;</span><span class="symbol">&amp;#20026;</span>1,<span class="symbol">&amp;#37027;</span><span class="symbol">&amp;#20040;</span>key<span class="symbol">&amp;#20026;</span>maxmin1001.<span class="tag">&lt;/<span class="name">tip</span>&gt;</span></span><br></pre></td></tr></table></figure><p>貌似是html编码，用浏览器打开tips，就能看到文字了：</p><blockquote><p>有10个体积较大的文本文件随机散落在文件夹0的子目录中，文件内容为英文单词，请统计出这10个文件中出现次数最多的单词和出现次数最少的单词还有他们对应的个数，连接起来就是key。例如：出现次数最多的单词为max，次数为100,出现次数最少的单词为min，次数为1,那么key为maxmin1001.</p></blockquote><p>好吧，看来要去wc吐了。<br>看一下前面的压缩包解压信息，10个文件就藏在这些文件夹里：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Extracting  0/0/1/0/3/1/3/3/400</span><br><span class="line">Extracting  0/0/2/0/2/2/5/6/401</span><br><span class="line">Extracting  0/0/0/2/3/5/1/3/402</span><br><span class="line">Extracting  0/1/0/0/3/4/3/3/403</span><br><span class="line">Extracting  0/1/2/0/2/5/4/0/404</span><br><span class="line">Extracting  0/0/0/0/0/3/5/1/405</span><br><span class="line">Extracting  0/1/1/1/3/5/5/2/406</span><br><span class="line">Extracting  0/0/2/1/3/5/6/7/407</span><br><span class="line">Extracting  0/1/0/1/1/3/0/0/408</span><br><span class="line">Extracting  0/1/0/0/0/4/1/6/409</span><br></pre></td></tr></table></figure><p>怎么把这些文件拼在一起呢？3条命令就搞定了：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入名字为0的文件夹。</span></span><br><span class="line"><span class="built_in">cd</span> 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索出当前目录下所有以&quot;40&quot;开头的文件，移动到0文件夹里。</span></span><br><span class="line">mv $(find ./ -name 40*) ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把0文件夹里这10个文件按顺序合并到bigdata文件里。</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;400..409&#125;; <span class="keyword">do</span> cat <span class="variable">$i</span> &gt;&gt; bigdata; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>执行后生成了一个名为bigdata的文件，这样就成功把10个文本拼接起来了。<br>用MacVim打开bigdata，发现有2600多万行：<br><img src="/assets/2013/05/bigdata_lines.png" class="lazyload placeholder" data-srcset="/assets/2013/05/bigdata_lines.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>观察发现，每一行可能有多个单词，每个单词之间用制表符(\t)隔开。<br>下面是自动统计单词个数的pyhon代码：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 读取bigdata文件所有行</span></span><br><span class="line">    bigdata = <span class="built_in">open</span>(<span class="string">&quot;bigdata&quot;</span>)</span><br><span class="line">    lines = bigdata.readlines()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分割出每一行的单词放到words数组里面</span></span><br><span class="line">    words = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> lines:</span><br><span class="line">        words.extend(x.strip().split(<span class="string">&quot;\t&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 统计出次数最多和最少的单词和次数</span></span><br><span class="line">    c = Counter(words)</span><br><span class="line">    <span class="built_in">max</span> = c.most_common(<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">min</span> = c.most_common(<span class="built_in">len</span>(c.keys()))[-<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;key : %s%s%s%s&quot;</span>%(<span class="built_in">max</span>[<span class="number">0</span>], <span class="built_in">min</span>[<span class="number">0</span>], <span class="built_in">max</span>[<span class="number">1</span>], <span class="built_in">min</span>[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><p>在终端执行这个脚本，占用4G多内存，跑了60多秒，终于出现了答案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key : Landsatproscriptions633444</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> CTF比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息安全技术大赛——Console</title>
      <link href="/information-security-technology-contest-console.html"/>
      <url>/information-security-technology-contest-console.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目标题：Console<br>题目描述：<br>题目入口：<a href="http://code2.myclover.org/">http://code2.myclover.org/</a></p></blockquote><p>这道题没有描述，打开网页，只看到一个人在不停地走动：<br><img src="/assets/2013/05/console_man.jpg" class="lazyload placeholder" data-srcset="/assets/2013/05/console_man.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>网页源码里只提示要用Chrome打开网页，就没其它提示了，唯一可疑的就是题目Console。<br>打开Chrome的开发人员工具，刷新网页，切换到Console标签，看到了提示信息：<br><img src="/assets/2013/05/console_console.png" class="lazyload placeholder" data-srcset="/assets/2013/05/console_console.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>按照提示输入syc，然后回车，出现了以下内容：<br><img src="/assets/2013/05/console_tips.png" class="lazyload placeholder" data-srcset="/assets/2013/05/console_tips.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><blockquote><p>“你尝试过F5了么？如果没有，试试看！”<br>“注意到URL了么？好像很有趣”<br>“尝试着点击浏览器的后退看看，你什么时候访问的这些地址呀？”<br>“看看你的浏览器历史记录”<br>“试着访问这些地址，你会找到线索”</p></blockquote><p>这时浏览器的地址栏里的地址是：<code>http://code2.myclover.org/Sunday</code>。<br>点击浏览器的后退按钮，地址栏里的地址变成：<code>http://code2.myclover.org/Saturday</code>。<br>于是我打开浏览器的历史记录看了一下：<br><img src="/assets/2013/05/console_history.png" class="lazyload placeholder" data-srcset="/assets/2013/05/console_history.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>可以看到，浏览器产生了7个访问历史，从Monday到Sunday。<br>但是这是怎么产生的呢？我查看了开发人员工具的Network标签，发现了一个名为msg的js文件：<br><img src="/assets/2013/05/console_network.png" class="lazyload placeholder" data-srcset="/assets/2013/05/console_network.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>再打开这个js文件，里面有一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&quot;Monday&quot;</span>, <span class="string">&quot;Tuesday&quot;</span>, <span class="string">&quot;Wednesday&quot;</span>, <span class="string">&quot;Thursday&quot;</span>, <span class="string">&quot;Friday&quot;</span>, <span class="string">&quot;Saturday&quot;</span>, <span class="string">&quot;Sunday&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> b = <span class="number">0</span>; b &lt; <span class="number">7</span>; b++) &#123;</span><br><span class="line">    history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, a[b])</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>history.pushState是HTML5里的API，作用是将指定的URL添加到浏览器历史记录里。</p><p>再根据提示访问历史记录里的地址，出现了提示：<br><img src="/assets/2013/05/console_refresh.png" class="lazyload placeholder" data-srcset="/assets/2013/05/console_refresh.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>一开始以为网页里有陷阱，但查看源码并没发现什么奇怪的地方。<br>于是继续访问其它地址，当访问到了星期三时，提示变了：<br><img src="/assets/2013/05/console_syc.png" class="lazyload placeholder" data-srcset="/assets/2013/05/console_syc.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><blockquote><p>每周三都是 [三叶草] 集会的日子，每次集会都可以得到三个字符。<br>据说收集到所有的字符，就可以找到神龙，神龙就会告诉你key。<br>搜集到所有的字符，将这些字符按照 [大写字母+小写字母+数字] 的顺序排列起来，<br>再访问这个序列构造的URL就可以找到神龙。<br>例如：ABFGJbcdzy456，则访问 http://[你懂的]/ABFGJbcdzy456。<br>不过传说所有的字符大概有四十多个。</p></blockquote><p>获取字符的地址为：<code>http://code2.myclover.org/randomstr</code>。<br>下面为获取所有字符并排序的python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回网页源码的3个字符</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_three_chars</span>():</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = <span class="string">&#x27;http://code2.myclover.org/randomstr&#x27;</span></span><br><span class="line">        page = urllib2.urlopen(url, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">return</span> page.read()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环100次，获取300个字符拼成字符串</span></span><br><span class="line">    chars = <span class="string">&#x27;&#x27;</span>.join([get_three_chars() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># words是用于排序的字符串</span></span><br><span class="line">    words = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 去掉重复字符后排序</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">sorted</span>(<span class="built_in">set</span>(chars), key=<span class="keyword">lambda</span> x:words.index(x))))</span><br></pre></td></tr></table></figure><p>因为提示说字符大概有40多个，那么获取100次得到300个字符应该覆盖了全部字符了。<br>执行后得到了传说中的字符：ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678。<br>（好吧，居然有48个字符，也算是40多个吧！！！）</p><p>打开网址<code>http://code2.myclover.org/ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678</code>，看到了新提示：<br><img src="/assets/2013/05/console_dragon.png" class="lazyload placeholder" data-srcset="/assets/2013/05/console_dragon.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">神龙说：</span><br><span class="line">(&#123;&#125;+[])[!![]-~!![]-~!![]]+(!![]+[])[-~!![]]+([][[]]+[])[!![]-~!![]-~!![]]+(!![]+[])[+[]]+(![]+[])[!![]-~!![]]+<span class="string">&#x27;y&#x27;</span>+(&#123;&#125;+[])[!![]-~!![]-~!![]]</span><br></pre></td></tr></table></figure><p>是一段精心构造的js代码，js代码中的加号是连接字符串的操作符，所以代码可以写成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(&#123;&#125;+[])[!![]-~!![]-~!![]]    <span class="comment">//1</span></span><br><span class="line">+</span><br><span class="line">(!![]+[])[-~!![]]    <span class="comment">//2</span></span><br><span class="line">+</span><br><span class="line">([][[]]+[])[!![]-~!![]-~!![]]    <span class="comment">//3</span></span><br><span class="line">+</span><br><span class="line">(!![]+[])[+[]]    <span class="comment">//4</span></span><br><span class="line">+</span><br><span class="line">(![]+[])[!![]-~!![]]    <span class="comment">//5</span></span><br><span class="line">+</span><br><span class="line"><span class="string">&#x27;y&#x27;</span>    <span class="comment">//6</span></span><br><span class="line">+</span><br><span class="line">(&#123;&#125;+[])[!![]-~!![]-~!![]]    <span class="comment">//7</span></span><br></pre></td></tr></table></figure><p>下面是分步骤分析过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1、(&#123;&#125;+[])[!![]-~!![]-~!![]]。</span><br><span class="line"></span><br><span class="line">可以拆分成两个部分：(&#123;&#125;+[]) 和 [!![]-~!![]-~!![]]。</span><br><span class="line">(&#123;&#125;+[])在计算&#123;&#125;+[]时，由于对象无法相加，所以在加法之前会先做一个toString的转换，</span><br><span class="line">即(&#123;&#125;.toString()+[].toString()) = &quot;[object Object]&quot;，是一个字符串。</span><br><span class="line">[!![]-~!![]-~!![]]里面都包含有!![]，因为[]是一个object，为非Null值，</span><br><span class="line">!是逻辑取反，所以![]的结果是false，因此!![] = true。</span><br><span class="line">也就是说[!![]-~!![]-~!![]]可转化为[true - ~true - ~true]。</span><br><span class="line"></span><br><span class="line">在计算~true时，~是按位取反操作，需要一个数字操作数，所以true当作数字1处理。</span><br><span class="line">1在计算机的原码是00000001，按位取反后~1 = 11111110，是一个负数。</span><br><span class="line">因为负数在计算机里是以补码显示的，转成原码的方法是非符号位减1再取反，</span><br><span class="line">即11111110 =&gt; 11111101 =&gt; 10000010，结果为-2，因此~true = ~1 = -2。 </span><br><span class="line">简单的计算方法是操作数取负数再减1，~1 = -1-1 = -2。</span><br><span class="line">所以[true - ~true - ~true] = [1 - (-2) - (-2)] = [5]。</span><br><span class="line">&quot;[object Object]&quot;[5] 表示取字符串第5个元素的值，所以&quot;[object Object]&quot;[5] = &#x27;c&#x27;。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2、(!![]+[])[-~!![]]。</span><br><span class="line"></span><br><span class="line">同上，可以拆分成两个部分：(!![]+[]) 和 [-~!![]]。</span><br><span class="line">(!![]+[]) = (true + []) = (true + &quot;&quot;) = &quot;true&quot;。</span><br><span class="line">[-~!![]] = [-~1] = [-(-2)] = [2]。</span><br><span class="line">(!![]+[])[-~!![]] = &quot;true&quot;[2] = &#x27;u&#x27;。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">3、([][[]]+[])[!![]-~!![]-~!![]]。</span><br><span class="line"></span><br><span class="line">同上，可以拆分成两个部分：([][[]]+[]) 和 [!![]-~!![]-~!![]]。</span><br><span class="line">[][[]]可拆分为[] 和 [[]]，[]是空数组，[[]]里面的[]是一个object，</span><br><span class="line">而取空数组元素时下标只能用数字，不能用object，所以返回未定义undefined，</span><br><span class="line">因此([][[]]+[]) = (undefined + []) = &quot;undefined&quot;。</span><br><span class="line">[!![]-~!![]-~!![]] = [true - ~true - ~true] = [1-(-2)-(-2)] = [5]。</span><br><span class="line">([][[]]+[])[!![]-~!![]-~!![]] = &quot;undefined&quot;[5] = &#x27;i&#x27;。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4、(!![]+[])[+[]] = (true+[])[+0] = &quot;true&quot;[0] = &#x27;t&#x27;。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5、(![]+[])[!![]-~!![]] = (false+[])[true-~true] = &quot;false&quot;[3] = &#x27;s&#x27;。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6、&#x27;y&#x27; = &#x27;y&#x27;。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7、和1相同。</span><br></pre></td></tr></table></figure><p>把上面7个字符拼起来就得到了过关的key: <code>&quot;cuitsyc&quot;</code>。</p><p>最简单的方法是把js代码复制到开发人员工具的Console里执行：<br><img src="/assets/2013/05/console_key.png" class="lazyload placeholder" data-srcset="/assets/2013/05/console_key.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> CTF比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息安全技术大赛——验证码识别</title>
      <link href="/information-security-technology-contest-captcha.html"/>
      <url>/information-security-technology-contest-captcha.html</url>
      
        <content type="html"><![CDATA[<p>在一个偶然的机会下，一位美女黑客向我询问有关php验证码的问题，我才知道一个叫三叶草的安全组织正在举行信息安全技术大赛。<br>于是我看了一下题目，难度还是挺高的，由于比赛期间不能泄漏答案，于是等到今天才写出一些题目的攻略。</p><p>打开<code>http://code1.myclover.org/Default.aspx</code>，可以看到以下界面：<br><img src="/assets/2013/05/captcha_default_page.png" class="lazyload placeholder" data-srcset="/assets/2013/05/captcha_default_page.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>这道题要求在60秒内提交60次验证码，我看了一下，发现还是有点难度的，最后用了一个比较特殊的方法完成。<br>打开firebug，点击go按钮，跳转到提交验证码的页面：<br><img src="/assets/2013/05/captcha_submit_page.png" class="lazyload placeholder" data-srcset="/assets/2013/05/captcha_submit_page.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>这时看一下firebug捕获的请求：<br><img src="/assets/2013/05/captcha_go_firebug.png" class="lazyload placeholder" data-srcset="/assets/2013/05/captcha_go_firebug.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>可以看到点击按钮后向<code>Default.aspx</code>提交(POST)了一次数据，还有获取(GET)了Match.aspx和Code.aspx页面的数据。</p><p>1、首先看一下<strong><strong>Default.aspx</strong></strong>提交的参数。<br><img src="/assets/2013/05/captcha_default_post_params.png" class="lazyload placeholder" data-srcset="/assets/2013/05/captcha_default_post_params.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>提交的参数用php可以写成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;Button1&#x27;</span>           =&gt; <span class="string">&#x27;Go!&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;__EVENTVALIDATION&#x27;</span> =&gt; <span class="string">&#x27;/wEWAgLyjPLGBgKM54rGBmPDqObMucxXxtsHOLHUVmjnku17WnTdivWFADL9ShD4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;__VIEWSTATE&#x27;</span>       =&gt; <span class="string">&#x27;/wEPDwUKMjA0OTM4MTAwNGRkkuXw0Thu//c7r9Pfb1F+JxSPHeM6sKURi786gPIAgNE=&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其中<code>&#39;Button1&#39;</code>的值是固定的<code>&#39;Go!&#39;</code>，那么<code>&#39;__EVENTVALIDATION&#39;</code>和<code>&#39;__VIEWSTATE&#39;</code>是从哪里获取的呢？ 查看<code>Default.aspx</code>的网页源码，可以发现源码里有两个隐藏域：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;__VIEWSTATE&quot;</span> <span class="attr">id</span>=<span class="string">&quot;__VIEWSTATE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/wEWAgLyjPLGBgKM54rGBmPDqObMucxXxtsHOLHUVmjnku17WnTdivWFADL9ShD4&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;__EVENTVALIDATION&quot;</span> <span class="attr">id</span>=<span class="string">&quot;__EVENTVALIDATION&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/wEPDwUKMjA0OTM4MTAwNGRkkuXw0Thu//c7r9Pfb1F+JxSPHeM6sKURi786gPIAgNE=&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>所以提交数据之前要先获取<code>Default.aspx</code>的源码，匹配出这两个隐藏域，再提交数据。</p><p>2、查看<code>Default.aspx</code>提交数据后服务器的响应头信息：<br><img src="/assets/2013/05/captcha_default_post_header.png" class="lazyload placeholder" data-srcset="/assets/2013/05/captcha_default_post_header.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>我们感兴趣的是Set-Cookie信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie</span><br><span class="line">ASP.NET_SessionId=ynb5mevekohm00ow0wszmrfo; path=/; HttpOnly</span><br><span class="line">Star=1HrpUk4vFyGyGBLmqVg1BNWvnTsr/N8A8NB6ih4u/fI=; path=/</span><br></pre></td></tr></table></figure><p>其中<code>ASP.NET_SessionId</code>值是用户与页面会话的标识。<br><code>Star</code>值相当于标识了用户点击<kbd>Go!</kbd>按钮的时间。<br>用户点击了<kbd>Go!</kbd>按钮，服务器会记录点击的时间，正确提交60个验证码后，服务器会判断开始时间和最后提交的时间差，如果时间差小于60秒，就会显示过关的key。</p><p>3、获取Match.aspx页面的源码。<br>网页源码中也有同样的隐藏域，提交验证码时要用到：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;__VIEWSTATE&quot;</span> <span class="attr">id</span>=<span class="string">&quot;__VIEWSTATE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/wEPDwUJMjYxMjUwMDUwZGS8D8v8uuSQ6rLtNG29gJP//sHvMScyfWHzWAIAiuZDlQ==&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;__EVENTVALIDATION&quot;</span> <span class="attr">id</span>=<span class="string">&quot;__EVENTVALIDATION&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/wEWAwKK29znBwLs0bLrBgKM54rGBu8AlJPAD4CBCYKKKwuQqrQBlSp5MkeP+9MlpGQSykvw&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>4、获取Code.aspx的信息。<br><img src="/assets/2013/05/captcha_code_get_header.png" class="lazyload placeholder" data-srcset="/assets/2013/05/captcha_code_get_header.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>可以看到页面返回一张验证码图片，而且响应头信息中有<code>Set-Cookie</code>，<code>&quot;CheckCode&quot;</code>字段是该验证码图片的唯一标识：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie</span><br><span class="line">CheckCode=E033FDB11F1FAAD86C9A492D4696EC31; path=/</span><br></pre></td></tr></table></figure><p>5、填写验证码后点击SUBMIT按钮，发现是向Match.aspx提交数据，查看提交的参数：<br><img src="/assets/2013/05/captcha_match_post_params.png" class="lazyload placeholder" data-srcset="/assets/2013/05/captcha_match_post_params.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>提交的参数用php可以写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$post = array(</span><br><span class="line">    &#x27;Button1&#x27;           =&gt; &#x27;SUBMIT&#x27;,</span><br><span class="line">    &#x27;TextBox1&#x27;          =&gt; &#x27;5191&#x27;,</span><br><span class="line">    &#x27;__EVENTVALIDATION&#x27; =&gt; &#x27;/wEWAwKK29znBwLs0bLrBgKM54rGBu8AlJPAD4CBCYKKKwuQqrQBlSp5MkeP+9MlpGQSykvw&#x27;,</span><br><span class="line">    &#x27;__VIEWSTATE&#x27;       =&gt; &#x27;/wEPDwUJMjYxMjUwMDUwZGS8D8v8uuSQ6rLtNG29gJP//sHvMScyfWHzWAIAiuZDlQ==&#x27;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>其中’Button1’的值是固定的’SUBMIT’，’TextBox1’是验证码，隐藏域的值是在第3步中获取的。  </p><p>综上所述，要完成验证码提交，需要完成以下步骤：<br>1、获取首页Default.aspx的源码，匹配出隐藏域的值。<br>2、模拟点击Go!按钮提交数据。<br>3、获取Match.aspx网页源码的隐藏域的值。<br>4、访问Code.aspx，获得验证码图片，自动识别成验证码数字。<br>   识别验证码可以参考这篇文章：<a href="/php-verification-code-identification-primary.html">《php实现验证码的识别(初级篇)》</a>。<br>5、模拟点击SUBMIT按钮提交验证码。<br>6、重复步骤456，一共重复60次。<br>7、注意每次请求都要发送和保存cookie。</p><p>但是由于我的网速和代码执行速度比较慢，所以每次都要执行60秒以上：<br><img src="/assets/2013/05/captcha_timeout.png" class="lazyload placeholder" data-srcset="/assets/2013/05/captcha_timeout.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>由于代码是php写的，但php又没有多线程，所以时间总是超过60秒，最后用了一种方法来模拟多线程。方法就是开两个页面来跑php代码，把代码分成3个文件：<br><img src="/assets/2013/05/captcha_files.png" class="lazyload placeholder" data-srcset="/assets/2013/05/captcha_files.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p><code>submit.php</code> : 用来模拟提交验证码，验证码图片保存到valid.gif，cookie保存到cookie.txt。<br><code>submit2.php</code> : 和submit.php差不多，验证码图片保存到valid2.gif，cookie保存到cookie2.txt。<br><code>go.php</code> : 用来模拟点击Go!按钮，然后把cookie保存到cookie.txt，然后复制一份为cookie2.txt。  </p><p>这样执行<code>go.php</code>后，<code>cookie.txt</code>和<code>cookie2.txt</code>有相同的<code>ASP.NET_SessionId</code>值和star值。<br>再同时执行<code>submit.php</code>和<code>submit2.php</code>，这两个脚本获取的验证码图片和验证码cookie都会保存在不同的文件里，所以不会互相干扰。</p><p>每个页面执行了40多秒，于是成功地获取了过关的key：<br><img src="/assets/2013/05/captcha_key.png" class="lazyload placeholder" data-srcset="/assets/2013/05/captcha_key.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p><a href="/assets/2013/05/captcha.zip">源码下载</a></p><blockquote><p>活动结束后，出题者的话：<br>我的code.aspx在OnLoad时间里面会生成验证码并md5存cookie。<br>只要你们通过发包的形式。只请求一次code.aspx。后面都同样的验证码即可。</p></blockquote><p>看来以后做题前还是要多分析思考。</p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> CTF比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac版Csdn免积分下载工具</title>
      <link href="/csdn-downloader-for-mac.html"/>
      <url>/csdn-downloader-for-mac.html</url>
      
        <content type="html"><![CDATA[<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><h4 id="Csdn免积分在线下载地址："><a href="#Csdn免积分在线下载地址：" class="headerlink" title="Csdn免积分在线下载地址："></a>Csdn免积分在线下载地址：</h4><p><a href="http://www.poboke.com/csdn">http://www.poboke.com/csdn</a></p><h4 id="Mac版Csdn免积分下载工具下载地址："><a href="#Mac版Csdn免积分下载工具下载地址：" class="headerlink" title="Mac版Csdn免积分下载工具下载地址："></a>Mac版Csdn免积分下载工具下载地址：</h4><p><a href="http://pan.baidu.com/share/link?shareid=435904&uk=1562437020">http://pan.baidu.com/share/link?shareid=435904&amp;uk=1562437020</a></p><p><img src="/assets/2013/04/csdn_app.jpg" class="lazyload placeholder" data-srcset="/assets/2013/04/csdn_app.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p><img src="/assets/2013/04/csdn_about.jpg" class="lazyload placeholder" data-srcset="/assets/2013/04/csdn_about.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p><strong>版本记录</strong></p><div class="timenode"><div class="meta"><p><p>v1.0</p></p></div><div class="body"><ul><li>1、发布csdn免积分下载工具 for mac。</li><li>2、去除验证码。</li></ul></div></div>]]></content>
      
      
      <categories>
          
          <category> 其它分类 </category>
          
          <category> 过期代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python解《十滴水》算法</title>
      <link href="/python-solve-10drops.html"/>
      <url>/python-solve-10drops.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、游戏介绍"><a href="#一、游戏介绍" class="headerlink" title="一、游戏介绍"></a>一、游戏介绍</h3><p>最近在3366玩了一个小游戏，觉得挺有意思的，游戏名字叫《十滴水》，<br>游戏地址：<a href="http://www.3366.com/flash/1000154.shtml">http://www.3366.com/flash/1000154.shtml</a></p><p><img src="/assets/2013/03/10drops_show_1.jpg" class="lazyload placeholder" data-srcset="/assets/2013/03/10drops_show_1.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>游戏规则如下：</p><blockquote><p>一开始玩家有10滴水，玩家点击格子就会在格子里增加1滴水。<br>水滴达到4滴后再加水就会破裂，破裂后会向四个方向溅出四滴水。<br>点击水滴使水滴爆破产生连锁反应，利用连锁反应消掉全部水滴。<br>水滴用完则游戏结束，同时破裂3滴水滴会增加1滴水，过关也会增加1滴水。</p></blockquote><p>我试玩了一下，居然只过了7关：<br><img src="/assets/2013/03/10drops_rank_1.png" class="lazyload placeholder" data-srcset="/assets/2013/03/10drops_rank_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>作为一个24k的纯屌丝，怎么可能忍受排名比好友落后呢？<br>所以我试着用Python写了一段自动解十滴水的代码。</p><h3 id="二、编程过程"><a href="#二、编程过程" class="headerlink" title="二、编程过程"></a>二、编程过程</h3><h4 id="1、游戏的数据结构"><a href="#1、游戏的数据结构" class="headerlink" title="1、游戏的数据结构"></a>1、游戏的数据结构</h4><p>由于格子有6<em>6格，所以可以用6</em>6的二维数组来保存数据，<br>数值是水滴数，如果格子上没有水滴就是0。 如上图的水滴数可以表示为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t_list = [</span><br><span class="line">    [<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="2、水滴引爆后的计算"><a href="#2、水滴引爆后的计算" class="headerlink" title="2、水滴引爆后的计算"></a>2、水滴引爆后的计算</h4><p>在某个格子上增加1滴水，会出现两种结果：如果增加后数值不大于4，则不会引爆水滴；<br>如果数值大于4，该格子的水滴数变为0，并向4个方向溅出4滴水。溅出的水滴们每次移动一格，碰到其它水滴或超出边界则停止运动。</p><h5 id="1-、使用递归-错误"><a href="#1-、使用递归-错误" class="headerlink" title="(1)、使用递归(错误)"></a>(1)、使用递归(错误)</h5><p>一开始用了递归的方法写算法，但是有时算出的结果和在游戏里实际操作的结果不同，<br>因为假设有一种局面是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 0 0 0</span><br><span class="line">0 0 0 0</span><br><span class="line">4 0 4 3</span><br><span class="line">4 4 4 0</span><br></pre></td></tr></table></figure><p>在第4行第2列滴上1滴水，如果用递归的方法，会先向一个方向执行运算，直到返回结果才会向另一个方向运算。<br>如果递归先向左运算的话，(4,2)会引爆(4,1)、(3,1)、(3,3)，这时(3,4)会增加1滴水变成4滴，然后(3,3)会引爆(4,3)，这样最后剩下1滴水滴。<br>如果递归先向右运算的话，(4,2)会引爆(4,3)、(3,3)，这时(3,4)会增加1滴水变成4滴，然后(3,3)会引爆(3,1)，(3,1)向右的水滴会引爆(3,4)，最后所有水滴都爆掉了。<br>这样会出现两种不同的结果，事实上游戏里溅出的水滴都是匀速运动的，溅出的水滴到达某个格子都存在一个距离的问题，而递归不能达到这个效果，因此这里不能用递归。</p><h5 id="2-、不使用递归"><a href="#2-、不使用递归" class="headerlink" title="(2)、不使用递归"></a>(2)、不使用递归</h5><p>不用递归的话，就要用数组把溅出的4滴水滴的坐标保存起来，比如在坐标(2,3)处增加1滴水引爆了，则引爆数组可表示为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t_burstlist = [</span><br><span class="line">    [[<span class="number">2</span>,<span class="number">3</span>], [<span class="number">2</span>,<span class="number">3</span>], [<span class="number">2</span>,<span class="number">3</span>], [<span class="number">2</span>,<span class="number">3</span>]],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>再用一个数组来保存4个方向，分别表示向左、下、上、右移动：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t_direction = [[-<span class="number">1</span>,<span class="number">0</span>], [<span class="number">0</span>,<span class="number">1</span>], [<span class="number">0</span>,-<span class="number">1</span>], [<span class="number">1</span>,<span class="number">0</span>]]</span><br></pre></td></tr></table></figure><p>每循环一次就把引爆的坐标加上方向值，得出新的坐标，比如第一次移动后新的坐标就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t_burstlist = [</span><br><span class="line">    [[<span class="number">1</span>,<span class="number">3</span>], [<span class="number">2</span>,<span class="number">4</span>], [<span class="number">2</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">2</span>]],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>先判断坐标点是不是超出边界（小于0或等于6），超出边界就不处理。<br>如果没超出边界，就判断坐标上的水滴数。<br>如果水滴数为0则不处理。<br>如果有水滴就把引爆数组里的对应的坐标置为(-1,-1)，如果水滴数小于4就加上1滴水，否则就把水滴数置为0并把该坐标保存到引爆数组里。<br>循环直到所有水滴超出边界为止。</p><h4 id="3、寻找最优解"><a href="#3、寻找最优解" class="headerlink" title="3、寻找最优解"></a>3、寻找最优解</h4><p>找出最优解，一般都是采用贪婪算法，类似于中国象棋的AI算法，具体过程如下：</p><h5 id="1-、广度优先搜索"><a href="#1-、广度优先搜索" class="headerlink" title="(1)、广度优先搜索"></a>(1)、广度优先搜索</h5><p>找出所有水滴的坐标，分别在每个坐标滴上1滴水，然后找出里面最优的局面。<br>但是只进行1层搜索往往找不到好的走法，所以要进行多层搜索。但搜索的层数越多，得出结果所花的时间就越多。不过对于6*6的数组来说，运算量不大，一般搜10层就够了，因为解出来的结果一般只需用到5滴水，很少有超出10滴水的。<br>比如图上有10个格子有水滴，做法就是分别在每个坐标滴上1滴水，得到10个局面。再在每个局面的每个有水滴的坐标分别滴上1滴水，然后找出其中最优的局面替换原来的局面。这样循环n层后再看哪个局面最优，就知道该点击哪个坐标了。</p><h5 id="2-、局面的评估"><a href="#2-、局面的评估" class="headerlink" title="(2)、局面的评估"></a>(2)、局面的评估</h5><p>怎么知道一个局面的优劣呢，这就需要用一个数值来评估了。<br>比如一个格子上有4滴水总比1滴水好，因为4滴水容易引爆。所以可以按水滴数来评分，1滴算1分，4滴算4分。<br>但是越多格子有水滴就可能越难消除，从另一个方面来说越少格子有水滴越好，所以如果一个格子有水滴就减5分。</p><p>还有看看下面这两个3*3的局面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4 0 4  |  4 0 0</span><br><span class="line">0 0 0  |  0 0 4</span><br><span class="line">0 0 0  |  0 0 0</span><br></pre></td></tr></table></figure><p>虽然分值一样，但是第一个图需要1滴水就引爆了，第二个图需要两滴，所以还要找出图中孤立的格子（上下左右都没有其它水滴的格子），1个孤立的格子减1分。所以第一个图的评估值是-2分，第二个图是-4分。<br>当图上所有水滴都引爆时评估值为0分，0分是最大值。<br>评估方法都不是绝对的，大家可以再根据一些局面增加评估分，这样得出的结果可能更优。</p><h5 id="3-、挑选较优局面"><a href="#3-、挑选较优局面" class="headerlink" title="(3)、挑选较优局面"></a>(3)、挑选较优局面</h5><p>在贪婪搜索中，对所有局面按评估值进行降序排序，排在前面的就是最优的局面。一旦搜到0分的局面就可以返回不用再搜索了。</p><h4 id="4、算法验证"><a href="#4、算法验证" class="headerlink" title="4、算法验证"></a>4、算法验证</h4><p>算法写好后，测一下上面的例子：<br><img src="/assets/2013/03/10drops_bash.png" class="lazyload placeholder" data-srcset="/assets/2013/03/10drops_bash.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>再到游戏里点击第4行第4列的点，游戏画面变成：<br><img src="/assets/2013/03/10drops_show_2.jpg" class="lazyload placeholder" data-srcset="/assets/2013/03/10drops_show_2.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>可见结果是正确的（不正确就不会发出来了）。</p><h3 id="三、使用算法玩游戏"><a href="#三、使用算法玩游戏" class="headerlink" title="三、使用算法玩游戏"></a>三、使用算法玩游戏</h3><p>目前不能自动识别游戏界面的水滴数组，所以要自己手动输入太麻烦，所以只玩到了31关，下次再写个自动识别图像的程序吧。<br><img src="/assets/2013/03/10drops_rank_2.png" class="lazyload placeholder" data-srcset="/assets/2013/03/10drops_rank_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><h3 id="四、源码下载"><a href="#四、源码下载" class="headerlink" title="四、源码下载"></a>四、源码下载</h3><p>源码可以在这里下载：<a href="https://github.com/poboke/Ten-drops-cheater">https://github.com/poboke/Ten-drops-cheater</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度网盘音乐外链源码</title>
      <link href="/the-source-code-of-baidu-netdisk-music-outside-link.html"/>
      <url>/the-source-code-of-baidu-netdisk-music-outside-link.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、使用方法"><a href="#一、使用方法" class="headerlink" title="一、使用方法"></a>一、使用方法</h3><p>复制下面的php代码，另存为文件<code>baidupan.php</code>，然后放到网站根目录。</p><figure class="highlight php"><figcaption><span>baidupan.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//以下的代码已经失效，现在本站的外链用的是PCS的链接，虽然能保持原来的外链地址不变，</span></span><br><span class="line"><span class="comment">//但是发现有安全问题，所以暂时不要用这个方法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最后修改时间：2013-11-04</span></span><br><span class="line"><span class="comment">//构造百度网盘分享网址</span></span><br><span class="line"><span class="variable">$uri</span> = <span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_URI&quot;</span>];</span><br><span class="line">preg_match(<span class="string">&#x27;|\/(\d+)\/(\d+)\.|&#x27;</span>, <span class="variable">$uri</span>, <span class="variable">$res</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$res</span>) &#123;</span><br><span class="line">    <span class="keyword">list</span>(<span class="variable">$shareid</span>, <span class="variable">$uk</span>) = array_slice(<span class="variable">$res</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="variable">$url</span> = <span class="string">&quot;http://pan.baidu.com/share/link?shareid=<span class="subst">$shareid</span>&amp;uk=<span class="subst">$uk</span>&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    preg_match(<span class="string">&#x27;|\/.+\/(\w+)\.|&#x27;</span>, <span class="variable">$uri</span>, <span class="variable">$res</span>);</span><br><span class="line">    <span class="variable">$url</span> = <span class="string">&quot;http://pan.baidu.com/s/&quot;</span>.<span class="variable">$res</span>[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//匹配源码里面的音乐地址并跳转</span></span><br><span class="line"><span class="variable">$src</span> = curl_get_contents(<span class="variable">$url</span>);</span><br><span class="line">preg_match(<span class="string">&#x27;|http://.+file.+sign[^&quot;]+|&#x27;</span>, <span class="variable">$src</span>, <span class="variable">$res</span>);</span><br><span class="line"><span class="variable">$songurl</span> = html_entity_decode(<span class="variable">$res</span>[<span class="number">0</span>]);</span><br><span class="line">header(<span class="string">&quot;location:<span class="subst">$songurl</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用curl获取网页源码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curl_get_contents</span>(<span class="params"><span class="variable">$url</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$curl</span> = curl_init(<span class="variable">$url</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_HEADER, <span class="number">1</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_USERAGENT, <span class="string">&quot;Iphone&quot;</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_TIMEOUT, <span class="number">10</span>);</span><br><span class="line">    <span class="variable">$src</span> = curl_exec(<span class="variable">$curl</span>);</span><br><span class="line">    curl_close(<span class="variable">$curl</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$src</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二、获取网盘分享链接"><a href="#二、获取网盘分享链接" class="headerlink" title="二、获取网盘分享链接"></a>二、获取网盘分享链接</h3><p>上传音乐到百度网盘，分享并创建公开链接。<br><img src="/assets/2013/02/ting_link.png" class="lazyload placeholder" data-srcset="/assets/2013/02/ting_link.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><h3 id="三、构造外链地址"><a href="#三、构造外链地址" class="headerlink" title="三、构造外链地址"></a>三、构造外链地址</h3><p>例如音乐《神木村》的公开分享地址是：<br><a href="http://pan.baidu.com/share/link?shareid=501421&uk=1562437020">http://pan.baidu.com/share/link?shareid=785331966&amp;uk=1562437020</a><a href="http://pan.baidu.com/share/link?shareid=292667&uk=1562437020"></a><br>则外链地址为：<br><a href="http://www.poboke.com/baidupan.php/785331966/1562437020.mp3">http://www.poboke.com/baidupan.php/785331966/1562437020.mp3</a></p><p>百度网盘新版的分享地址为：<br><a href="http://pan.baidu.com/s/1zeurs">http://pan.baidu.com/s/1zeurs</a><br>则外链地址为：<br><a href="http://www.poboke.com/baidupan.php/1zeurs.mp3">http://www.poboke.com/baidupan.php/1zeurs.mp3</a></p><h3 id="四、自动转换外链"><a href="#四、自动转换外链" class="headerlink" title="四、自动转换外链"></a>四、自动转换外链</h3><p>下面是自动转换外链的代码，另存为html文件后用浏览器打开：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>百度音乐外链转换——破博客<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//最后修改时间：2013-09-28</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">Change</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> filepath = <span class="string">&quot;http://&quot;</span> + <span class="built_in">window</span>.location.host + <span class="string">&quot;/baidupan.php/&quot;</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> url = <span class="built_in">document</span>.getElementById(<span class="string">&quot;text1&quot;</span>).value;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (url.indexOf(<span class="string">&quot;?&quot;</span>) &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">eval</span>(url.split(<span class="string">&quot;?&quot;</span>).pop().replace(<span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;;&quot;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> songurl = filepath + shareid + <span class="string">&quot;/&quot;</span> + uk + <span class="string">&quot;.mp3&quot;</span>;</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> key = url.split(<span class="string">&quot;&amp;&quot;</span>)[<span class="number">0</span>].split(<span class="string">&quot;/&quot;</span>).pop();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> songurl = filepath + key + <span class="string">&quot;.mp3&quot;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;text2&quot;</span>).value = songurl;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    分享地址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;text1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;TEXT&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">size</span>=<span class="string">&quot;100&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    外链地址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;text2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;TEXT&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">size</span>=<span class="string">&quot;100&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;BUTTON&quot;</span> <span class="attr">value</span>=<span class="string">&quot;转换&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;Change()&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="五、防止盗链的方法"><a href="#五、防止盗链的方法" class="headerlink" title="五、防止盗链的方法"></a>五、防止盗链的方法</h3><p>1、加密<code>shareid</code>和<code>uk</code>的值，例如可以把数字加密为英文字母，在<code>baidupan.php</code>中再解密。<br>2、如果只想让自己帐号里的歌曲可以外链，可以判断<code>uk</code>的值。<br>因为每个百度帐号的<code>uk</code>的值都是不同的，比如我的帐号是<code>1562437020</code>，所以可以在<code>baidupan.php</code>第6行后加入判断，如果传进来的<code>uk</code>值不等于自己帐号的<code>uk</code>值就退出：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($uk != <span class="string">&quot;1562437020&quot;</span>) &#123;</span><br><span class="line">    exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、百度网盘更新分享地址后，分享地址里面没有<code>uk</code>值了，可以用两种方法解决。<br>(1)在<code>baidupan.php</code>文件中获取源码，然后匹配出源码里面的<code>uk</code>值。<br>(2)把新的分享地址转换为旧的分享地址，比如新的地址是：<a href="http://pan.baidu.com/s/1zeurs">http://pan.baidu.com/s/1zeurs</a>，<br>先获取网页源码，可以看到网页源码里面有一段代码为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileUtils.share_uk=<span class="string">&quot;1562437020&quot;</span>;FileUtils.share_id=<span class="string">&quot;785331966&quot;</span>;</span><br></pre></td></tr></table></figure><p>这就是uk和shareid的值了，拼成旧分享地址后可以正常访问，地址为：<br><a href="http://pan.baidu.com/share/link?shareid=785331966&uk=1562437020">http://pan.baidu.com/share/link?shareid=785331966&amp;uk=1562437020</a></p><h3 id="六、其它问题"><a href="#六、其它问题" class="headerlink" title="六、其它问题"></a>六、其它问题</h3><p>问：播放音乐会不会消耗空间流量？<br>答：播放一次音乐会消耗一次访问百度网盘网页的流量，大概6Kb。</p>]]></content>
      
      
      <categories>
          
          <category> 其它分类 </category>
          
          <category> 过期代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 音乐外链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度云网盘离线下载助手 V1.2.0</title>
      <link href="/baidu-disk-offline-download-helper.html"/>
      <url>/baidu-disk-offline-download-helper.html</url>
      
        <content type="html"><![CDATA[<p>虽然百度网盘的离线下载不太给力，但是下载百度自己的产品速度还是比较快的，所以写了这个百度云网盘离线下载的小工具。程序是用MFC写的，主要是为了学习自绘界面。</p><p><img src="/assets/2012/11/baidudisk_view.png" class="lazyload placeholder" data-srcset="/assets/2012/11/baidudisk_view.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><h3 id="一、使用教程"><a href="#一、使用教程" class="headerlink" title="一、使用教程"></a>一、使用教程</h3><p>1、目前支持的百度音乐网址格式为：<br>* 单曲：<a href="http://music.baidu.com/song/xxxxx">http://music.baidu.com/song/xxxxx</a><br>* 专辑：<a href="http://music.baidu.com/album/xxxxx">http://music.baidu.com/album/xxxxx</a><br>* 专题：<a href="http://music.baidu.com/topic/xxxxx/xxxxx">http://music.baidu.com/topic/xxxxx/xxxxx</a><br>* 专题：<a href="http://music.baidu.com/diyalbum/collection/xxxxx">http://music.baidu.com/diyalbum/collection/xxxxx</a><br>  其中xxxxx为id号。<br>2、先用系统自带的浏览器登录百度网盘，再打开此程序（为了避免盗号嫌疑，所以不在程序里登录）。<br>3、左侧的树形列表里会显示出用户网盘里所有的文件夹，选中某个文件夹，歌曲将离线下载到这个文件夹里。<br>4、输入网址后点击 <kbd>确定</kbd> 按钮，程序会解析出所有歌曲，显示在列表里。<br>5、点击 <kbd>下载</kbd> 按钮，程序会自动离线下载所有打勾的歌曲。<br>6、如果离线下载的是专辑或专题，程序会自动在你选中的文件夹下新建一个文件夹，名字为专辑名或专题名。</p><h3 id="二、下载地址"><a href="#二、下载地址" class="headerlink" title="二、下载地址"></a>二、下载地址</h3><p><a href="http://pan.baidu.com/share/link?shareid=435899&uk=1562437020">http://pan.baidu.com/share/link?shareid=435899&amp;uk=1562437020</a></p><h3 id="三、版本记录"><a href="#三、版本记录" class="headerlink" title="三、版本记录"></a>三、版本记录</h3><div class="timenode"><div class="meta"><p><p>v1.2.0</p></p></div><div class="body"><ul><li>1、兼容百度新的验证机制。</li></ul></div></div><div class="timenode"><div class="meta"><p><p>v1.1.0</p></p></div><div class="body"><ul><li>1、接入百度个人云存储PCS，提高安全性。</li><li>2、修改了界面布局，显示用户头像和网盘容量。</li></ul></div></div><div class="timenode"><div class="meta"><p><p>v1.0.1</p></p></div><div class="body"><ul><li>1、修复了名专辑乱码的BUG。</li></ul></div></div><div class="timenode"><div class="meta"><p><p>v1.0.0</p></p></div><div class="body"><ul><li>1、支持离线下载百度音乐，百度音乐网址：<a href="http://music.baidu.com/">http://music.baidu.com</a>。</li><li>2、这是第一个版本，所以只能下载音乐。</li></ul></div></div>]]></content>
      
      
      <categories>
          
          <category> 其它分类 </category>
          
          <category> 过期代码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《中国民间故事——英雄艾里·库尔班》</title>
      <link href="/ying-xiong-ai-li-ku-er-ban.html"/>
      <url>/ying-xiong-ai-li-ku-er-ban.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>英雄艾里·库尔班（维吾尔族）</p></blockquote><h3 id="一、艾里·库尔班的母亲"><a href="#一、艾里·库尔班的母亲" class="headerlink" title="一、艾里·库尔班的母亲"></a>一、艾里·库尔班的母亲</h3><p>　　有一个老太婆，丈夫已经死了，跟前只有一个女儿，名字叫玛丽克。生得又聪明，又美丽，又很能干。母亲像宝贝一样的疼爱女儿，女儿也十分体贴关怀母亲；母女俩互相安慰，共同劳动，来打发穷苦的日子。母亲纺线，女儿就给搓棉花；母亲做饭，女儿就给抱柴火。<br>　　玛丽克长到十四岁，已经能够跟着母亲一块儿上山打柴了。这里人们打柴都到附近山里去，日久天长，山都变得光秃秃的，不要说树，就连草都被人们烧光了。这样，打柴就困难了。一天，母女二人来到山中，东张西望，找不到一根柴。女儿说：“咱们过河那边去打柴吧。妈妈你看，那边的柴多得很哪。”母亲爬到山坡上向远处一望，果然河那边树木非常茂盛，母女二人便向河岸走去。谁知道河水很深，人过不去，要过去就必须坐船。岸边虽然有船，可是母女二人连一文钱也没有。老太婆就向船夫说好话：“行行善，让我们过河去拾点柴吧！家里的灶火都冒不出烟了。”<br>　　船夫一看，原来是她们母女，就很惊奇地问道：“哎呀，老大娘，你们的胆子真不小，敢到那里去打柴！”母亲说：“有什么法子呢！你没看，这边山里连根柴火毛都没有啦！”船夫说：“那边山里野兽多得很，谁也不敢去。老大娘，不是我不渡你们过去，实在是很危险哩！”说得母亲也犹豫起来，但又想到家里连柴也没有了，晚饭怎么做呢？正在左右为难的时候，玛丽克说：“我们过去，就在山边上拾一点就回来，你看太阳老高的，野兽不会出来。”船夫见劝说不住，便答应渡她们过去。她们到那里一看，啊，山上的树木真多呀，又高又大，草长的有一人多深。母女二人走进山口，匆匆忙忙地收拾了一些柴，一人背了一捆，就往回走。<br>　　走出山口，忽然玛丽克想要解手，就说：“妈妈，你先走一步吧，我随后就来。”母亲说：“快点，我在前面等着你。”便先走了，走到一个山坡上坐下等着。谁知左等也不来，右等也不来，高声叫喊也没人答应。她心里着了慌。这时太阳已经落山，风吹树响，异常恐怖。在山边找了一遍，也没有找着，不敢久停，只好央求船夫把她渡过河，回家去了。一个人孤单冷落，整整地哭了一夜。<br>　　原来玛丽克留在后边，解完手，站起来正要走，忽然看见前面有只白熊挡住去路。她吓得浑身打战，没来得及喊叫，白熊就张牙舞爪猛扑上来，一口噙住了她的脖子。白熊把她背在身上，向深山走去。不知翻过几重山，淌过几条水。等玛丽克睁眼一看，前面是一个幽深的山洞，自己躺在一块石板上；白熊在洞外搬运大石头堵住洞口，一会儿就不见了。<br>　　玛丽克等白熊一走，慢慢翻身起来，走到洞口，想推开石头；但用尽力气也推不动。从山缝向外一看，只见万丈悬崖，深不见底。心想：“这下是很难逃跑了！”她想起了留在家里的母亲，不觉伤心痛苦起来。哭了一针，身体疲倦，靠着石壁就睡着了。不知睡了多长时间，忽然被响声惊醒，只见白熊站在身旁，手里拿着山桃野果，送到她唇边。从此，玛丽克就离开人间，过起野兽生活来了。白熊每天出去找寻山羊野鹿，供养着她。一年以后，她生了一个孩子，长得眉清目秀，很像玛丽克，只是身上长了一些黄毛。玛丽克十分喜爱他，给他起了一个很好听的名字，叫：艾里·库尔班。</p><h3 id="二、艾里·库尔班把母亲救出了深山"><a href="#二、艾里·库尔班把母亲救出了深山" class="headerlink" title="二、艾里·库尔班把母亲救出了深山"></a>二、艾里·库尔班把母亲救出了深山</h3><p>　　日子过得真快呀，艾里·库尔班已经七岁了。他每天跟白熊出去抓捕野兽。回到洞来，便在母亲身边说说笑笑，这样他学会了母亲的话。他年纪虽然小，可是生得很魁梧，力气又大；爬山越岭，十分敏捷；并且天性聪明，心地善良。他和父亲、母亲生活在一起，慢慢地有些奇怪起来。<br>　　有一天，趁白熊不在洞里，他偎在母亲怀里，就问：“妈妈，请你告诉我，为什么你用两条腿走路，爸爸却用四条腿走路？你身上没有毛，他身上尽是毛？你说话他不懂，他说话你也不懂，这是什么原因呀？”被孩子这样一问，玛丽克不觉一阵心酸，长长地叹了一口气，眼泪扑簌簌地滴落下来。库尔班一看更奇怪了，便搂住母亲的脖子说：“妈妈，你为什么哭呀？”玛丽克哭了半天，心里翻来覆去，想说又不敢说，便用别的话岔开了。<br>　　从此，玛丽克便时长吁短叹，偷偷掉眼泪，身体一天天的也消瘦下来。孩子更加放不下心。一天，白熊不在跟前，他又央求母亲说：“妈妈，你告诉我吧！”玛丽克说：“孩子，你不要问啦，你知道了也没有用，也许还会惹祸呢！”说着眼泪就流了下来，孩子躺在母亲怀里也哭了，说：“妈，你老是这样，问你你又不说。你再不说，我就要死在你的跟前啦！”玛丽克知道孩子的性格很倔强，说道就会做到。要是真的没有了他，那怎么办呢？……她连想都不敢再想了！便一面抚着孩子的脸，一面诉说着自己的遭遇。她说：“……我家里也有母亲呀，我一天到晚都没有离开过她，自从来到这儿，快十年了，不知道她现在是死是活，也不知道我的家，我的村子，都变成什么样子了？我怎么能跟一只熊长久住在一起呢！……”说着，就更加大声地哭起来。<br>　　孩子陪着母亲哭了一针，就安慰她说：“妈妈，你不要难过，咱们不再住这儿啦！咱们回去，我和你一块儿走。”玛丽克一下捂住孩子的嘴，惊惶地瞅了瞅门洞说：“可别瞎说！叫它知道，一定要咱们娘儿两个的性命。孩子，记在心里吧，等你长大了再想办法，把妈妈救出去。”艾里·库尔班站起来，瞪圆了眼睛说：“我已经长大了，妈妈你跟着我走，不用怕它。”玛丽克一再阻拦不住孩子，就走到洞口，看看天，太阳还高高地悬在天空，说：“这会儿它还不会回来，趁着这个空儿，赶紧走，也许能逃得出去。”说罢，就拉着库尔班走出山洞，头也不回直往前走。不管山路多么崎岖难走，库尔班都搀扶着母亲平安地走过来了。太阳落的时候，他们走出山口，松了一口气。已经十来年没有见过平地的玛丽克，竟欢喜得流出了眼泪。<br>　　正在这时，忽然听见远远的一声熊叫。玛丽克吓得浑身发抖。一把搂住库尔班说：“这可怎么办，它追来了！”艾里·库尔班说：“妈妈，你不要害怕，它追过来，我把它打死。”玛丽克说：“不行呵，孩子。你打不过它，还是快跑吧！”这时，熊的叫声越来越近，库尔班说：“妈妈，你快些躲起来。”玛丽克赶紧爬上一个山坡，藏在一颗大树后面。这时，白熊已经来到跟前，一看没有玛丽克，只有艾里·库尔班，就咆哮如雷，张开大嘴，凶猛地扑了过来。艾里·库尔班敏捷地闪过一旁；白熊一下子没扑着，大吼一声，转过身子又扑了上来，库尔班接着就和它搏斗起来。艾里·库尔班力气大，身体又灵活，打了一会，把白熊打倒了。他用尽全身力气，紧紧地压在白熊身上，举起拳头，狠狠捶打。虽然他很有劲，可是只凭两个小拳头，熊还是吃得住的，这时，玛丽克在树后看到这种情形，就急忙扔过两块石头，并且向儿子打着手势。艾里·库尔班捡起石头，向白熊的头上使劲敲打。没几下，就把白熊打死了。<br>　　这时，天已黄昏。她们趁着月色，走了一会，来到河边。一看，这里已经完全不像从前的样子了！河里波浪翻腾，连一只船也没有，玛丽克一看，就呆住了。艾里  库尔班说：“妈妈，你看什么，咱们过去吧！”玛丽克说：“这么大的水，怎么过得去：”库尔班说：“不怕，你骑在我身上，我会凫水。”玛丽克一把就拉住了他说：“孩子，听妈的话，快去弄几棵树来，咱们做一个筏子。”<br>　　母子二人攀倒了几棵树，用藤条绑起来。到天明筏子做好了，推下水去；又找了两棵小树作篙。母子二人坐着筏子渡河。艾里·库尔班高兴得简直要跳起来。不多一会，来到河对岸。再往前走，不认识路了，不过大致方向她还记得。走着走着，慢慢走到了有人家的地方。人们正在田里锄地，看见他们远远走来，身上长满了黄毛，心里都害怕，扔下锄头就跑。一边跑，一边喊：“快跑呀，人熊吃人来了！”玛丽克见了这种情形，便大声招呼道：“乡亲们，别跑！我们是人呀……”但是谁也不听，一溜烟跑进了村子。<br>　　他们母子俩走到村里，家家关门闭户，顶上石头；一些胆大的拿着刀斧悄悄地走出来。玛丽克拉着艾里·库尔班向众人央求，并述说自己的经历。人们见他们没有恶意，便渐渐地放了心。人越来越多，听着听着，就同情起他们来了。有的拿来衣裳，有的拿来馕。玛丽克向他们道了谢，穿上衣服，吃了馕，打听清楚道路，母子二人又继续走了。<br>　　玛丽克的母亲自从失去了心爱的女儿以后，曾央求东邻西舍成群结队进山去找，找了几回，都不见踪影；心想：一定是被野兽吃了！她又后悔，又伤心，哭得死去活来。从此，孤苦伶仃，一个人过着日子。<br>　　这天晚上，她正和几个邻居坐在家里讲女儿生前的故事，夜已经很深了，孩子们都一个个地打起了瞌睡。忽然，外面有人叫门，大家说：“这个时候还有谁来呀！”接着听见门外有人叫喊：“妈妈，我回来了，我是你的玛丽克呀！”人们一听，不禁浑身打起了冷颤。听听远处的狗叫，门外的风声，都以为一定是鬼来叫门了。这时门又响了，喊着：“妈妈，我回来了！我是玛丽克，快开门吧！”人们越听越像玛丽克的声音。老太婆哆哆嗦嗦地走去开了门，一看，果然是自己的女儿，心里又悲又喜。两人拥抱在一起，大声痛哭。母女二人又团圆了。</p><h3 id="三、艾里·库尔班第一次进城"><a href="#三、艾里·库尔班第一次进城" class="headerlink" title="三、艾里·库尔班第一次进城"></a>三、艾里·库尔班第一次进城</h3><p>　　外婆很喜欢艾里·库尔班，因为他聪明伶俐，力气大，又爱干活。别人拿斧头劈不动的柴，他用手一掰就掰开了。可就是不能让他出门，一出门就惹祸；因为他看不惯人的行为，人有时欺软怕硬，打女人，打孩子，这些事可都不能让他看见，一看见就要管，一管还非依着他不可。动不动就把人打得头破血流，找到家门口来。有时他出去，见到没有人干那些不公平的事，他就会高高兴兴的，这儿溜溜，那儿看看。看着人们在吃力地干着活，喘着气，流着汗；当活儿干不完的时候，他就凑过去，好心好意地帮人家的忙。可是他手脚太重，常常是越帮越忙，惹出乱子。比方说你在挖土吧，他一定会把锨柄给弄折了；要是你在锯木头，他也会把你的锯给弄断。为了这件事，他妈妈和外婆整天给人家说好话，赔不是；但还是喜爱他，耐心地抚养他。一直长到十四岁，方圆一带村庄的人都知道这孩子。别看他爱惹祸，可是慢慢地人们就都喜欢他了，说他是好心肠的孩子。这一带打女人、打孩子的事，真的也就少了起来。<br>　　有一天，他跟母亲说：“妈妈，我听人说，城里挺好玩，让我进城去玩一回吧。”母亲和外婆商量，外婆说：“让他去吧，这孩子也得让他多见见世面啦。”母亲不放心，恐怕他到城里再惹祸；千叮咛，万嘱咐，叫他早去早回。<br>　　艾里·库尔班进了城，看见什么都感到新鲜。沿街尽是做买卖的，摆着各种各样的货物；大街小巷，人来人往，非常拥挤。他挤着，看着；忽然后面人们乱跑乱叫起来。<br>　　艾里·库尔班回头一看，原来是一辆牛车走在大街上，牛惊了，拉着大车就跑，把两旁货摊子撞得东倒西歪，货物七零八散撒了一地，人们躲避不及的都被它撞倒；闹得孩子哭，大人叫，一片混乱。可是牛还在一个劲地横冲直闯。艾里·库尔班一看，心想：这要不管，说不定会撞坏多少人哩！便赶紧两步，跑到大车跟前，一把抓住牛角。牛拼命挣扎，又踢又撞；库尔班生气了，照着牛头就是一拳。牛连气都没吭一声，就口鼻流血，倒在地上死了。<br>　　这时牛车主人气势汹汹地跑过来，一把抓住艾里·库尔班，说：“你把我的牛打死了，要赔我牛！”库尔班说：“你看看你的牛惹了多么大的祸！撞了人家的摊子，轧了人家的孩子；我要不管，还得闹更大的乱子！”满街的人都看得很清楚，齐声说：“这孩子做得对，应该打死牛。”有的说：“人家孩子也没想打死他的牛；只打了一拳，牛就死了。怨他的牛不结实！”牛车主人见人多势大，也知道自己理亏，就不敢再争执了。这时街上的巡查见这么多人聚在一起，不知出了什么事，赶紧过来干涉。一看是个孩子在这里闹事，就一把抓住要带他去见国王。人们七嘴八舌替他分辨，巡查才放了手。艾里·库尔班心里很不舒服，连逛也没逛，一赌气就回家了。<br>　　城里的人，一传十，十传百，不久就传到国王耳里，“城里出了个一拳打死大牛的小孩子。”国王听说非常害怕：老百姓当中出了这样的人，早晚是个大祸害。就像设法把他除掉。大臣们也都围在国王左右，争先恐后地献计，有的说：“这孩子要早点收拾掉，留着可是个祸害！”也有的说：“派人去把他抓来杀了吧！”国王都不同意，说：“无缘无故杀了他，老百姓会反对咱们；还是等一等，找个机会再说罢。”<br>　　这样，艾里·库尔班仍然平静地住在村子里。</p><h3 id="四、艾里·库尔班第二次进城"><a href="#四、艾里·库尔班第二次进城" class="headerlink" title="四、艾里·库尔班第二次进城"></a>四、艾里·库尔班第二次进城</h3><p>　　艾里·库尔班想再进城去看看。因为城里到底是什么样，他还没弄清楚。他和母亲说了，母亲说：“你可别再像上一次，出去就惹祸！”库尔班说：“决不会再惹祸，不管看见什么我也不动手了。”母亲说：“人家打你，你也不要还手。”<br>　　库尔班记住母亲的话，便走进了城。看见一群小孩在玩铁球，你争我夺，怪有意思，他就站在一旁观看。虽然孩子很多，可是没有一个能踢得动。他越看越有趣，便也凑过去；忽然铁球向他滚来，他就踢了一下。谁知他一脚就把铁球踢到半天空，又慢慢地落到人家院子里去了。库尔班赶紧跑去找。<br>　　碰巧有一个老太婆坐在院子里纺线，铁球落下来，端端正正打在纺车上，老太婆气得直打哆嗦；看见库尔班跑来找球，扯住他胳膊就打。库尔班正想反抗，但一想起母亲嘱咐的话，就忍了下去。老太婆打了几下，气消了，放开了手。库尔班刚走到门口，偏偏碰到老太婆的儿子回来了。<br>　　他是个有名的大力士，一拳能打死一个人，全城没人敢惹他。一见艾里·库尔班，一把抓住，照着脖子就打了四拳。库尔班一动不动，满脸含笑的说：“大哥，你干嘛生这么大的气呀，小心打坏你的手。”说着挣脱出来，就跑到街上，去找那群孩子。孩子们见他把球踢飞，好久不回来，正在生气，一见他来了就包围上去，拳打脚踢。库尔班没还手，也没动；孩子打得没劲了，就一哄而散。<br>　　艾里·库尔班这次进城，总算没有惹祸。可是平白无故地挨了好几顿打，心里挺不舒服，狠狠地啐了一口：“呸，什么鬼地方，以后再也不上你们这儿来了！”</p><h3 id="五、艾里·库尔班和龙战斗"><a href="#五、艾里·库尔班和龙战斗" class="headerlink" title="五、艾里·库尔班和龙战斗"></a>五、艾里·库尔班和龙战斗</h3><p>　　国王听说艾里·库尔班经常闹事，就召集大臣们来商量，大臣们给他出主意说：“判他死刑吧！”国王摇摇头。又一个说：“下到监狱里折磨死他吧！”国王还是摇摇头，说：“他没有犯死罪，杀了他老百姓要不满意，怎么办呢？还是想个巧妙的计策吧！”一个坏透了顶的奸臣说：“东山里有一条龙，几百年来一直是咱们国家的大祸害，每年不知要吃多少人；为了除这条龙，派过好几次兵去，都被它吃掉了。大王，你为什么不叫他去呢？你跟他说，把龙打死回来有赏。”这个坏主意正中了国王心意，赶紧派人把艾里·库尔班叫来。国王假装和颜悦色地对他说：“艾里·库尔班，你有这么大的力气，应该给国家办点事。现在我派你到东山去杀龙。一个月以内把龙杀死，不但不治你过去的罪，还要重重地赏你。”库尔班二话没说，就接受了国王的命令。<br>　　库尔班回到家里把国王的话告诉了母亲和外婆，她们听了都伤心地哭起来。外婆说：“孩子，国王没安好心，他这是想害你哩！”母亲说：“不让你出去，你偏要出去；怕的就是你惹是生非，看，到底还是招了祸！国王明明是叫你去送死。你死了，我还有什么活头呀……”越说，哭得越伤心。外婆说：“哭也没用，还是想法救救孩子吧！”<br>　　母女二人哭了又想，想了又哭，始终没想出个好办法。艾里·库尔班坐在旁边耐心劝解，说自己不怕龙。最后，外婆说：“国王命令已经下了，不去也活不成。你外公活着的时候，曾打过猎，这儿有他的一把宝剑，给你带去。孩子，你要记住我的话，我听人说过：那龙见到人，第一次是先从嘴里往外吐火；你看他要张嘴，就先找个水坑爬下，那火也许就烧不着你。它第二次是从嘴里往外吐风，你就找一个山洞钻进去。第三次它要吐水，你就先跑到高坡上去。这些要都躲过去了，它就要用力往肚里吸；那时就看你的命啦：是你杀了龙，还是龙吃了你。让上天保佑吧。”<br>　　母亲只是一个劲的哭，劝也劝不住。艾里·库尔班咬了咬牙，心一横，拿着宝剑就走了。走不了几天，就走进了东山。那里有着清清的流水，茂密的树林。龙到底在哪儿呢？他踏着石头，攀着树根，爬上山头，大声歌唱——据说龙一听到人的声音就要出来；人们有时从山下经过，都不敢大声说话。所以艾里·库尔班就站在山头唱着歌，向龙挑战。谁知唱了半天，嗓子都唱哑了，龙也没出来。他想：“不会是走错路了吧，也许是龙出去了吧？”他四处观望，找那水最大、树最多的地方走去。终于在一道山沟中找到了，原来龙在这儿睡觉哩！<br>　　艾里·库尔班举起宝剑正要往下砍，忽然一想，这不太省事了吗？人人都说龙厉害，要是趁它睡着的时候杀死它，我还算什么英雄？不如把它叫醒。跟它比一比，看是谁胜谁败吧！想罢！纵身一跳，跳到龙背上，蹦蹦跳跳，走来走去；果然把龙惊醒了，一翻身，库尔班从龙背上滚下来。他连忙站起，走到龙面前，昂首挺胸地站立着。龙伸了个懒腰，打了个哈欠，忽然看见一个小孩站在面前，就满不在意地说：“是你这小家伙搅扰我睡觉的吗？快点滚吧！我要想吃你，那可费不了什么事。不过，你还是滚吧！”艾里·库尔班大喝了一声：“喂，懒家伙，你有什么本领，拿出来给我看看；我是听说你有本领才来的，咱们两个斗一斗，看到底是谁胜过谁？”这一下可把龙惹火了，摆开了架势，说：“小孩，你来吧！”库尔班说：“你先来。”龙说：“那你站稳吧！”一张嘴，喷出了漫天大火，烧得遍山树木咝咝的叫，石头嘎嘣嘣的响。库尔班记住了外婆的话，早有准备，很快跳到一潭清水里蹲着，不多一会水都烧热了，他蹲在里边倒也舒服，就跟洗了个澡似的。<br>　　火过去了。艾里·库尔班跳出来，走到龙的面前说：“这就是你的本领吗？不算什么，再来再来！”龙见小孩没有死，就又张开了嘴，库尔班赶紧钻进山洞。外面狂风怒吼，飞沙走石，天昏地暗，库尔班坐在山洞里打了个盹儿，等风过去，又走出来说：“这算什么！再来，再来！”龙又一张口，水像长江大河开了口子一样向他涌来。库尔班没等水到身边，就像猴子一样，敏捷地爬到山顶，看着滔天巨浪，顶着山沟直泻下去，心里暗暗好笑，竟高兴地站在那里唱起歌来了。<br>　　水过去了，他又跳到龙跟前说：“这回把你最拿手的本领施展出来吧！”龙见三番两次战不赢他，就生了气，大吼一声：“你能有多大本领敢在这儿逞能！”张开大嘴用力一吸，满以为一下子就会把小孩吸到肚里；可是肚子里毫无感觉，睁眼一看，小孩还站在它面前哩，只不过向前踉跄了几步。艾里·库尔班心想：“这家伙的力气可真不小，得留点神。”龙见一吸没吸动，气得把尾巴使劲一摔，山崩地裂；浑身一抖，树倒石翻。它大吼一声，张开血盆大口，用尽全身力气，狠命一吸。这时，库尔班早有准备，横着宝剑，稳稳站住，轻轻一纵，随着龙的吸力，顺着龙的喉咙，钻进龙的肚子里去了。龙用力过猛，库尔班一下子滑过肠胃，从肛门出来了。龙疼痛难忍，怪声嘶叫，用力一抖，身子一下裂成了两半。艾里·库尔班擦干剑上的血迹，仔细一看，见龙肚子里有很多死人骨头。心想：“要是不把它杀死，还不知得有多少人给它吃呢！”他正要走，忽然一想：“这样空手回去，谁会相信呢？还是带上一点凭证吧。”便用宝剑把龙头割下，拉着下山去了。</p><h3 id="六、国王不让艾里·库尔班进城"><a href="#六、国王不让艾里·库尔班进城" class="headerlink" title="六、国王不让艾里·库尔班进城"></a>六、国王不让艾里·库尔班进城</h3><p>　　艾里·库尔班走了将近一月，毫无消息，国王心想：“这次他大概会死在山里回不来了吧！”那些出坏主意的大臣们，也来捧场凑趣，设宴庆功；忽然守城的兵来报信，说：“艾里·库尔班从远处走来，还牵着一条活龙。”正在兴高采烈的这群人，听了都吓得不知怎样才好。本来一个艾里·库尔班已经把他们搅得坐卧不宁，如果再把龙拖到城里来，那他们简直要没法活下去了！大家你看我，我看你，请国王想办法。国王下命令叫赶紧吹号集合起城里所有的兵，上城防御；等库尔班走近，就用石头把他打死。<br>　　艾里·库尔班走着走着，望见城墙上站满了人，起初还以为城里的人在欢迎他哩！但看看，又不像。“也许是自己走了以后，有什么国家来攻城了吧？”走到城门跟前正要叫门，忽然一阵石头像雨点般地打了下来。这时他才知道原来这些人是对付他的！“不让我进城，这算干什么呢！给人民除了害，他们倒这样对待我，真太没良心了！不进城就不进城，什么鬼地方，我早就不稀罕它！”想罢，抖了抖身上的尘土，就拉着龙头退到一棵大树旁边，坐下休息。<br>　　国王见没有动静，胆子稍微壮了一些，就叫人出去看看：艾里·库尔班死了没有，龙到哪儿去了？但谁也不敢去。于是就悬重赏招募，好容易才招到一个人。这个人提心吊胆，走出了城，找到了库尔班。见他平静地躺在树边睡觉，打着鼾声，旁边放着一颗死龙头。就转身跑进城见到国王，说：“艾里·库尔班还活着，他拿的是颗死龙头。”国王一听又害怕起来，便和大臣商量：“艾里·库尔班为民除了害，我们要打他，老百姓一定会反对；还是暂时稳住他，以后再想办法吧！”连忙叫人吹号，把全城的人集合起来出城迎接艾里·库尔班。全城的人见到死龙头，争着把龙头抬进城；悬灯结彩，敲锣打鼓，就像过节一般。国王也转模作样，赏了艾里·库尔班一些银钱和衣服。库尔班什么也不要，自个回家去了。</p><h3 id="七、艾里·库尔班打柴"><a href="#七、艾里·库尔班打柴" class="headerlink" title="七、艾里·库尔班打柴"></a>七、艾里·库尔班打柴</h3><p>　　母亲和外婆一见艾里库尔班平安回来，不住谢天谢地；听他讲完和龙战斗的情形，便嘱咐他：“以后可别再惹是生非了，这次是靠上天保佑，救了你的命。再说你一天天的长大了，也该干点正经营生了。家里的日子也挺难过，以后你出去打点柴，卖了钱换点粮食，也可以补贴补贴家里的生活。”<br>　　艾里·库尔班听了母亲和外婆的话，点头答应；第二天就上山去打柴。近处的山上柴木太少，他想：乡亲们的生活都很困难，好打的柴还是留给他们吧。自己就跑到另一座山；这山里柴很多，但谁也不敢去，因为这里野兽很多，特别是有成群的老虎；人一进山，就被野兽吃掉。这天，艾里·库尔班走进了山，被老虎看见了，便都围拢过来，想要吃他。原来库尔班从白熊那里学过野兽的话，这次用上了。他站在山上，对老虎说：“人都向我告你们的状，说你们时常吃人，叫人不敢进山打柴；我今天特来劝告你们，以后要安分守己，不要再跟人们捣乱，人也不伤害你们；你们要知道，老虎是斗不过人的！”老虎说：“你先不要说这些，咱们还是先斗一斗吧！要是你赢了我们，我们就听你的话；要是赢不了我们，我们就吃了你。”艾里·库尔班知道，不给它们一点厉害尝尝是不行的。便说：“好，你们来吧！”<br>　　老虎们非常凶猛，一个个张牙舞爪扑了上来，库尔班一连抓住五六个扔下山岩摔死了。这一下，老虎们可都害怕啦，不敢再向前来。库尔班说：“不敢再打了，就赶快投降！”老虎们说：“我们投降。”库尔班说：“你们来帮助我打柴吧！”于是，老虎们就帮助他打起柴来。这真是一场最热闹的打柴呀！七手八脚，不大一会，大树小树攀倒了一大片。库尔班把柴捆成一捆一捆的，分放在许多老虎背上，就下了山，一齐向城里走去。人们一见库尔班赶来一群猛虎，吓得浑身打颤，到处乱躲。消息传到皇宫，把国王也吓得半天说不出一句话来。艾里·库尔班进了城，把柴卸下，对老虎说：“以后再不许你们跟人捣乱，回去吧，等我去打柴的时候，再来帮助我。”老虎点点头，一个个活蹦活跳地回了山，人们这才敢回来，一个个都埋怨库尔班；他就向大家解释，并且说：“以后你们可以放心进山去打柴，不要再怕老虎了。”众人一听，都非常感谢艾里·库尔班。</p><h3 id="八、国王设计陷害艾里·库尔班"><a href="#八、国王设计陷害艾里·库尔班" class="headerlink" title="八、国王设计陷害艾里·库尔班"></a>八、国王设计陷害艾里·库尔班</h3><p>　　国王召集起大臣，向他们说：“库尔班不除去，我们一天也不能安生，大家快想个办法吧！”有的说：“国王下个命令把他杀掉就完啦。”国王连连摆手说：“不行，不行，他办的事都是对老百姓有好处的，老百姓跟他一条心。”那个专出坏主意的人接着说：“国王还是打发他到魔王那里去吧。”国王听了，连声叫好，便把艾里·库尔班叫来，亲自对他说：“你是我国最大的英雄。现在有一个魔王国常常来欺负我们，全国的人都受了他的害，可是没有一个人能打得过他，我想请你去征服魔王国。现在给你一把宝剑、两匹马，这是给国家、给人民出力的事，你一定不要推辞。”——其实，艾里·库尔班在什么样的困难危险面前，从来也没有推辞过。</p><h3 id="九、艾里·库尔班征服八个巴图尔"><a href="#九、艾里·库尔班征服八个巴图尔" class="headerlink" title="九、艾里·库尔班征服八个巴图尔"></a>九、艾里·库尔班征服八个巴图尔</h3><p>　　艾里·库尔班回家一说，家里人都伤心痛苦起来；但因为是国王命令，也只好让他去。外婆拿出一条腰带给他说：“这是你外公遗留下来的一件宝物，平时系在腰间，用时要长能长，要短能短。”并且一再嘱咐：魔王千变万化，有时变人，有时变鬼，有时也许变成一个美丽的姑娘，你看只要头上有撮白毛，那就是他变的。千万留心，不要上当。<br>　　艾里·库尔班一个人骑着马，向魔王国走去。走过很多的村庄道路，山坡河流。早起晚睡，不停地往前赶。这天正在走着，忽然看见前面站着一个又高又大的人，挡住去路，大声叫道：“站住，站住！你是什么人，往哪儿去？”库尔班说：“我是艾里·库尔班，要到魔王那里去。”那个人听了便大喝一声：“呔！原来你就是艾里·库尔班，我以为是什么三头六臂的英雄哪！快点下马投降。”库尔班心中奇怪：从来没见过有这么不讲理的人。便也问道：“你是谁呀？”<br>　　那人说：“我是陆地巴图尔（巴图尔，意思是武士，英雄。），这一带归我管，人只能过去死的，不能过去活的。”艾里·库尔班说：“你不要吹牛！你有什么本领，能不让我过去？”<br>　　陆地巴图尔说：“你下来咱们比一比。”艾里·库尔班说：“下来就下来。”刚一下马，陆地巴图尔过来就要打，库尔班说：“先别忙，咱们不要打。我站在这儿，你要是能用两手把我拔起来，按倒在地上，就算我输了。”陆地巴图尔说：“好，你先来还是我先来？”库尔班说：“你先来吧。”陆地巴图尔运起浑身的力气，两手抱住库尔班，猛一使劲，咦！连动都没动。又运气再拔，接连三次，库尔班始终像钉着地上的一样；陆地巴图尔累得满头大汗，气喘吁吁，只好放开了手。艾里·库尔班说：“你站稳了，现在该我来拔你了。”他不慌不忙地走上前去，双手抱住腰，说声起，陆地巴图尔早已两脚离地，被他高高举起，往下一扔。陆地巴图尔连忙喊道：“服了，服了。”爬起身来跪在地上说：“只要允许我作你的朋友，我一辈子都听你的话。”并且要求库尔班留在这里住上几天。库尔班答应和他做朋友，但不肯留下。陆地巴图尔又问他什么时候回来，好准备迎接。陆地巴图尔恋恋不舍，送了很远，才和他告别。<br>　　艾里·库尔班往前走了几天，又遇到了一个戈壁巴图尔，和他比武，也被库尔班征服了，并且结成了朋友。往前走，又遇到河上巴图尔和山峡巴图尔，也都一一被他打败。<br>　　这天，艾里·库尔班正在走着，忽然见有几户人家，进去一看，人人都在忙着作凉面：有的人在擀面条，有的人在烧火，有的在捞面，捞出来的面都倒在一个大木盆里。库尔班觉得很奇怪，就问：“这凉面是你们自己吃的，还是卖的？”人们看了看他，说：“你大概是远路来的吧，你不知道我们这里有个凉面巴图尔，一顿能吃六大木盆凉面。他的力气很大，两手能把一匹马举起来，一脚能把人踢到天空。他的脑袋像口锅，肚子像个大木桶，两条腿像树一样粗壮，谁也打不过他。”<br>　　“这些日子，他听说出了个英雄叫什么艾里·库尔班，不久就要来到这里。他现在每天加紧吃凉面，锻炼体力，等艾里·库尔班来了，好和他拼一拼。我们都是给他做面的，你要想看看他，一会就来。”<br>　　艾里·库尔班找了个隐蔽的地方躲藏起来，想看看这个凉面巴图尔到底是个怎么的人。<br>　　一会，果然来了一个人，骑着马，正像人们所说的那样，身高体胖，一来就粗声粗气地嚷着要吃面。人们把面抬来五六大盆，一会都叫他吃光了。吃完面，他就跑到广场上去练武，把粗粗的木棒一折两段，把大块的石头扔上天空，一边练，一边说：“你们看看吧，要是艾里·库尔班敢来，我一手就把他扔到天空，一脚把他踢到地里，叫他知道知道我的厉害。”<br>　　说着，艾里·库尔班走出来了，说：“喂，你不要瞎了眼，我就是艾里·库尔班，咱们比一比吧！”凉面巴图尔一看，原来是这么个小孩子，还没有自己一条腿粗呢，便笑了笑说：“小孩，你是不是不想活啦，竟敢来跟我开玩笑！”库尔班说：“咱们比一比再说嘛！”凉面巴图尔说：“你真要是活得不耐烦了，就过来吧！”<br>　　他们两个人打起来了，打了一天一夜，到底还是凉面巴图尔败了，他心服口服地跪在地下，要求拜艾里·库尔班为师，师傅走到哪儿，他愿意跟到哪儿，决不偷懒。艾里·库尔班答应收留他，带他一起走。<br>　　走了几天以后，又遇到一个冰上巴图尔拦住去路。这个人一天到晚练自己的脚，练得双脚非常有力，不管有多厚的冰，他一踏，就要炸裂，要是人，准被他踏成肉酱。艾里·库尔班见他拦住去路，便叫凉面巴图尔上前交涉，请他让开路。冰上巴图尔说：“没那么容易的事，什么人也不能从这里白白地过去。”凉面巴图尔说：“我就是凉面巴图尔，后边是我师傅艾里·库尔班。”冰上巴图尔一听说是艾里·库尔班就更加生气了，说：“好，我等的就是他，快叫你师傅来和我比武。”凉面巴图尔说：“用不着我的师傅，我就能够把你打败。”冰上巴图尔说：“你不行，快去叫他来！”凉面巴图尔只好回来告诉库尔班。库尔班走到跟前，冰上巴图尔二话没说，伸手就打；打了一会，他趁着库尔班没防备，猛然一脚踢去，满以为这一下准能把他踢倒，哪知库尔班连动也没动。冰上巴图尔连踢了几下都没有生效，心里正在慌乱；一个措手不及，就被库尔班一拳打倒了，他怪声地嘶叫：“别打，别打，我也拜你为师，跟你到魔王国去。”艾里·库尔班把他放了，一起继续前进。<br>　　走了几天，又碰到一个磨盘巴图尔，他能把很大的一座石头磨盘，用左手扔到天空，落下来用右手接住。他和艾里·库尔班战斗了一场，也被库尔班打败了；收为徒弟，一路前进。走了不远，又遇到一个钢铁巴图尔。钢铁巴图尔练就一身钢筋铁骨，刀砍不动，铁锤打不烂，五六百斤的铁棍，只要他用两个手指一捏，就能轻轻拿起。艾里·库尔班遇上了他，少不得又是一场恶斗，但终于降服了他。从此，他们成了师徒五人，一同往魔王国走去。</p><h3 id="十、艾里·库尔班遇见魔王"><a href="#十、艾里·库尔班遇见魔王" class="headerlink" title="十、艾里·库尔班遇见魔王"></a>十、艾里·库尔班遇见魔王</h3><p>　　他们走了不止一日。一天，走上一座高山；山上有一座宽敞的院落，房屋很高大。进去一看，见墙壁砖瓦都是用金银砌成，台阶门窗都镶满了珍珠宝石，满院的青松翠柏，绿叶红花，景致十分美丽。走过很多戈壁沙漠、穷山恶水的艾里·库尔班师徒五人，来到这个地方，真像到了天堂一样。凉面巴图尔要求说：“师傅，咱们在这儿休息一会儿再走吧。”库尔班答应了，便都坐下休息。说也奇怪，这么大的一座院落，却静悄悄的没有一点人声。忽然，一针微风吹来了扑鼻的煮肉香味。凉面巴图尔早已坐不住了，就到处去找；原来在这院里一棵大树底下放着七八口大锅，都满满地煮着肉。他越想越饿，越看越馋；便又要求：“师傅，咱们整天赶路，肚子老是吃不饱，这么香的肉，煮熟了，看着不吃，不成傻子了吗！”钢铁巴图尔说：“咱们先借着吃了吧！山里有的是野兽，吃完了咱们就去打猎，打来了再给他煮上。”艾里·库尔班听他说的还有道理，答应了。师徒五人来到锅前，抓起肉来大嚼一顿，不多一会就把七八锅肉吃光了。凉面巴图尔抹抹嘴说：“好，你们快去打猎吧！打来，好快点给人家煮上。我在这儿给你们看家，要是主人回来了，也好向人家道谢一下。”众人才要跟他争辩，艾里·库尔班忙接着说：“就让他留在这儿吧，有咱们四个人就行了。”师徒四人出去打猎，凉面巴图尔一个人留在家里。他看看这，看看那，一会就睡着了。正在睡梦中，忽然起了一阵风暴，只吹得树木乱撞，天地发抖，紧跟着就是霹雷闪电，一个接连一个，大雨倾盆似地泼了下来。凉面巴图尔心里害怕，赶紧躲到房子里，偷偷向外看。风暴过去，只见从门口走进来一个人，原来正是他们想要找的魔王。找了很久没找到，现在他自己来了，偏偏师傅又不在跟前。凉面巴图尔极力缩小身子，唯恐被它看见；他直点头诚心祈祷盼望魔王不到屋里来。果然魔王没有进屋。凉面巴图尔轻轻地松了一口气。谁知魔王走到树下，掀开锅盖一看，锅里空空的，便大发雷霆，一脚把锅踢翻，大踏步地走进屋来。凉面巴图尔早已吓得瘫在那里，动都不能动了。魔王进屋一看，见有一个人，立刻大吼一声，扯下自己的一根头发，吹了口气，头发变成了一条长蛇，把凉面巴图尔牢牢地捆住；又扯了一根头发，把凉面巴图尔吊上房梁，然后掏出一个锥子，在他的脚跟上一戳，就戳入血管——原来这锥子是只铁管。魔王把它衔在嘴里，吸他的血。吸了半天，凉面巴图尔感觉四肢无力，浑身有说不出来的疼痛。魔王吸饱了，就把他放下，拿来一碗糖水让他喝下去，嘱咐他好好休息，明天再来。话一说完，又起了一阵风暴；风暴过去，魔王已无影无踪。凉面巴图尔越想越害怕。<br>　　艾里·库尔班师徒四人打猎回来，一看，凉面巴图尔躺在地上，面黄肌瘦，上气不接下气大吃一惊，连忙问他：“怎么回事？”他连说话的力气都没有了，声音细得像蚊子哼一样，听也听不清，钢铁巴图尔哈哈大笑说：“师傅不要管他，还不是吃肉吃得多了。”艾里·库尔班一看他两手被紧紧绑着，便知道出了意外，连忙叫冰上巴图尔快去把他解开。冰上巴图尔过去刚一伸手，见是一条蛇，吓得跑了回来，说：“师傅，那不是绳子捆的，是长虫把他缠住了！”众人一看，果然是条长蛇，扬头吐舌，谁也不敢走垅去；最后，还是艾里·库尔班过去把蛇弄死，原来却是一根头发。凉面巴图尔缓过气来，才絮絮叨叨地叙述了他的遭遇。艾里·库尔班听他一说，知道已经到了魔王国。找了这么多日子，现在找到了，心里着实高兴。便吩咐巴图尔们煮肉，吃饱了等魔王来，好跟它战斗。凉面巴图尔说：“它说明天还来，还要吸我的血。师傅，明儿可别留下我一个人在这儿了。”<br>　　第二天，艾里·库尔班叫四个徒弟全部下山打猎，自己一个人留在家里等候魔王。果然，不多一会，一阵风暴过去，魔王走进院子来。库尔班手持宝剑，藏在门后；魔王推门进屋，他看准了就是一剑，脑袋立时落地。库尔班把剑抽回一看，魔王又长出了一个脑袋。魔王见有人暗算它，大吼一声，跳出门外，库尔班也跟了出去，就在院里打起来了。一直砍下魔王五六个脑袋，它还没有死。魔王见斗他不过，呼啸了一声，天空突然卷起了一阵风暴，转眼不见魔王的踪影了。艾里·库尔班见地上有殷红的血迹，跟踪追下去。追了一会，看见一个年轻妖艳的姑娘，手里托着一盘苹果，轻快地向他走来，说：“看你这个样子，跑得满头大汗，干嘛这么急呀！坐下来歇一会儿，吃个苹果吧。”艾里·库尔班记起了外婆的话。他看见年轻姑娘的头发里有撮白毛，大喝一声，抡起宝剑就砍，姑娘忽然不见了。他向前追寻，见路上横着一条长蛇，向他张着大嘴，扬头吐舌，样子十分凶恶，艾里·库尔班全不畏缩，举剑就刺；刚一刺过去，长蛇又不见了，但留下了血迹。他又沿着血迹追寻，追进一座树林，血迹在一口枯井边不见了——魔王已经钻进了井底。</p><h3 id="十一、艾里·库尔班战胜魔王"><a href="#十一、艾里·库尔班战胜魔王" class="headerlink" title="十一、艾里·库尔班战胜魔王"></a>十一、艾里·库尔班战胜魔王</h3><p>　　艾里·库尔班解下外婆给他的腰带，一头放在井口，一头拴在石头上，拉住腰带坠下井去；原来这不是一口枯井，而是里面别有天地，有河有树，有城市，有街道。库尔班手持宝剑，找到魔王王宫，闯了进去；看见一座房子，门口有两条长蛇守护着。他用宝剑杀死了长蛇，推门进去，见有两个姑娘被绑在柱子上。她们一见艾里·库尔班进来，就问他是干什么的。听艾里·库尔班说是要来杀死魔王的，她们长叹了一声说：“你杀不死它；你要是叫它抓住，它还是要把你吃了呢！”库尔班问：“你们两个是什么人？”姑娘说：“我们是魔王的女儿，因为我们每天见它吃人，非常残酷，常常劝它。有一天，它捉来八个小孩叫我们俩给它烤着吃，我们不愿意这样做，并且劝它也不要这样做；惹得它生了气，就把我们绑在这里，它还说要吃我们呢！求求你先把我们俩放下来吧。”艾里·库尔班把缠住她们的两手的长蛇斩断，两位姑娘跪下谢他救命之恩，还表示愿意帮助他杀掉魔王，只是要求他杀了魔王之后，把她们两个带到人间——因为她们非常羡慕人间生活，也非常同情人。艾里·库尔班答应带上她们两个去找魔王。姑娘说：“你不要找它，你跟它打仗是打不过的，你只有先把它的灵魂捉住，那它就没有力量了；它的灵魂放在一个最严密的地方，只有我们几个最亲近的人才知道。”库尔班就请求她们带他去找。走到一扇门前，姑娘说：“就在这里。”库尔班见门口有两条长蛇守护。他先把它们杀掉，门自己敞开了。姑娘说：“你自己进去吧。里面有座高塔，你一直走到塔的最高一层，有一扇门，门前站着一只白公鸡，你先不要动它。门旁边有一块砖，你先把砖拿开，下面有一口小箱子，箱子里有几颗绿豆，你把绿豆拿出来，打那只鸡。第一颗把它的眼睛打瞎，第二颗把它的喉咙打断，第三颗打得它半死不活，第四颗就能把它打死，滚下台阶；门自己就开了。那时你再叫我们吧。”库尔班进去，走上塔顶，果然那里站着一只白公鸡，他便依照姑娘的话，找到绿豆，打死了公鸡；然后把两位姑娘叫上去。姑娘说：“你打开这扇门进去，有一条向下去的台阶，是宝石砌成的，你顺着台阶走到一间屋子，那里有个磨盘在转动，磨盘的柱顶上站着一只绿公鸡，你用绿豆把它打死，磨盘就不转了。揭开磨盘有一道门，进去再沿着一条台阶往下走，会看见一块黑石头，上面放着一口箱子，箱子里面装满了水，水里游着一条鱼，把鱼肚子剖开，里面有一个蛋，你拿蛋使劲往地上一摔，摔碎了，里边有一个小盒子，魔王的灵魂就在那里面；你只要把这个小盒子弄到手，就算战胜了魔王；你把小盒子放在火里烧，就能把魔王烧死。你去吧，我们两个在这里等着你。”<br>　　艾里·库尔班依着姑娘的话，把小盒子弄到手，点起火来一烧，魔王在他面前出现了，愁眉苦脸地跪在地下，苦苦哀求。火烧得越旺，它的身子缩得越小；把盒子从火里拿出来，它的身子又涨大了。艾里·库尔班审问它：“吃了多少人？”魔王说：“有四千个小孩，是烧着吃的；一万个人是煮着吃的。”库尔班见魔王作恶太多，就把它烧死了。这个国家里的群魔，听说魔王已死，便都来到王宫，跪在地下说：“我们平时都是安分守己的，从来不和人作对；这个魔王是非常残暴的国王，连我们也都反对它。现在你既然把它杀了，就请你作我们的国王吧！”艾里·库尔班不肯，因为他知道母亲在家里很想念他。他一定要走。群魔见挽留不住他，就送了他很多礼物，都是人们从来没有见过的宝贝。魔王的两个女儿也一定要跟他走，因为是事先约好的，便只好把她们带上。魔王宫里还有四个青年女人，是魔王从人间抓来的，还没有顾得上吃，这时她们也要求带她们回去。艾里·库尔班便收拾好三口箱子——一口箱子装收下的礼物，一口箱子装魔王的女儿，一口箱子装人间的四个女子——准备带回国去。</p><h3 id="十二、艾里·库尔班遇难"><a href="#十二、艾里·库尔班遇难" class="headerlink" title="十二、艾里·库尔班遇难"></a>十二、艾里·库尔班遇难</h3><p>　　四个巴图尔打猎回来，不见库尔班。只见满地血迹殷殷，还有魔王的脑袋，就知道这里已经发生过战斗了。四个巴图尔一块儿商量，凉面巴图尔说：“我们散伙了吧，谁不知道魔王的厉害，师傅回不来了。”磨盘巴图尔说：“拜师傅的时候我说过：师傅到哪儿，我跟到哪儿；我一定要找他去。”钢铁巴图尔说：“我们跟着师傅就是为着帮助他打魔王的，还没有打就怕了，那还算得什么巴图尔？”凉面巴图尔见他们一定要找，只好依从，便也顺着血迹走去。一路上，凉面巴图尔不住地和冰上巴图尔嘀咕，冰上巴图尔渐渐被他说活动了，心想：跟着师傅到处受罪，倒不如自己回家去好。<br>　　他们四个人找到井跟前，发现艾里·库尔班的腰带悬在井口，知道他从这里下去了。四个人商量了一下，就都坐在井边等待，等着等着，凉面巴图尔又不耐烦了，说：“师傅一定是死了，连这条腰带都扔了！”磨盘巴图尔说：“师傅一定还在，他下井去抓魔王，抓住就会回来的。”争争吵吵，凉面巴图尔要走也走不了。<br>　　忽然，带子动了，磨盘巴图尔向井底喊叫，他听到井底艾里·库尔班的声音，喜欢得不得了，便和钢铁巴图尔牵着带子往上拉，拉上来的见是口箱子，打开一看，原来是两个年青漂亮的姑娘，问师傅在哪里，姑娘说：“下面还有几口箱子，全都吊上来以后他才上来呢！”磨盘巴图尔便赶忙把带子放下。<br>　　凉面巴图尔心里有些惊惶，就和冰上巴图尔商量：“师傅上来，这两个家伙一定告状，要是叫他知道我们两个要走，我看轻饶不了咱们，咱们还是赶快想个主意吧。”<br>　　等到吊上了第二只箱子的时候，他们两个便对磨盘巴图尔说：“你们两个拉了半天，也该歇歇了，我们两个来拉吧。”在拉第三只箱子上来以后，他们两个偷偷地把带子割断了几处，只有一点连着，又放下去；这次恰巧是艾里·库尔班上来，刚上到半截，带子断了！……<br>　　凉面巴图尔这一下算是达到自己的愿望了。不管别人怎样反对，还是带着宝贝和女人走了。</p><h3 id="十三、艾里·库尔班脱险"><a href="#十三、艾里·库尔班脱险" class="headerlink" title="十三、艾里·库尔班脱险"></a>十三、艾里·库尔班脱险</h3><p>　　魔国的一群魔女，想起了艾里·库尔班和她的女伴，不知他们走了没有，都到井底来看。艾里·库尔班躺在那里昏沉沉的，魔女们一见，连忙把他抬回宫里，照料抚养。过了几天，伤养好了，库尔班便和她们商量怎样走出去。魔女说：“井口是无法上去了，离这里有三天路程的地方有只大鹰，要是你能够求得动它，它就可以送你上去。除此以外，再没有别的办法了。”艾里·库尔班听了魔女的话，问清方向道路，就向她们告别去找大鹰。走了三天，看见一棵大树，树上有很多小鹰，不知什么原因，都在哭哭啼啼，显得非常恐惧。走近前一看，原来有条大蛇，爬在树上，吸住小鹰，捉一个吃一个，小鹰飞也不能飞，躲也没处躲，盼望老鹰回来又盼不到。艾里·库尔班见小鹰非常可怜，就爬上大树，抽出宝剑，砍死了大蛇。小鹰们见有人来救了它们，都围绕着他跪下来，高兴得吱吱乱叫；叫了一阵，忽然都惊呆起来，歪着脑袋听了一阵，对艾里·库尔班说：“坏了，快躲藏起来吧，妈妈回来了。”库尔班说：“妈妈回来怕什么？”小鹰们说：“你不知道，妈妈常说，人是它最大的仇敌，见着人它就决不能让他活着，你快藏起来吧。”艾里·库尔班就找了个洞子隐蔽起来。小鹰们还在树上跳着、唱着，等待着母亲。一会大鹰来了，一见小鹰们非常高兴，便问：“你们有什么喜事呀？”小鹰们说：“那条长虫上树来吃我们的时候，来了个人，把它杀死，救了我们的性命。”大鹰问：“那个人在哪里？”小鹰说：“不知道。”小鹰接着又问：“妈妈，你吃不吃他？”大鹰说：“他救了你们的命，替我们除了害，我怎么还会吃他呢？”小鹰听了，就领着大鹰找到艾里·库尔班隐藏着的洞。大鹰见了艾里·库尔班，向他道谢，并问他为什么来到这儿，库尔班便告诉它，自己怎么战胜了魔王，怎样遇难，希望它帮助自己离开这里。大鹰说：“这条路非常难走，要飞十九天十九夜，才能飞出去，中间没有一个歇脚的地方；既然你一定要走，我可以送你。咱们准备吧——准备十九天吃的肉，十九天喝的水。”大鹰领着艾里·库尔班到山里杀了几头犀牛，把肉煮在锅里，把犀牛皮做成装水的口袋。一切准备停当，就把几头犀牛的肉，几大皮袋的水，都放在大鹰身上；然后，艾里·库尔班骑在大鹰背上，便起飞了。路上，大鹰饿了，向库尔班要肉，库尔班就给它肉；渴了要水喝，库尔班就给它水。一直飞了十八天，肉也吃完了，水也喝光了，大鹰飞得也有些疲倦，又回过头来向他要肉。艾里·库尔班非常为难，心想，要是叫它知道没有肉了，翅膀没了劲，一定要出危险，他就抽出宝剑，从自己大腿上割下一块肉来，给大鹰吃了。大鹰吃了以后，觉得翅膀特别有劲，又飞了一天一夜，才飞到了陆地。</p><h3 id="十四、艾里·库尔班回家"><a href="#十四、艾里·库尔班回家" class="headerlink" title="十四、艾里·库尔班回家"></a>十四、艾里·库尔班回家</h3><p>　　库尔班回到陆地上以后，到处找他的巴图尔。找了很久，有一天碰到一支军队，一打听，才知道是凉面巴图尔的队伍；可是，当找到他的时候，他却反脸不认师傅了。又经过了一番战斗，打得他五体投地、心服口服，并且保证说：“以后一定要老老实实跟着师傅，再不敢变心了。”磨盘巴图尔，钢铁巴图尔，冰上巴图尔，听说师傅回来，也都陆续找着来了。<br>　　原来，魔王的两个女儿，还有四个人间女子，都被凉面巴图尔看上了，要强迫她们和他结婚。魔王的女儿，使了个小小的魔术，把六只猫变成六个年轻女子，凉面巴图尔一入洞房，浑身上下都被抓得稀烂。她们六个人偷偷逃走了。这时，听说库尔班回来了，她们也一块跟着找来。<br>　　库尔班回到京城，人人欢迎，家家庆祝。全国人民都称他为艾里·库尔班巴图尔。国王见他没有死，又见老百姓这样爱戴他，就虚情假意地为他设宴庆功，并且要把王位让给他。艾里·库尔班说：“我不想当国王，我还是回家去种地好。”<br>　　艾里·库尔班回到家中，魔王的两个女儿跟他一起，过着幸福美满的生活。  </p>]]></content>
      
      
      <categories>
          
          <category> 其它分类 </category>
          
          <category> 故事小说 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 故事 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP识别验证码后提交</title>
      <link href="/php-identification-code-and-submission.html"/>
      <url>/php-identification-code-and-submission.html</url>
      
        <content type="html"><![CDATA[<p>关于PHP识别验证码可以查看上一篇文章：<a href="/php-verification-code-identification-primary.html">《PHP实现验证码的识别(初级篇)》</a> 。</p><h3 id="一、获取图片网址"><a href="#一、获取图片网址" class="headerlink" title="一、获取图片网址"></a>一、获取图片网址</h3><p>在验证码图片处点击右键，选择复制图片网址选项，可以得到图片的网址：<br><code>http://www.net.cn/has_client/include/pwdcode.asp</code><br>可以看出，此验证码是通过<code>pwdcode.asp</code>文件得到的。</p><h3 id="二、获取图片格式"><a href="#二、获取图片格式" class="headerlink" title="二、获取图片格式"></a>二、获取图片格式</h3><p>在验证码图片处点击右键，选择图片另存为选项，发现此图片为bmp格式。<br>但是php中并没有打开bmp格式图片的函数，所以只好在网上找了一段bmp转jpg的php代码。</p><p>将bmp图片转换为jpg格式后，发现图片失真严重：<br><img src="/assets/2012/06/valid_1.png" class="lazyload placeholder" data-srcset="/assets/2012/06/valid_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>图片背景有很多噪点，其实现在有很多网站的验证码也差不多是这个样子的。</p><p>用php重新识别了一下验证码：<br><img src="/assets/2012/06/valid_2.png" class="lazyload placeholder" data-srcset="/assets/2012/06/valid_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>出错了，1251识别成1855，现在只能重新修改颜色判断的代码了。</p><h3 id="三、增加代码兼容性"><a href="#三、增加代码兼容性" class="headerlink" title="三、增加代码兼容性"></a>三、增加代码兼容性</h3><p>用屏幕取色工具观察颜色的规律，发现数字颜色的R，G，B值大部分都小于160，而背景颜色大部分都大于160，所以把颜色判断条件改为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$rgbarray</span>[<span class="string">&#x27;red&#x27;</span>] &lt; <span class="number">160</span> || <span class="variable">$rgbarray</span>[<span class="string">&#x27;green&#x27;</span>] &lt; <span class="number">160</span> || <span class="variable">$rgbarray</span>[<span class="string">&#x27;blue&#x27;</span>] &lt; <span class="number">160</span>)</span><br></pre></td></tr></table></figure><p>重新识别一下，发现可以成功识别出来了：<br><img src="/assets/2012/06/valid_3.png" class="lazyload placeholder" data-srcset="/assets/2012/06/valid_3.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><h3 id="四、获取提交的网址"><a href="#四、获取提交的网址" class="headerlink" title="四、获取提交的网址"></a>四、获取提交的网址</h3><p>最简单的方法是用firefox的firebug插件查看提交的网址，发现提交的网址为：<br><code>http://www.net.cn/has\_client/whois1.asp?tongyong=yes&amp;domain=poboke&amp;code=1251</code><br>其中参数domain是要查询的通用网址，code是验证码。<br>所以只要识别出验证码，再提交这个网址就行了。  </p><h3 id="五、保存图片和cookie"><a href="#五、保存图片和cookie" class="headerlink" title="五、保存图片和cookie"></a>五、保存图片和cookie</h3><p>服务器是根据cookie值来识别某个验证码的，所以获取验证码时，要保存服务器返回的cookie，并且把图片保存到本地，转换成jpg格式后再识别，参考代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$url</span> = <span class="string">&quot;http://www.net.cn/has_client/include/pwdcode.asp&quot;</span>;</span><br><span class="line"><span class="variable">$cookie</span> = dirname(<span class="keyword">__FILE__</span>).<span class="string">&quot;/valid.tmp&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问验证码图片网址，把返回的cookie保存为valid.tmp文件</span></span><br><span class="line"><span class="variable">$curl</span> = curl_init(<span class="variable">$url</span>);</span><br><span class="line">curl_setopt(<span class="variable">$curl</span>, CURLOPT_REFERER, <span class="variable">$referer</span>);</span><br><span class="line">curl_setopt(<span class="variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">curl_setopt(<span class="variable">$curl</span>, CURLOPT_COOKIEFILE, <span class="variable">$cookie</span>);</span><br><span class="line">curl_setopt(<span class="variable">$curl</span>, CURLOPT_COOKIEJAR, <span class="variable">$cookie</span>);</span><br><span class="line"><span class="variable">$data</span> = curl_exec(<span class="variable">$curl</span>);</span><br><span class="line">curl_close(<span class="variable">$curl</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//保存验证码图片</span></span><br><span class="line"><span class="variable">$fp</span> = fopen(<span class="string">&quot;valid.bmp&quot;</span>,<span class="string">&quot;wb&quot;</span>);</span><br><span class="line">fwrite(<span class="variable">$fp</span>, <span class="variable">$data</span>);</span><br><span class="line">fclose(<span class="variable">$fp</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//转换图片格式</span></span><br><span class="line"><span class="variable">$img</span> = ImageCreateFromBmp(<span class="string">&quot;valid.bmp&quot;</span>);  </span><br><span class="line">imagejpeg(<span class="variable">$img</span>, <span class="string">&quot;valid.jpg&quot;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//识别验证码图片</span></span><br><span class="line"><span class="variable">$valid</span> = <span class="keyword">new</span> Valite();</span><br><span class="line"><span class="variable">$valid</span>-&gt;setImage(<span class="string">&quot;valid.jpg&quot;</span>);</span><br><span class="line"><span class="variable">$valid</span>-&gt;getHec();</span><br><span class="line"><span class="variable">$validCode</span> = <span class="variable">$valid</span>-&gt;run();</span><br></pre></td></tr></table></figure><h3 id="六、提交验证码"><a href="#六、提交验证码" class="headerlink" title="六、提交验证码"></a>六、提交验证码</h3><p>前面已经识别出验证码和保存了cookie了，现在就要提交验证码，并发送cookie。<br>为了方便，模仿了通用网址查询的输入框，参考代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入框表单</span></span><br><span class="line"><span class="keyword">echo</span> iconv(<span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;gbk&#x27;</span>, <span class="string">&quot;通用网址查询：&lt;br&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;form name=&#x27;form&#x27; method=&#x27;get&#x27; action=&#x27;&#x27;&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;input type=&#x27;text&#x27; name=&#x27;domain&#x27; value=&#x27;poboke&#x27;/&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;input type=&#x27;text&#x27; name=&#x27;code&#x27; value=&#x27;<span class="subst">$validCode</span>&#x27; size=10/&gt; &quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;valid.jpg&quot;&gt;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;input type=&#x27;submit&#x27; /&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/form&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;domain&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//发送cookie和验证码</span></span><br><span class="line">    <span class="variable">$domain</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;domain&#x27;</span>];</span><br><span class="line">    <span class="variable">$url</span> = <span class="string">&quot;http://www.net.cn/has_client/whois1.asp?tongyong=yes&amp;domain=<span class="subst">$domain</span>&amp;code=<span class="subst">$validCode</span>&quot;</span>;</span><br><span class="line">    <span class="variable">$curl</span> = curl_init(<span class="variable">$url</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_REFERER, <span class="variable">$referer</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$curl</span>, CURLOPT_COOKIEFILE, <span class="variable">$cookie</span>);</span><br><span class="line">    <span class="variable">$src</span> = curl_exec(<span class="variable">$curl</span>);</span><br><span class="line">    curl_close(<span class="variable">$curl</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//匹配出返回的结果并显示出来</span></span><br><span class="line">    preg_match(<span class="string">&#x27;|10.5pt\&#x27;&gt;(.*)&lt;br&gt;|U&#x27;</span>, <span class="variable">$src</span>, <span class="variable">$res</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$res</span>[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/assets/2012/06/valid_4.png" class="lazyload placeholder" data-srcset="/assets/2012/06/valid_4.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><h3 id="七、源码下载"><a href="#七、源码下载" class="headerlink" title="七、源码下载"></a>七、源码下载</h3><p><a href="/assets/2012/06/valid.zip">点击下载源码</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP实现验证码的识别(初级篇)</title>
      <link href="/php-verification-code-identification-primary.html"/>
      <url>/php-verification-code-identification-primary.html</url>
      
        <content type="html"><![CDATA[<p>原文地址：<code>http://blog.csdn.net/ugg/article/details/3953137</code><br>但是原文的介绍比较简单，而且没提到算法的具体实现过程。<br>所以本文以一个实际例子来演示php识别验证码的过程，并提交验证码到服务器验证。</p><h3 id="一、验证码识别介绍"><a href="#一、验证码识别介绍" class="headerlink" title="一、验证码识别介绍"></a>一、验证码识别介绍</h3><p>近期研究一些突破验证码方面的知识，记录下来。一方面算是对这几天学习知识的总结帮助自己理解；另一方面希望对研究这方面的技术同学有所帮助；另外也希望引起网站管理者的注意，在提供验证码时多些考虑进去。由于刚刚接触这方面的知识，理解比较浅显，有错误再所难免，欢迎拍砖。</p><p>验证码的作用：有效防止某个黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试。其实现代的验证码一般是防止机器批量注册的，防止机器批量发帖回复。目前，不少网站为了防止用户利用机器人自动注册、登录、灌水，都采用了验证码技术。</p><p>所谓验证码，就是将一串随机产生的数字或符号，生成一幅图片，图片里加上一些干扰象素（防止OCR），由用户肉眼识别其中的验证码信息，输入表单提交网站验证，验证成功后才能使用某项功能。</p><p>我们最常见的验证码：<br>1、四位数字，随机的一数字字符串，最原始的验证码，验证作用几乎为零。<br>2、随机数字图片验证码。图片上的字符比较中规中矩，有的可能加入一些随机干扰素，还有一些是随机字符颜色，验证作用比上一个好。没有基本图形图像学知识的人，不可破！<br>3、各种图片格式的随机数字+随机大写英文字母+随机干扰像素+随机位置。 <br>4、汉字是注册目前最新的验证码，随机生成，打起来更难了,影响用户体验，所以，一般应用的比较少。</p><p>简单起见，我们这次说明的主要对象是第1种类型的，我们先看几种网上比较常见的验证码图片。<br><img src="/assets/2012/06/valids_1.png" class="lazyload placeholder" data-srcset="/assets/2012/06/valids_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>这四种样式，基本上能代表2中所提到的验证码类型，初步看起来第一个图片最容易破解，第二个次之，第三个更难,第四个最难。<br>真实情况呢？其实这三种图片破解难度相同。</p><p>第一个图片，最容易，图片背景和数字都使用相同的颜色，字符规整，字符位置统一。本篇文章，就一这种类型验证码为例说明，其它的图片，同学们自己搞。<br>第二个图片，看似不容易，其实仔细研究会发现其规则，背景色和干扰素无论怎么变化，验证字符字符规整，颜色相同，所以排除干扰素非常容易，只要是非字符色素全部排除即可。<br>第三个图片，看似更复杂，处理上面提到背景色和干扰素一直变化外，验证字符的颜色也在变化，并且各个字符的颜色也各不相同。<br>第四个图片，除了第三个图片上提到的特征外，又在文字上加了两条直线干扰率，看似困难其实，很容易去掉。  </p><h3 id="二、实践例子"><a href="#二、实践例子" class="headerlink" title="二、实践例子"></a>二、实践例子</h3><p>下面以万网的“通用网址查询”来说明验证码的识别过程。</p><p>打开万网：<code>http://www.net.cn</code>，网站右边侧边栏有一个“通用网址查询”：<br><img src="/assets/2012/06/valids_2.png" class="lazyload placeholder" data-srcset="/assets/2012/06/valids_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>可以看出，这是第一种验证码，为了让人眼能够识别出数字，所以验证码图片的数字颜色和背景颜色的色差是比较大的，所以其RBG值也相差很大，可以通过判断每个像素的RGB值来区分数字和背景。</p><h3 id="三、验证码识别步骤"><a href="#三、验证码识别步骤" class="headerlink" title="三、验证码识别步骤"></a>三、验证码识别步骤</h3><h4 id="1、取出字模"><a href="#1、取出字模" class="headerlink" title="1、取出字模"></a>1、取出字模</h4><p>识别验证码，毕竟不是专业的OCR识别，并且，由于各个网站的验证码各不相同，所以，最常见的方法就是就是建立这个验证码的特征码库。去字模时，我们需要多下载几张图片，使这些图片中，包括所有的字符，我们这里的图片里只有数字，所以，只要收集到包括0-9的数字图片即可。</p><p>(1)、多刷新几次验证码，将验证码图片保存起来，要搜集齐0-9的图片。<br><img src="/assets/2012/06/valids_5.png" class="lazyload placeholder" data-srcset="/assets/2012/06/valids_5.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>(2)、用图片处理软件打开图片，我用的是Fireworks，按住ctrl+8可以将图片的视图放大8倍，这样就能很清楚地观察到图片的每个像素。<br><img src="/assets/2012/06/valids_3.png" class="lazyload placeholder" data-srcset="/assets/2012/06/valids_3.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>可以发现，每个数字的宽是6px，高是10px，数字的间隔是4px，第一个数字左边偏移了2px，顶部偏移了0px。这些数字后面都是要用到的。</p><p>(3)、将每个数字截出来保存为图片，大小为6*10。<br><img src="/assets/2012/06/valids_7.png" class="lazyload placeholder" data-srcset="/assets/2012/06/valids_7.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><h4 id="2、图片二值化"><a href="#2、图片二值化" class="headerlink" title="2、图片二值化"></a>2、图片二值化</h4><p>二值化就是把图片上的验证数字上每个象素用数字1表示，其它部分用0表示。把要识别的图片，进行二值化，将数据保存到二维数组里，得到图片特征数组。</p><p>(1)、首先要将数字和背景色和干扰色区分开来，用屏幕取色器观察颜色的规律。<br><img src="/assets/2012/06/valids_4.png" class="lazyload placeholder" data-srcset="/assets/2012/06/valids_4.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>可以得出一个结论：背景颜色的R、G、B值都是大于200的，而数字的颜色的R、G、B值的某一项有可能小于200，因此可以很容易区分。</p><p>(2)、下面的php代码只是为了演示二维数组，为了直观看出数字，所以把1和0改为了0和-：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&lt;img src=&quot;v1.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">getHec(<span class="string">&quot;v1.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHec</span>(<span class="params"><span class="variable">$imagePath</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$res</span> = imagecreatefromjpeg(<span class="variable">$imagePath</span>);</span><br><span class="line">    <span class="variable">$size</span> = getimagesize(<span class="variable">$imagePath</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$size</span>[<span class="number">1</span>]; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$size</span>[<span class="number">0</span>]; ++<span class="variable">$j</span>) &#123;</span><br><span class="line">            <span class="variable">$rgb</span> = imagecolorat(<span class="variable">$res</span>, <span class="variable">$j</span>, <span class="variable">$i</span>);</span><br><span class="line">            <span class="variable">$rgbarray</span> = imagecolorsforindex(<span class="variable">$res</span>, <span class="variable">$rgb</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$rgbarray</span>[<span class="string">&#x27;red&#x27;</span>] &lt; <span class="number">200</span> || <span class="variable">$rgbarray</span>[<span class="string">&#x27;green&#x27;</span>]&lt;<span class="number">200</span> || <span class="variable">$rgbarray</span>[<span class="string">&#x27;blue&#x27;</span>] &lt; <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;-&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>结果如下图所示：<br><img src="/assets/2012/06/valids_6.png" class="lazyload placeholder" data-srcset="/assets/2012/06/valids_6.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>如果图片的背景颜色比较复杂，处理方法也是一样的，总能找到临界值来区分，具体要靠自己观察了。</p><h4 id="3、数字字模二值化"><a href="#3、数字字模二值化" class="headerlink" title="3、数字字模二值化"></a>3、数字字模二值化</h4><p>计算出每个数字字模的二值化的数据，记录下这些数据，当作key即可。</p><p>(1)、将0-9的数字字模图片进行二值化，逐个取出图片的像个像素的颜色，然后获取每个像素的R、G、B值，再进行判断，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">10</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&#x27;<span class="subst">$i</span>&#x27;=&gt;&#x27;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> getHec(<span class="string">&quot;<span class="subst">$i</span>.jpg&quot;</span>).<span class="string">&quot;&#x27;,&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHec</span>(<span class="params"><span class="variable">$imagePath</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$res</span> = imagecreatefromjpeg(<span class="variable">$imagePath</span>);</span><br><span class="line">    <span class="variable">$size</span> = getimagesize(<span class="variable">$imagePath</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$size</span>[<span class="number">1</span>]; ++<span class="variable">$i</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="variable">$size</span>[<span class="number">0</span>]; ++<span class="variable">$j</span>) &#123;</span><br><span class="line">            <span class="variable">$rgb</span> = imagecolorat(<span class="variable">$res</span>, <span class="variable">$j</span>, <span class="variable">$i</span>);</span><br><span class="line">            <span class="variable">$rgbarray</span> = imagecolorsforindex(<span class="variable">$res</span>, <span class="variable">$rgb</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$rgbarray</span>[<span class="string">&#x27;red&#x27;</span>] &lt; <span class="number">200</span> || <span class="variable">$rgbarray</span>[<span class="string">&#x27;green&#x27;</span>]&lt;<span class="number">200</span> || <span class="variable">$rgbarray</span>[<span class="string">&#x27;blue&#x27;</span>] &lt; <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x27;0&#x27; =&gt; &#x27;011110100001100001100001100001100001100001100001100001011110&#x27;,</span><br><span class="line">&#x27;1&#x27; =&gt; &#x27;001000111000001000001000001000001000001000001000001000111110&#x27;,</span><br><span class="line">&#x27;2&#x27; =&gt; &#x27;011110100001100001000001000010000100001000010000110011111111&#x27;,</span><br><span class="line">&#x27;3&#x27; =&gt; &#x27;011110100001100001000010001100000010000001100001100001011110&#x27;,</span><br><span class="line">&#x27;4&#x27; =&gt; &#x27;000100000100001100010100100100100100111111000100001100001111&#x27;,</span><br><span class="line">&#x27;5&#x27; =&gt; &#x27;111111100000100000101110110001000001000001100001100001011110&#x27;,</span><br><span class="line">&#x27;6&#x27; =&gt; &#x27;001110010001100000100000101110110001100001100001100001011110&#x27;,</span><br><span class="line">&#x27;7&#x27; =&gt; &#x27;111111100010100010000100000100001000001000001000001000001000&#x27;,</span><br><span class="line">&#x27;8&#x27; =&gt; &#x27;011110100001100001100001011110010010100001100001100001011110&#x27;,</span><br><span class="line">&#x27;9&#x27; =&gt; &#x27;011100100010100001100001100011011101000001000001100010011100&#x27;,</span><br></pre></td></tr></table></figure><h4 id="4、对照样本"><a href="#4、对照样本" class="headerlink" title="4、对照样本"></a>4、对照样本</h4><p>把步骤二中的图片特征码和步骤三中的验证码的字模进行对比，得到验证图片上的数字。</p><p>算法过程（代码见附件）：<br>(1)、将图片二值化后的值保存到二维数组里。<br>(2)、通过循环，求出每一个数字的位置，要用到前面得到的数字的宽、高、间隔、左边偏移、顶部偏移。<br>例如：第i个数字左边偏移 =（数字宽 + 间隔）* i + 左边偏移。<br>(3)、知道了数字的偏移位置，就可以计算出数字在二维数组里的位置，通过循环将数字的6*10=60个数据取出来拼接在一起，就形成了与数字字模类似的字符串。<br>(4)、将字符串与每一个字模的字符串比较，求其相似度，取最高的相似度对应的数字，或者相似度达到95%以上就可以断定是某个数字。<br>(5)、识别结果如下：<br><img src="/assets/2012/06/valids_8.png" class="lazyload placeholder" data-srcset="/assets/2012/06/valids_8.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>使用目前这种方法，对验证码的识别基本上可以做到100%。<br>通过以上步骤，您可能说了，并没有发现如何取出干扰素啊！其实取出干扰素的方法很简单，干扰素的一个重要特征是，不能影响验证码的显示效果，所以制作干扰素时它的RGB可能低于或者高于某个特定值，比如我给的例子中的图片，干扰素的RGB各项值是不会小于200的，所以，这样我们就很容易去掉干扰素了。</p><p>第二部分的内容还是挺多的，所以另开帖子了，详情见 <a href="/php-identification-code-and-submission.html">《PHP识别验证码后提交》</a>。</p><h3 id="四、源码下载"><a href="#四、源码下载" class="headerlink" title="四、源码下载"></a>四、源码下载</h3><p><a href="/assets/2012/06/valids.zip">点击下载源码</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 算法之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WordPress评论发送短信通知</title>
      <link href="/wordpress-comments-to-send-sms-notification.html"/>
      <url>/wordpress-comments-to-send-sms-notification.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、代码下载"><a href="#一、代码下载" class="headerlink" title="一、代码下载"></a>一、代码下载</h3><p>下载PHP飞信发送类，地址为 <a href="http://code.google.com/p/php-fetion/downloads/list">http://code.google.com/p/php-fetion/downloads/list</a>。</p><p>将<code>PHPFetion.php</code>文件放到主题根目录下。</p><h3 id="二、代码使用"><a href="#二、代码使用" class="headerlink" title="二、代码使用"></a>二、代码使用</h3><p>编辑主题文件<code>functions.php</code>，在<code>&lt;?php</code>和<code>?&gt;</code>之间添加以下代码即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;PHPFetion.php&#x27;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//评论发短信</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">comment_fetion_notify</span>(<span class="params"><span class="variable">$comment_id</span></span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="variable">$comment</span> = get_comment(<span class="variable">$comment_id</span>);    <span class="comment">//获取评论内容</span></span><br><span class="line">    <span class="variable">$spam_confirmed</span> = <span class="variable">$comment</span>-&gt;comment_approved;    <span class="comment">//是否垃圾评论</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$spam_confirmed</span> != <span class="string">&#x27;spam&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable">$author</span> = trim(<span class="variable">$comment</span>-&gt;comment_author);    <span class="comment">//作者</span></span><br><span class="line">        <span class="variable">$title</span> = get_the_title(<span class="variable">$comment</span>-&gt;comment_post_ID);   <span class="comment">//文章标题</span></span><br><span class="line">        <span class="variable">$comment</span> = trim(<span class="variable">$comment</span>-&gt;comment_content);  <span class="comment">//评论内容</span></span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;【&quot;</span>.<span class="variable">$author</span>.<span class="string">&quot;】评论了《&quot;</span>.<span class="variable">$title</span>.<span class="string">&quot;》：&quot;</span>.<span class="variable">$comment</span>;</span><br><span class="line">        <span class="variable">$fetion</span> = <span class="keyword">new</span> PHPFetion(手机号, 飞信密码);</span><br><span class="line">        <span class="variable">$fetion</span>-&gt;send(手机号, <span class="variable">$msg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">add_action(<span class="string">&#x27;comment_post&#x27;</span>, <span class="string">&#x27;comment_fetion_notify&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="三、效果预览"><a href="#三、效果预览" class="headerlink" title="三、效果预览"></a>三、效果预览</h3><p>在博客评论后，手机将收到如下短信：<br><img src="/assets/2012/05/sms_text.jpg" class="lazyload placeholder" data-srcset="/assets/2012/05/sms_text.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p>]]></content>
      
      
      <categories>
          
          <category> 其它分类 </category>
          
          <category> 博客折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WordPress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神奇的三维图片</title>
      <link href="/amazing-3d-pictures.html"/>
      <url>/amazing-3d-pictures.html</url>
      
        <content type="html"><![CDATA[<p>三维图片是一种很神奇的图片，是利用人眼立体视觉现象制作的绘画作品，虽然这种表面看起来是平面的，但是当你用一种特殊的方法去看图片，你将会看到一个漂浮起来的立体图像。<br>普通绘画和摄影作品，包括电脑制作的三维动画，只是运用了人眼对光影、明暗、虚实的感觉得到立体的感觉，而没有利用双眼的立体视觉，一只眼看和两只眼看都是一样的。<br>充分利用双眼立体视觉的三维图片，将带你进入一个奇幻的世界。<br>下面将给大家介绍三维图片的原理以及看图片的方法。</p><h4 id="一、人眼成像原理"><a href="#一、人眼成像原理" class="headerlink" title="一、人眼成像原理"></a>一、人眼成像原理</h4><p>人有两只眼（基因突变的除外），两只眼有一定距离，这就造成物体的影像在两眼中有一些差异，见下图：</p><p><img src="/assets/2012/04/3d_eyes.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/3d_eyes.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>由图可知，因为物体与眼的距离不同，所以两眼的视角会有所不同，由于视角的不同所看到的影像也会有一些差异，大脑会根据这种差异感觉到立体的影像。   </p><p>下面是一张人眼的成像原理图片：<br><img src="/assets/2012/04/3d_principle.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/3d_principle.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"><br>绿色的箭头是人们看到的普通物体，人眼看到的物体大小不变。<br>较短的蓝色箭头位于人眼的焦点内，所以人们看到的是比实物大的虚像（也就是最长的蓝箭头），一般念过初中物理的人都知道的。<br>不信的话，请你把手指竖到你眼前0.1厘米的地方，你会看到一个很大的手指，而且是半透明的呢，多么精致的手指啊！但是当你遮住一只眼看的话就不透明了。为什么遮住一只眼看的话就不透明了呢？用一个真理来解释就是：光沿直线传播！</p><blockquote><p>好了，我们再来做个试验，把你右手的食指竖在你的眼睛和电脑屏幕的中间，看着这行字，并用你眼睛的余光去看手指，如果你的操作没错的话，你会看到两根食指。这是因为你把眼睛的焦点放在手指后面。</p></blockquote><h4 id="二、三维图片成像原理"><a href="#二、三维图片成像原理" class="headerlink" title="二、三维图片成像原理"></a>二、三维图片成像原理</h4><p>三维图片就是利用这个原理，三维图片其实就是在水平方向的一系列重复的图案，当你把这些图案重合起来时，就看到了立体的影像。参见下图，这是一幅简单到不能再简单的立体画了：<br><img src="/assets/2012/04/3d_circles.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/3d_circles.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"><br>这图片你现在看起来只是平面的，用特殊方法看起来时就是立体的，图中最上一行圆最远，最下一行圆最近，请注意：最上一行圆之间距离最大，最下一行圆之间距离最小。</p><p>这是怎么发生的呢？让我们再看下图，从图中我们可以看到，重复图案的距离决定了立体影象的远近。</p><p><img src="/assets/2012/04/3d_circle_saw.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/3d_circle_saw.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><h4 id="三、三维图片的观看"><a href="#三、三维图片的观看" class="headerlink" title="三、三维图片的观看"></a>三、三维图片的观看</h4><p>如果你现在还不会看立体画，是不是已经很着急了，不要着急，下面我将介绍怎样看立体画。</p><p>立体画有两种形式：第一种是由相同的图案在水平方向以不同间隔排列而成（跟上面那幅有很多圆圈的图片差不多），看起来是远近不同的物体。这样的立体画可用任意一种图象处理软件制作，如<code>Photoshop</code>、<code>Fireworks</code>等，你也可以一试。</p><p>下面我们重点是看第二种形式:</p><p>这一种立体画较复杂，在这种立体画上你不能直接看到物体的形象，画面上只有杂乱的图案，制作这样的立体画只有使用程序了，如下图：</p><p><img src="/assets/2012/04/3d_jay_1.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/3d_jay_1.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>你看到了什么？<br>没错，就是<code>公子</code>两个字，而且是在图片上凸出来的。如下图：</p><p><img src="/assets/2012/04/3d_jay_2.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/3d_jay_2.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>什么？你还不会看？那好吧，我说一下。</p><blockquote><p>我们看看前面的试验，把你右手的食指竖在你的眼睛和电脑屏幕的中间，看着这行字，并用你眼睛的余光去看手指，如果你的操作没错的话，你会看到两根食指，这是因为你把眼睛的焦点放在手指后面。</p></blockquote><p>你就把三维图片当做你的食指去看，把焦点移到图片后面，用下面的两个圆圈来说明吧。把图片放到与你眼睛同一水平面看。</p><p><img src="/assets/2012/04/3d_two_circles.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/3d_two_circles.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>模仿看手指的方法，把每个圆都看成两个圆，这样一来你就看到四个圆了。当然这四个圆都是半透明的，接下来你要做的就是把四个圆的中间的两个圆重叠在一起，不断调整角度你就会成功。中间的两个圆重叠在一起后就不是透明的了，因为0.5+0.5=1，只有两旁的两个圆还是半透明的，也就是说你看到三个圆。</p><p>上面的那幅<code>公子</code>三维图片也是这样看的，我们来解刨三维图片。<br><img src="/assets/2012/04/3d_jay_1.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/3d_jay_1.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>上面的三维图片其实是由4张下面的图（背景图）组成的：<br><img src="/assets/2012/04/3d_jay_0.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/3d_jay_0.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>背景图和圆是一样的，都是连续重复的图片，看法当然也是一样的，大家多练习吧。</p><h4 id="四、快速玩找茬游戏"><a href="#四、快速玩找茬游戏" class="headerlink" title="四、快速玩找茬游戏"></a>四、快速玩找茬游戏</h4><p>这种方法可以用来快速玩找茬游戏，例如下面这张《植物大战僵尸》的找茬图片：<br><img src="/assets/2012/04/3d_find_original.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/3d_find_original.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>把两张图片看成四张透明的图片，然后把中间两张透明的图片慢慢重叠在一起，这时会看到三张图片。</p><p>两边是半透明的，中间那张图是不透明的，中间的图片如下所示：<br><img src="/assets/2012/04/3d_find_result.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/3d_find_result.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>相同的地方是立体的，不同的地方会凹下去，所以很容易看出来。<br>如果左右移动眼睛的话，错误的地方会一闪闪的，更容易发现不同的地方。</p>]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 奇思妙想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教学 </tag>
            
            <tag> 三维图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>骰子魔术——超级心算术</title>
      <link href="/dice-magic-trick-super-heart-arithmetic.html"/>
      <url>/dice-magic-trick-super-heart-arithmetic.html</url>
      
        <content type="html"><![CDATA[<p>桌子上放着5个骰子，每个骰子各个面都写有不同的三位数，下面是它们的展开图：</p><p><img src="/assets/2012/04/dice_show.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/dice_show.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"><br> <br>观众把5个骰子同时掷出，魔术师能在数秒之内计算出5个骰子面上数字之和。</p><p>举个例子，掷出的5个骰子面上的数字分别是：<code>960，780，459，278，741</code>，<br>这时，魔术师可立即报出它们的和为<code>3218</code>。</p><blockquote><p>表演方法：答案<code>3218</code>的后两位<code>18</code>是5个骰子面上个位数字的和，而前两位数字<code>32</code>则是常数<code>50</code>与<code>18</code>的差。</p></blockquote><p>但是，为什么这5个骰子会有如此神奇的特性呢？</p><p>注意观察5个骰子的展开图，不难发现这些数字有一定的规律：对同一个骰子来说，每个面上的数的十位数都是相同的，而且每个面上的个位数与百位数之和相等。</p><p>观众掷出骰子后，得到骰子面上的5个数，如果把这几个三位数记为：</p><p>$ a_ib_ic_i(i = 1, 2, 3, 4, 5) $</p><p>则：</p><p>$ b_1 + b_2 + b_3 + b_4 + b_5 = 30  （十位数相同） $</p><p>$ (a_1 + c_1) + (a_2 + c_2) + (a_3 + c_3) + (a_4 + c_4) + (a_5 + c_5) = 47 （个位与百位之和相等） $</p><p>令：</p><p>$ A = a_1 + a_2 + a_3 + a_4 + a_5 $</p><p>$ C = c_1 + c_2 + c_3 + c_4 + c_5 $</p><p>得：</p><p>$ A = 47 - C $</p><p>所以5个数字之和为：</p><p>$ (47 - C) * 100 + 30 * 10 + C = (50 - C) * 100 + C $</p>]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 魔术学堂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教学 </tag>
            
            <tag> 魔术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你的思维僵化了吗</title>
      <link href="/do-you-rigid-the-thinking.html"/>
      <url>/do-you-rigid-the-thinking.html</url>
      
        <content type="html"><![CDATA[<p>如果你感叹自己“哎，老了老了，不行了”，一般发生在什么时候？请在3秒内回答（别想歪了）。</p><p>如果你想象力丰富的话，现在你的嘴上应该挂着笑容。<br>要是没有，那就要进来检测一下了。</p><p>本游戏具有检测思维硬化的功能，并附带活化思维的疗效。<br>无论是你给自己检测还是与亲朋好友分享，都不应错过这个好机会。</p><p>下边的图形展示了四个部分A、B、C和D：</p><p><img src="/assets/2012/04/thinking_0.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/thinking_0.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>A，B，C有¼的部分被涂成阴影（浅蓝色部分）。 </p><p>那么，请开始游戏：</p><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><details><summary>点击查看问题：</summary><p>将‘A’中无阴影的部分平分成相同且面积相等的两部分。</p><details><summary>点击查看答案：</summary><p><img src="/assets/2012/04/thinking_1.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/thinking_1.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"> </p></details></details><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><details><summary>点击查看问题：</summary><p>将‘B’中无阴影的部分平分成相同且面积相等的三部分。</p><details><summary>点击查看答案：</summary><p><img src="/assets/2012/04/thinking_2.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/thinking_2.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"> </p></details></details><h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><details><summary>点击查看问题：</summary><p>将‘C’中无阴影的部分平分成相同且面积相等的四部分。<br>提示：答案不是三角形，你应该自己解决。</p><details><summary>点击查看答案：</summary><p><img src="/assets/2012/04/thinking_3.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/thinking_3.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p></details></details><h3 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h3><details><summary>点击查看问题：</summary><p>将‘D’中无阴影的部分平分成相同且面积相等的七部分。<br>提示：答案不是三角形。</p><details><summary>解决了吗？</summary><details><summary>你还需要多长时间？</summary><details><summary>自己想，再点击，就枪毙你！</summary><details><summary>点击查看答案：</summary><details><summary>你这个混蛋，就是不动脑筋！</summary><p><img src="/assets/2012/04/thinking_4.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/thinking_4.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>最后一题很简单，但很多人都想不出。</p><p>人们常说，这就是僵化的思维，你有吗？</p></details></details></details></details></details></details><p>——转自<a href="http://www.psytopic.com/">psytopic</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 挑战智慧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智力题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12球难题的两种解法</title>
      <link href="/12-balls-problem-two-solutions.html"/>
      <url>/12-balls-problem-two-solutions.html</url>
      
        <content type="html"><![CDATA[<p>有12个外表完全一样的球，已知其中有一个球重量异于其他，但不知其较轻或较重。<br>用没有砝码的天秤称3次找出那个有问题的球，并且判断出那个球比其它球重，还是比其它球轻！</p><p>下面是这道难题的两种解法，建议大家在看它之前，自己先独立尝试一下。<br>假如你能独立解出这道题，那要大大赞赏你的智慧和才华！</p><details><summary>第一种解法：</summary><p>为了方便，我们用①②③④⑤……表示12个球，<code>&lt;</code>表示左边比较轻，<code>&gt;</code>表示左边比较重，<code>=</code>表示平衡。</p><p>我们把已经确定为正常的球涂上红色。</p><p><img src="/assets/2012/04/12balls_answer_1.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/12balls_answer_1.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>称第一次的时候，图中没有显示左边比较轻的情况，其实这是正确的，只要把第一次称的时候比较重的4个球标为①②③④就可以了。</p></details><details><summary>第二号秘诀：</summary><p>波兰著名数学家史泰因豪斯曾提出一个戏称为<code>第二号秘诀</code>的解12球问题的绝妙办法。</p><p>把12个球按以下的分组比较三次：</p><p>第1组：①②③④－⑤⑥⑦⑧（如<code>&lt;</code>）</p><p>第2组：③⑤⑦⑨－④⑥⑩⑪（如<code>&gt;</code>）</p><p>第3组：③⑥⑨⑫－①④⑦⑧（如<code>&lt;</code>）</p><p>然后用<code>＋</code>号表示较重盘上的球，用<code>－</code>号表示较轻盘上的球。<br>平衡时的球不做记号，并把他们标入下面的表中：</p><p><img src="/assets/2012/04/12balls_answer_2.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/12balls_answer_2.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>根据这张表，可以判断出哪个是异常的球，本例子中异常的球是⑦。</p><p>试问，史泰因豪斯判断异常球的秘诀是什么？  </p></details>]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 挑战智慧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智力题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轮流拿珍珠游戏</title>
      <link href="/click-the-pearl.html"/>
      <url>/click-the-pearl.html</url>
      
        <content type="html"><![CDATA[<h3 id="游戏规则"><a href="#游戏规则" class="headerlink" title="游戏规则"></a>游戏规则</h3><p>魔术师手掌里放着3行珍珠，观众和魔术师轮流拿走珍珠。<br>轮到你拿珍珠时，你可以在任意一行拿走任意数目的珍珠（只能拿走同一行的珍珠）。<br>拿走珍珠后，点击魔术师手指的<code>GO</code>完成动作。 </p><h3 id="游戏胜利的条件"><a href="#游戏胜利的条件" class="headerlink" title="游戏胜利的条件"></a>游戏胜利的条件</h3><p>谁能让魔术师手掌里剩下最后一颗珍珠，谁就胜利。<br>如果你想重新玩游戏，请点击魔术师手指的<code>NEW</code>文字。<br>当出现很多英文时，点击最后的<code>PLAY</code>按钮就可以玩了：</p><p><strong>这个游戏只有一种拿法能够胜利，你能找出来吗？</strong></p><blockquote><p>此文章年代久远，现代浏览器已不再支持flash。<br>如果想下载游戏到本地玩，可以<a href="/assets/2012/04/pearl.swf">点击这里下载</a>。</p></blockquote><br /><embed src="/assets/2012/04/pearl.swf" type="application/x-shockwave-flash" width="600" height="450" quality="high" />]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 挑战智慧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智力题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消失的精灵</title>
      <link href="/the-disappeared-elve.html"/>
      <url>/the-disappeared-elve.html</url>
      
        <content type="html"><![CDATA[<p>在西元1968年，加拿大的一位女设计师巴特·勃达逊以爱尔兰的民间故事中的一群造型很逗趣的精灵为主角，设计出了一个很有趣的问题：消失的精灵。</p><p>下面的图片中，画有15个精灵：<br><img src="/assets/2012/04/elve_1.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/elve_1.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>按虚线将图剪下分成3份，然后将图的上半部左右两部分对调，再数算图中有还有多少个精灵？<br><img src="/assets/2012/04/elve_2.jpg" class="lazyload placeholder" data-srcset="/assets/2012/04/elve_2.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>一样多吗？不会吧，竟然少了一只精灵呢！</p><p>同样的一张图，只是调动了一下位置，照理说，精灵不会减少，可是事实摆在眼前，真的少了一个精灵，你能找出是什么原因吗？</p>]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 挑战智慧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智力题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猜猜我的生日是哪天</title>
      <link href="/guess-which-day-is-my-birthday.html"/>
      <url>/guess-which-day-is-my-birthday.html</url>
      
        <content type="html"><![CDATA[<p>有一天，小东和小明问我生日是什么时候。</p><p>我把月份告诉了小东，把日子告诉了小明。</p><p>并在纸上写下11个日期，跟他们说我的生日是其中的1个：</p><table><thead><tr><th align="center"></th><th align="center">日期列表</th><th align="center"></th></tr></thead><tbody><tr><td align="center">1月17日</td><td align="center">1月19日</td><td align="center">1月27日</td></tr><tr><td align="center">5月12日</td><td align="center">5月27日</td><td align="center">5月29日</td></tr><tr><td align="center">8月11日</td><td align="center">8月19日</td><td align="center">8月29日</td></tr><tr><td align="center">12月12日</td><td align="center">12月27日</td><td align="center"></td></tr></tbody></table><p>小东看后说：“如果我不知道的话，小明也肯定不知道。”</p><p>小明说：“本来我是不知道，可是我现在知道了。”</p><p>小东说：“哦，那我也知道了！”</p><p>请根据以上对话推出我的生日！ </p><details><summary>点击查看答案：</summary><p>小东说：“如果我不知道的话，小明也肯定不知道。”因为17号在这11个日期中是唯一的，如果日子是17号的话，小明就可能知道了，因此可以排除1月，同理可以排除8月。</p><p>小明说：“本来我是不知道，可是我现在知道了。”因为5月和12月中只有29日是唯一的，所以答案就是5月29日。</p></details> ]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 挑战智慧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智力题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最神奇的魔术——巴格拉斯效果</title>
      <link href="/the-berglas-effect.html"/>
      <url>/the-berglas-effect.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、巴格拉斯效果介绍"><a href="#一、巴格拉斯效果介绍" class="headerlink" title="一、巴格拉斯效果介绍"></a>一、巴格拉斯效果介绍</h3><p>大卫·巴格拉斯于50年前表演了一个<code>any card at any number</code>的神奇魔术，由于其神秘的手法，50年来不为人破解，所以称其为<code>BERGLAS EFFECT</code>。</p><p>巴格拉斯效果是在50多年前表演的，当时造成轰动，但由于技术原因，无法保留原本表演效果，人们只能通过观看者的耳传面授来推测表演方式。</p><p>现在流行于网络的为两段视频，一个是中国魔术师刘谦的，另一个是在美国电视台录制的，两者都是仿照巴格拉斯效果而进行的表演。只是美国的那段最为接近原版效果，但仍不是原版。</p><h3 id="二、魔术表演视频"><a href="#二、魔术表演视频" class="headerlink" title="二、魔术表演视频"></a>二、魔术表演视频</h3><p>以下是刘谦在EMC魔术大会表演的巴格拉斯效果：<br><a href="https://v.youku.com/v_show/id_XMzY2MTk1NTM2.html">https://v.youku.com/v_show/id_XMzY2MTk1NTM2.html</a></p><p>以下是美国电视台录制的巴格拉斯效果：<br><a href="https://v.youku.com/v_show/id_XMzY2MjAxNzU2.html">https://v.youku.com/v_show/id_XMzY2MjAxNzU2.html</a></p><h3 id="三、巴格拉斯效果准则"><a href="#三、巴格拉斯效果准则" class="headerlink" title="三、巴格拉斯效果准则"></a>三、巴格拉斯效果准则</h3><blockquote><p>THE BERGLAS EFFECT</p><p>David  has been performing a unique version of “any card at any number” for almost 50 years.The effect has 4 very strict criteria that no other version of ACAAN seems to be bale to match：</p><p>1.The cards are on view before the effect starts</p><p>2.A spectator freely names any card.They are not a stooge and can freely choose any one of the 52 cards,no restrictions 3.Another spectator freely names any number between 1 and 52.They are not a stooge and have a free choice,no restriction.</p><p>4.A third spectator is invited to count down to the chosen number.The performer does not touch the cards.</p><p>“The berglas Effect” is NOT available through any magic dealer or internet magic shop.The method is exclusively David’s and may never be released.There are no longer enough mystery in magic.</p><p>Some things should just remain secret.THE BERGLAS EFFECT……</p></blockquote><h3 id="四、巴格拉斯效果准则翻译"><a href="#四、巴格拉斯效果准则翻译" class="headerlink" title="四、巴格拉斯效果准则翻译"></a>四、巴格拉斯效果准则翻译</h3><blockquote><p>巴格拉斯效果</p><p>大卫·巴格拉斯已经表演了这个“any card at any number”效果的独一无二的版本近50年了，任何其他版本的效果都无法与之相提并论，因为巴格拉斯效果有4个非常严格的标准：</p><p>1、在表演开始前扑克可以展示，没有重复的牌。</p><p>2、观众任意说一张牌。他们不是托，可以不受限制的从52张牌中任意说一张。</p><p>3、另一名观众任意说一个1到52之间的数字。他们也不是托，并且不受任何限制。</p><p>4、邀请第三名观众来数牌，数第二名观众说出来的数字。表演者在表演的过程中不接触牌。</p><p>任何魔术生产商或网上商店都不能以“The berglas Effect”为名进行销售。方法只属于David Berglas，可能永远不会公开，将成为魔术界永恒的秘密。</p><p>有些事情应该永远保持神秘。比如巴格拉斯效果……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 魔术学堂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吉普赛人祖传的神奇读心术</title>
      <link href="/gypsy-ancestral-magical-mind-reading.html"/>
      <url>/gypsy-ancestral-magical-mind-reading.html</url>
      
        <content type="html"><![CDATA[<p>吉普赛人祖传的神奇读心术，它能感应出你的内心所想的东西。</p><p>请你先在脑子里随便想一个<code>10</code>到<code>99</code>之间的两位数，再用这个两位数减去它十位的数字，再减去它个位的数字，再把所得的数记住。</p><p>例如你一开始想的数字是<code>95</code>，便记住 <code>95-9-5</code> 的结果。</p><p>然后在图表中找出与最后记住的数所相应的图形，并把这个图形牢记心中。</p><p>注意：图形每次刷新都会随机生成的，每一个图形都不一样。</p><p>再用鼠标点击水晶球，你会发现，水晶球所显示出来的图形就是你刚刚心里记下的那个图形。</p><p>水晶球会感应到你的内心！绝对令你毛骨悚然！！！</p><blockquote><p>此文章年代久远，现代浏览器已不再支持flash。<br>如果想下载游戏到本地玩，可以<a href="/assets/2012/03/mind_reading.swf">点击这里下载</a>。</p></blockquote><br /><embed src="/assets/2012/03/mind_reading.swf" type="application/x-shockwave-flash" width="620" height="450" quality="high" />]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 魔术学堂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>据说全世界只有不到4000人可以走出这个房间</title>
      <link href="/only-4000-people-can-go-out-of-the-room.html"/>
      <url>/only-4000-people-can-go-out-of-the-room.html</url>
      
        <content type="html"><![CDATA[<p>这是一个密室逃脱的flash游戏。</p><p>据说全世界只有不到4000人可以走出这个房间。</p><p>房间里面一共有13件物品，找齐后就可以离开房间。</p><ul><li>找到0-6件智商低下。</li><li>找到9-10件算是正常。</li><li>找到11-12智商很高，属于智力超群。</li><li>找到13件并且走出这个房间的全世界不到4000人。</li></ul><blockquote><p>此文章年代久远，现代浏览器已不再支持flash。<br>如果想下载游戏到本地玩，可以<a href="/assets/2012/03/room_puzzle.swf">点击这里下载</a>。</p></blockquote><br /><embed src="/assets/2012/03/room_puzzle.swf" type="application/x-shockwave-flash" width="620" height="450" quality="high" />]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 挑战智慧 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智力题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解百度MP3加密链接地址</title>
      <link href="/crack-baidu-mp3-link-encryption.html"/>
      <url>/crack-baidu-mp3-link-encryption.html</url>
      
        <content type="html"><![CDATA[<p>最近想给QQ空间添加几首背景音乐，所以上百度MP3找音乐链接地址，可是百度MP3现在把音乐链接地址给加密了，音乐链接地址带有“=”，QQ空间是不支持的。<br>查看了百度MP3的网页源码后，发现百度MP3用了比较简单的加密方法，所以要破解百度MP3加密链接是比较简单的。<br>下面就以后弦的《昆明湖》为例，演示一下破解百度MP3加密链接的方法。</p><p>1、打开<a href="http://mp3.baidu.com/">http://mp3.baidu.com</a>，搜索<code>&quot;昆明湖&quot;</code>：<br><img src="/assets/2012/03/baidupojie_song.png" class="lazyload placeholder" data-srcset="/assets/2012/03/baidupojie_song.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>2、点击“试听”按钮，会弹出一个播放窗口：<br><img src="/assets/2012/03/baidupojie_window.png" class="lazyload placeholder" data-srcset="/assets/2012/03/baidupojie_window.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>3、可以看到音乐链接为：<br><code>http://zhangmenshiting.baidu.com/data2/music/5075964/5075964.mp3?xcode=d9baf427f91cffb01d07286be822d843&amp;mid=0.04309666109953</code>，<br>而QQ空间是不支持带有<code>&quot;=&quot;</code>的音乐链接的。</p><p>4、在左上角的logo处点击右键——查看网页源代码，发现里面有一段js代码是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mU = <span class="string">&quot;p11x://7pivoumv0pq1qvo.jiql2.kwu/li1iA/u20qk/D8FDHEC/D8FDHEC.uxB?5kwlm=lHjinCAFnH9knnj89l8FAGEjmGAAlGCB&amp;uql=8.8CB8HEEE98HHDB&quot;</span>, sT = <span class="string">&quot;1331221874&quot;</span>, Tit = <span class="string">&quot;昆明湖 &quot;</span>, mt = <span class="string">&quot;&quot;</span>, sn = <span class="string">&quot;昆明湖&quot;</span>, an = <span class="string">&quot;后弦&quot;</span>, tp = <span class="built_in">document</span>.getElementById(<span class="string">&quot;tip2&quot;</span>), flashok = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>5、对比可发现两个链接的格式一致：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://zhangmenshiting.baidu.com/data2/music/5075964/5075964.mp3?xcode=d9baf427f91cffb01d07286be822d843&amp;mid=0.04309666109953</span><br><span class="line">p11x://7pivoumv0pq1qvo.jiql2.kwu/li1iA/u20qk/D8FDHEC/D8FDHEC.uxB?5kwlm=lHjinCAFnH9knnj89l8FAGEjmGAAlGCB&amp;uql=8.8CB8HEEE98HHDB</span><br></pre></td></tr></table></figure><p><code>&quot;http&quot;</code>对应于<code>&quot;p11x&quot;</code>，猜想是用了换字加密，<br>由于密文较多，可以列出如下一张对比表：</p><table><thead><tr><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">a</td><td align="center">b</td><td align="center">c</td><td align="center">d</td><td align="center">e</td><td align="center">f</td><td align="center">g</td><td align="center">h</td><td align="center">i</td><td align="center">j</td><td align="center">k</td><td align="center">l</td><td align="center">m</td><td align="center">n</td><td align="center">o</td><td align="center">p</td><td align="center">q</td><td align="center">r</td></tr><tr><td align="center">i</td><td align="center">j</td><td align="center">k</td><td align="center">l</td><td align="center">m</td><td align="center">n</td><td align="center">o</td><td align="center">p</td><td align="center">q</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">u</td><td align="center">v</td><td align="center">w</td><td align="center">x</td><td align="center"></td><td align="center"></td></tr></tbody></table><p>可见加密后的字母也是按顺序排列的，这就是著名的凯撒密码了。</p><blockquote><p>凯撒密码：将明文中的各个字符，按顺序进行n个字符错位转换的加密方法称为凯撒加密。  </p><p>凯撒：古罗马时期的军事家和政治家。高卢战争的时候，他发明了这个密码，这样可以在敌人无法知晓通信内容的情况下，与联军进行联络。</p></blockquote><p>把上面的密文对照表填满：</p><table><thead><tr><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center">s</td><td align="center">t</td><td align="center">u</td><td align="center">v</td><td align="center">w</td><td align="center">x</td><td align="center">y</td><td align="center">z</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">8</td><td align="center">9</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center"></td><td align="center"></td><td align="center">5</td><td align="center"></td><td align="center">7</td><td align="center">8</td><td align="center">9</td><td align="center">A</td><td align="center">B</td><td align="center">C</td><td align="center">D</td><td align="center">E</td><td align="center">F</td><td align="center">G</td><td align="center">H</td></tr></tbody></table><p>可见，这些字符串是把<code>小写字母+数字+大写字母</code>连接起来，然后右移8位构成了密文。</p><p>6、再看源代码，发现下面有一段js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p2spurl = [</span><br><span class="line">    <span class="string">&quot;p11x://7pivoumv0pq1qvo.jiql2.kwu/li1iA/u20qk/D8FDHEC/D8FDHEC.uxB?5kwlm=lHjinCAFnH9knnj89l8FAGEjmGAAlGCB&quot;</span>,</span><br><span class="line">    <span class="string">&quot;p11x://ui19.yy.kwu/u20qk1wx/uxB/DA9/s2vuqvop2.uxB?A&amp;i21wa1iz1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;p11x://A88H9B9AA9.xk.p01k.kv/u20qk/%K8%ID%KB%NF%JI%NM.uxB&quot;</span>,</span><br><span class="line">    <span class="string">&quot;p11x://AAB.C.GE.A8C/%mE%il%Gk%mE%Hj%jA/%mD%H8%Gm%mD%jk%iE/%mD%H8%Gm%mD%jk%iE%A8-%A8%mC%jH%Hl%mD%GD%ik%mC%jG%jj%A8-%A8%mE%HG%GE%mE%HG%Gm%mE%jH%HE.uxB&quot;</span>,</span><br><span class="line">    <span class="string">&quot;p11x://444.tmn10pw4.kv/4ivox2/FD8/9.uxB&quot;</span>,</span><br><span class="line">    <span class="string">&quot;p11x://01zmiu.p2u6w.kwu/a/98FFCHFB-AG9CFDEGBDA8FBH/1/9AGHD9B8FF.uxB?i=SbyAuPeoShY&quot;</span>,</span><br><span class="line">    <span class="string">&quot;p11x://29.i0.xl5.kv:G8G8/l9/AB/FC/AFFCB/lE/lHjHAmCBjFnnElD9ljk99El8iDGC9HGE.uxB&quot;</span>,</span><br><span class="line">    <span class="string">&quot;p11x://9AC.AAC.A9.EE/dqlmwB/0pq1qvo/yqvoyqivo/6qvxqv/988D.uxB&quot;</span>,</span><br><span class="line">    <span class="string">&quot;p11x://0xikm.pq1pw1.kv/u20qk_li1i/2x/DHH/E9F/89AC/A88G99B89DCEC9.uxB&quot;</span></span><br><span class="line">], </span><br></pre></td></tr></table></figure><p>这些音乐地址都是百度从其他网站抓取的，其中的<code>p11x://ui19.yy.kwu/u20qk1wx/uxB/DA9/s2vuqvop2.uxB</code>和<code>p11x://A88H9B9AA9.xk.p01k.kv/u20qk/%K8%ID%KB%NF%JI%NM.uxB</code>都没有<code>&quot;=&quot;</code>，可以作为QQ空间背景音乐链接。</p><p>7、知道了加密方法，解密就很简单了，可以写代码进行自动移位处理，但是打开别的歌曲链接时，发现不同的歌曲的移位值是不同的，所以还要让代码自动计算移位值。</p><p>编程思路：首先定义一个字符串列表，里面存放26个小写字母，10个数字，26个大写字母。<br>因为地址中每一位的移位值都是相同的，由于音乐原地址是以<code>&quot;http&quot;</code>开头的，可以通过判断加密后的地址的第一个字符和<code>&quot;h&quot;</code>的差值确定移位值。</p><p>8、下面是解密链接的Python代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">encrypt_url</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 字符串列表</span></span><br><span class="line">    words = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取移位值</span></span><br><span class="line">    n = <span class="built_in">ord</span>(encrypt_url[<span class="number">0</span>]) - <span class="built_in">ord</span>(<span class="string">&quot;h&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密链接</span></span><br><span class="line">    decrypt_url = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> encrypt_url:</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> words:</span><br><span class="line">            decrypt_url += x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            index = words.index(x) - n</span><br><span class="line">            decrypt_url += words[index]</span><br><span class="line">    <span class="keyword">return</span> decrypt_url</span><br><span class="line">    </span><br><span class="line">encrypt_url = <span class="string">&quot;p11x://ui19.yy.kwu/u20qk1wx/uxB/DA9/s2vuqvop2.uxB&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;加密的链接：%s&quot;</span>%(encrypt_url))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解密的链接：%s&quot;</span>%(decrypt(encrypt_url)))</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">加密的链接：p11x://ui19.yy.kwu/u20qk1wx/uxB/DA9/s2vuqvop2.uxB</span><br><span class="line">解密的链接：http://mat1.qq.com/musictop/mp3/521/kunminghu.mp3</span><br></pre></td></tr></table></figure><p>9、最后得到的未加密的链接为：<code>http://mat1.qq.com/musictop/mp3/521/kunminghu.mp3</code>，不愧是腾讯的服务器，下载速度果然很快，接下来就可以把它添加为QQ空间的背景音乐了。</p><div class="audio"><audio controls preload><source src='http://mat1.qq.com/musictop/mp3/521/kunminghu.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div>]]></content>
      
      
      <categories>
          
          <category> 学习园地 </category>
          
          <category> 逆向工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教学 </tag>
            
            <tag> HTML </tag>
            
            <tag> 逆向 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扑克排列法(Arranging of cards)</title>
      <link href="/arranging-of-cards.html"/>
      <url>/arranging-of-cards.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇文章是2008年除夕那天写的，也就是刘谦第一次上春晚那天，现在翻出来作为这个博客的第一篇文章，纪念一下那些年我们一起追随的那个纯净的魔界，不被世俗铜臭所沾污。  </p><p>扑克排列法，并不是魔术，而是表演某些魔术前所做的准备，也就是set牌。其实在魔术表演过程中，并不用把牌弄得这么复杂，写这篇文章纯属个人兴趣。但是有时可能会派上用场，比如遇到奥客时或者在摄像机前表演等……</p></blockquote><h3 id="一：顺序排列法"><a href="#一：顺序排列法" class="headerlink" title="一：顺序排列法"></a>一：顺序排列法</h3><p>这个是比较简单的排列法，主要利用递加，递减的方法来实现扑克牌数字的排列。<br>排列过程可以分为两部分：数字的排列和花色的排列。</p><h4 id="1、数字的排列"><a href="#1、数字的排列" class="headerlink" title="1、数字的排列"></a>1、数字的排列</h4><p>本文所用的例子是公差为6的递增数列，即：A,7,K,6,Q,5……</p><p>为什么要选择公差为6排列呢？原因有三：</p><p>①：这样看起来扑克牌比较乱。</p><p>②：比较容易计算下一张牌，如果你看到的是5，那么下一张就是5+6=11，也就是J。<br>由于数列中最大的数是13，而6处于13的中间，13-6=7，因此如果你看到的牌大于7，那你可以直接减7。<br>例如你看到9，那么下一张就是9-7=2了，你不用算9+6=15，15-13=2。<br>所以说：看到比7小的就加6，看到比7大的就减7，看到7下一张就是K。</p><p>③：我喜欢6这个数字。</p><h4 id="2、花色的排列"><a href="#2、花色的排列" class="headerlink" title="2、花色的排列"></a>2、花色的排列</h4><p>我们规定：黑桃为1，红桃为2，梅花为3，方块为4。<br>那么下一张牌的花色由前一张牌的数字加花色后除以4得到的余数得出（如果整除就是方块）。</p><p>例：第3张是黑桃K，黑桃为1，K为13，1+13=14，14÷4=3…2，2为红桃，并且13-7=6，所以下一张为红桃6。</p><p>从黑桃A开始，要一张一张地算出下一张牌是很痛苦的事，所以让电脑帮我排吧。</p><p>以下为VB代码：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Dim</span> a%, b%, m$, n$</span><br><span class="line">a = -<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">For</span> i = <span class="number">1</span> <span class="keyword">To</span> <span class="number">13</span></span><br><span class="line">    a = a + <span class="number">6</span></span><br><span class="line">    <span class="keyword">If</span> a &gt; <span class="number">13</span> <span class="keyword">Then</span> a = a - <span class="number">13</span></span><br><span class="line">    m = Choose(a, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;K&quot;</span>)</span><br><span class="line">    Print m &amp; <span class="string">&quot;  &quot;</span>;</span><br><span class="line"><span class="keyword">Next</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">Print:</span> Print <span class="string">&quot;黑 &quot;</span>;</span><br><span class="line">a = <span class="number">1</span>: b = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">For</span> i = <span class="number">2</span> <span class="keyword">To</span> <span class="number">52</span></span><br><span class="line">    b = (a + b) <span class="built_in">Mod</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">If</span> b = <span class="number">0</span> <span class="keyword">Then</span> b = <span class="number">4</span></span><br><span class="line">    n = Choose(b, <span class="string">&quot;黑&quot;</span>, <span class="string">&quot;红&quot;</span>, <span class="string">&quot;梅&quot;</span>, <span class="string">&quot;方&quot;</span>)</span><br><span class="line">    a = a + <span class="number">6</span></span><br><span class="line">    <span class="keyword">If</span> a &gt; <span class="number">13</span> <span class="keyword">Then</span> a = a - <span class="number">13</span></span><br><span class="line">    Print n &amp; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">If</span> i <span class="built_in">Mod</span> <span class="number">13</span> = <span class="number">0</span> <span class="keyword">Then</span> Print</span><br><span class="line"><span class="keyword">Next</span></span><br></pre></td></tr></table></figure><p>输出结果如下图（X为10的罗马字母）：</p><p><img src="/assets/2012/03/card_sort_order.png" class="lazyload placeholder" data-srcset="/assets/2012/03/card_sort_order.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="顺序排列法"></p><h4 id="3、扑克牌的排法"><a href="#3、扑克牌的排法" class="headerlink" title="3、扑克牌的排法"></a>3、扑克牌的排法</h4><p>这个就简单了，先把牌按数字分成13组，花色按上图排列，再按从左到右的顺序拿牌。</p><h4 id="4、优缺点"><a href="#4、优缺点" class="headerlink" title="4、优缺点"></a>4、优缺点</h4><p>优点：排列简单，推算简单，是追求速度型的首选。</p><p>缺点：不是很笨的人能很快发现数字排列的规律，对于追求完美的人来说，这个方法不适用。那么请看第二种排列方法吧。</p><h3 id="二：口诀排列法"><a href="#二：口诀排列法" class="headerlink" title="二：口诀排列法"></a>二：口诀排列法</h3><h4 id="1、数字的排列-1"><a href="#1、数字的排列-1" class="headerlink" title="1、数字的排列"></a>1、数字的排列</h4><p>看看效果(展示一下我的幽灵牌)，你能找出数字排列的规律吗？不可能吧。</p><p><img src="/assets/2012/03/card_sort_concept_show.jpg" class="lazyload placeholder" data-srcset="/assets/2012/03/card_sort_concept_show.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="口诀"></p><p>其实怎么看都是找不出规律的，因为它不是按顺序排列的，而是按特殊的方法排列的。</p><p>这个方法是从一本魔术书上看到的。</p><p>该口诀是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Eight Kings Threatend To Save Ninety-Five Queens For One Sick Knave.</span><br><span class="line">  8    K      3   10  2   7     9     5      Q    4   A    6    J</span><br></pre></td></tr></table></figure><p>也就是用谐音进行排列的，只需把这个英文句子背起来就行了。</p><p>如果前一张是J，那么下一张就是8。</p><p>花上几分钟，你就能倒背如流。</p><h4 id="2、花色的排列-1"><a href="#2、花色的排列-1" class="headerlink" title="2、花色的排列"></a>2、花色的排列</h4><p>花色排列方法同顺序排列法，下一张牌的花色由前一张牌的数字加花色后除以4的余数得出。</p><p>当然，这也是让电脑排列的，以下为VB代码：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Dim</span> a, n$</span><br><span class="line">Print <span class="string">&quot;8   K   3   X  2   7   9   5   Q   4   A   6   J&quot;</span></span><br><span class="line">a = Array(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">For</span> i = <span class="number">1</span> <span class="keyword">To</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">For</span> j = <span class="number">0</span> <span class="keyword">To</span> <span class="number">12</span></span><br><span class="line">        n = Choose(a(j), <span class="string">&quot;黑&quot;</span>, <span class="string">&quot;红&quot;</span>, <span class="string">&quot;梅&quot;</span>, <span class="string">&quot;方&quot;</span>)</span><br><span class="line">        Print n &amp; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">For</span> k = <span class="number">0</span> <span class="keyword">To</span> <span class="number">12</span></span><br><span class="line">        a(k) = a(k) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">If</span> a(k) = <span class="number">0</span> <span class="keyword">Then</span> a(k) = <span class="number">4</span></span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line">    </span><br><span class="line">    Print</span><br><span class="line"><span class="keyword">Next</span></span><br></pre></td></tr></table></figure><p>输出如下： <img src="/assets/2012/03/card_sort_concept.png" class="lazyload placeholder" data-srcset="/assets/2012/03/card_sort_concept.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="口诀排列法"></p><h4 id="3、扑克牌的排法-1"><a href="#3、扑克牌的排法-1" class="headerlink" title="3、扑克牌的排法"></a>3、扑克牌的排法</h4><p>这个也很简单，先把牌按数字分成13组，花色按上图排列，再按从左到右的顺序拿牌。</p><h4 id="4、优缺点-1"><a href="#4、优缺点-1" class="headerlink" title="4、优缺点"></a>4、优缺点</h4><p>优点：排列简单，别人不能发现数字排列的规律，是追求稳重型的首选。</p><p>缺点：推算速度较慢，但是扑克牌每隔13张就循环一次，经不起仔细的检查。</p><p>对于追求完美的人来说，这个方法也不适用。那么请看第三种排列方法吧。</p><h3 id="三：乱序排列法"><a href="#三：乱序排列法" class="headerlink" title="三：乱序排列法"></a>三：乱序排列法</h3><h4 id="1、数字的排列和花色的排列"><a href="#1、数字的排列和花色的排列" class="headerlink" title="1、数字的排列和花色的排列"></a>1、数字的排列和花色的排列</h4><p>这个排列方法把数字的排列和花色的排列放在一起了，因为要让整副牌看起来毫无规律，就不能用重复13张牌的方法，因此一个思路诞生了：下一张牌的数字和花色是由前一张牌的数字和花色决定的。</p><p>首先我想出了第一个方法：下一张牌的数字由（前一张牌的数字加上花色后）除以13的余数得出，花色由（本张的数字加上前一张花色后）除以4的余数得出，比较复杂，后面再解说。</p><p>以下为VB代码：</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Dim</span> a%, b%, m$, n$</span><br><span class="line">a = <span class="number">1</span>: b = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">For</span> i = <span class="number">1</span> <span class="keyword">To</span> <span class="number">52</span></span><br><span class="line">    n = Choose(b, <span class="string">&quot;黑&quot;</span>, <span class="string">&quot;红&quot;</span>, <span class="string">&quot;梅&quot;</span>, <span class="string">&quot;方&quot;</span>)</span><br><span class="line">    m = Choose(a, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;K&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    a = a + b</span><br><span class="line">    <span class="keyword">If</span> a &gt; <span class="number">13</span> <span class="keyword">Then</span> a = a - <span class="number">13</span></span><br><span class="line">    </span><br><span class="line">    b = (a + b) <span class="built_in">Mod</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">If</span> b = <span class="number">0</span> <span class="keyword">Then</span> b = <span class="number">4</span></span><br><span class="line">    </span><br><span class="line">    Print n &amp; m &amp; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">    <span class="keyword">If</span> i <span class="built_in">Mod</span> <span class="number">13</span> = <span class="number">0</span> <span class="keyword">Then</span> Print</span><br><span class="line"><span class="keyword">Next</span></span><br></pre></td></tr></table></figure><p>执行代码后得出了下面的结果：<br><img src="/assets/2012/03/card_sort_random_1.png" class="lazyload placeholder" data-srcset="/assets/2012/03/card_sort_random_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="乱序排列法1"></p><p>这样明显出了问题：第1张牌和第33张牌是一样的，都是黑桃A。<br>这说明了只有前面32张牌形成一个循环，而还有20张牌没参加循环。<br>怎么办？怎么办啊？方法错了吗？<br>一般人到了这里就另寻方法了，但是我今天为什么能在这里发表这篇教程，因为我心存一句名言：<code>Just have a little faith</code>。</p><p>在思考了1分钟零5秒后，我想：为什么它们没参加循环，因为它们自己可能构成一个循环。<br>我把前面32张牌找出来排列完后，在剩下的20张牌找出了最小的牌：黑桃2。</p><p>把上面的代码改一下，把<code>a = 1: b = 1</code>改为<code>a = 2: b =1</code>（即从黑桃2开始排列），执行代码后结果如下：<br><img src="/assets/2012/03/card_sort_random_2.png" class="lazyload placeholder" data-srcset="/assets/2012/03/card_sort_random_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="乱序排列法2"></p><p>这次有15张牌形成一个循环，还剩下5张牌。<br>那么剩下的红桃3，梅花5，梅花8，红桃J，梅花K，是不是也形成一个循环呢？老天保佑啊，一定要成功！  </p><p>把上面的代码中的<code>a = 2: b = 1</code>改为<code>a = 3: b = 2</code>（即从红桃3开始排列），执行代码后结果如下：<br><img src="/assets/2012/03/card_sort_random_3.png" class="lazyload placeholder" data-srcset="/assets/2012/03/card_sort_random_3.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="乱序排列法3"></p><p>剩下的5张牌果然形成了一个循环啊。 不会吧，这样就成功了？<br>成功其实很近，也很遥远。</p><p>把三个循环：①黑桃A～方块10 ②黑桃2～梅花Q ③红桃3～梅花K 合在一起，我们只需记住3个特殊情况：方块10后是黑桃2，梅花Q后是红桃3，梅花K后是黑桃A。</p><p>其它的牌都是按规律找的。例如方块树的下一张是什么牌呢？方块是4，树是4（没听过“方块树”这个词？去看看刘小谦的“顽皮的扑克”），那么4 + 4 = 8，下一张牌的数字是8；花色是8加上前一张的花色（8 + 4）再除以4得出的，结果整除，所以是方块8。</p><p>例如红桃9，红桃是2，2 + 9 = 11，所以下一张是J；（11 + 2）÷4 = 3…1，1是黑桃，所以红桃9的下一张是黑桃J。</p><p>例如方块J，方块是4，J是11，4 + 11 = 15，15 - 13 = 2，所以下一张数字是2；（2 + 4）÷4 = 1…2，2是红桃，下一张就是红桃2。</p><h4 id="2、扑克牌的排法"><a href="#2、扑克牌的排法" class="headerlink" title="2、扑克牌的排法"></a>2、扑克牌的排法</h4><p>排列比较复杂，得花点时间，按下图排列吧：<br><img src="/assets/2012/03/card_sort_random.png" class="lazyload placeholder" data-srcset="/assets/2012/03/card_sort_random.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="乱序排列法"></p><h4 id="3、优缺点"><a href="#3、优缺点" class="headerlink" title="3、优缺点"></a>3、优缺点</h4><p>优点：别人较难发现数字排列的规律，扑克牌可以交给观众检查。</p><p>缺点：排列很复杂，推算速度较慢。</p><h3 id="四：无敌排列法"><a href="#四：无敌排列法" class="headerlink" title="四：无敌排列法"></a>四：无敌排列法</h3><p>此方法绝对强悍，谁也不能找出其中的规律，规律只有你自己知道。</p><p>你只要把一副牌洗乱，再把它们记起来，用右脑的图像记忆法，加上谐音、联想和桩子，不难把一副扑克牌背起来。</p><p>如果你真的背了一副扑克牌，那你以后只用它就行了。</p><blockquote><p>构思和写这篇文章花了两天的时间，其中第三种方法占了1天的时间，在似错非错中挣扎，不断地在错误中寻找出路，但总算在2009春节前完成了。</p><p>还有其它的思路没写出来，大家有意见请提出来，虚心接受大家的意见。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 娱乐天地 </category>
          
          <category> 魔术学堂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教学 </tag>
            
            <tag> 魔术 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>破博客</title>
  
  <subtitle>文官洗碗安天下，武将打怪定乾坤。多么美好的年代，思之令人泪落。</subtitle>
  <link href="https://www.poboke.com/atom.xml" rel="self"/>
  
  <link href="https://www.poboke.com/"/>
  <updated>2021-10-23T16:33:34.739Z</updated>
  <id>https://www.poboke.com/</id>
  
  <author>
    <name>才怪</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用明文攻击破解加密的zip文件</title>
    <link href="https://www.poboke.com/crack-encrypted-zip-file-with-plaintext-attack.html"/>
    <id>https://www.poboke.com/crack-encrypted-zip-file-with-plaintext-attack.html</id>
    <published>2021-10-23T16:00:00.000Z</published>
    <updated>2021-10-23T16:33:34.739Z</updated>
    
    <content type="html"><![CDATA[<p><code>bkcrack</code>是一个<code>zip明文攻击</code>工具，<a href="https://github.com/kimci86/bkcrack">点击这里访问仓库地址</a>。</p><p>本教程翻译自<code>bkcrack</code>的示例教程，在翻译过程中，我对示例教程做了一些修改，并增加一些内容。</p><p>仓库的<code>example</code>目录里包含了一个示例文件<code>secrets.zip</code>，本教程将使用这个压缩包来演示<code>zip明文攻击</code>。</p><p>教程使用的环境是<code>MacOS</code>系统，如果你使用的是<code>Windows</code>系统，可以用<code>PowerShell</code>来执行命令。</p><h3 id="一、查看zip包的内容"><a href="#一、查看zip包的内容" class="headerlink" title="一、查看zip包的内容"></a>一、查看zip包的内容</h3><p>首先让我们康康压缩包里面有什么东西，使用终端进入<code>example</code>目录，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ zipinfo secrets.zip</span><br><span class="line"></span><br><span class="line">Archive:  secrets.zip</span><br><span class="line">Zip file size: 56263 bytes, number of entries: 2</span><br><span class="line">-rw-rw-r--  6.3 unx    54799 Bx defN 12-Aug-14 14:51 advice.jpg</span><br><span class="line">-rw-rw-r--  6.3 unx     1265 Bx stor 18-Dec-20 13:33 spiral.svg</span><br><span class="line">2 files, 56064 bytes uncompressed, 55953 bytes compressed:  0.2%</span><br></pre></td></tr></table></figure><p>可以看到，<code>secrets.zip</code>压缩里包含了两个文件：<code>advice.jpg</code>和<code>spiral.svg</code>。<br>第5列为<code>Bx</code>，开头的大写字母<code>B</code>代表文件被加密了，需要密码才能解压。<br>第6列的<code>defN</code>代表<code>advice.jpg</code>被压缩，<code>stor</code>代表<code>spiral.svg</code>未压缩。</p><blockquote><p><code>defN</code>是<code>deflated (normal)</code>的缩写，表示压缩方式是<code>deflated</code>，压缩类型是<code>normal</code>。<br><code>stor</code>是<code>none (stored)</code>的缩写，表示文件未压缩，只进行存储。</p></blockquote><h3 id="二、通过扩展名推测明文"><a href="#二、通过扩展名推测明文" class="headerlink" title="二、通过扩展名推测明文"></a>二、通过扩展名推测明文</h3><p>要进行破解的话，我们必须要知道至少12个字节的明文。通常知道的连续明文越多，破解的速度就越快。</p><p>我们可以从<code>spiral.svg</code>文件的扩展名推测出这是一个<code>xml</code>文件，那么文件的内容很可能以字符串<code>&lt;?xml version=&quot;1.0&quot; </code>开头。假如我们的猜想正确的话，这20个字节的明文已经绰绰有余了。</p><p>幸运的是，压缩包里的<code>spiral.svg</code>文件并未进行压缩，所以可以直接进行明文攻击。</p><p>让我们先把推测的明文保存到文件<code>plain.txt</code>中备用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> -n <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; &#x27;</span> &gt; plain.txt</span><br></pre></td></tr></table></figure><p>执行后<code>example</code>目录下会生成一个<code>plain.txt</code>文本，里面保存着我们推测的明文，加上<code>-n</code>参数是为了让文本末尾不产生换行符。</p><h3 id="三、开始明文攻击"><a href="#三、开始明文攻击" class="headerlink" title="三、开始明文攻击"></a>三、开始明文攻击</h3><p>准备工作就绪，现在可以进行明文攻击了。</p><h4 id="1、常规的明文攻击"><a href="#1、常规的明文攻击" class="headerlink" title="1、常规的明文攻击"></a>1、常规的明文攻击</h4><p>执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ../bkcrack -C secrets.zip -c spiral.svg -p plain.txt</span><br></pre></td></tr></table></figure><blockquote><p>命令的格式为：bkcrack -C 加密的压缩包 -c 存在明文的文件 -p 存储了明文的文本</p></blockquote><p>稍等一会就能得到3个密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">[11:20:10] Z reduction using 12 bytes of known plaintext</span><br><span class="line">100.0 % (12 / 12)</span><br><span class="line">[11:20:10] Attack on 581935 Z values at index 7</span><br><span class="line">Keys: c4490e28 b414a23d 91404b31</span><br><span class="line">30.4 % (176716 / 581935)</span><br><span class="line">[11:23:03] Keys</span><br><span class="line">c4490e28 b414a23d 91404b31</span><br></pre></td></tr></table></figure><p>通过开始时间和结束时间可以算出耗时为2分钟53秒。</p><h4 id="2、附加信息进行明文攻击"><a href="#2、附加信息进行明文攻击" class="headerlink" title="2、附加信息进行明文攻击"></a>2、附加信息进行明文攻击</h4><p>此外，根据<a href="https://pkware.cachefly.net/webdocs/APPNOTE/APPNOTE-6.3.9.TXT">《ZIP文件格式规范》</a>第<code>6.1.6</code>点中所述，压缩包在存储的文件数据之前添加了一个12字节的加密标头，加密标头的最后一个字节是文件<code>CRC</code>值的最高位字节。</p><p>可以通过以下命令来获取<code>spiral.svg</code>文件的<code>CRC</code>值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ zipinfo -v secrets.zip spiral.svg | grep CRC</span><br><span class="line">  32-bit CRC value (hex):                         a99f1d0d</span><br></pre></td></tr></table></figure><p>所以我们知道了文件内容的前一个字节（即偏移量-1处）是<code>0xA9</code>。</p><p>通过以下命令使用附加信息进行攻击：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ../bkcrack -C secrets.zip -c spiral.svg -p plain.txt -x -1 A9</span><br></pre></td></tr></table></figure><blockquote><p>附加信息的格式为：-x 偏移值 十六进制字节数据</p></blockquote><p>执行后同样可以得到3个密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">[11:30:41] Z reduction using 13 bytes of known plaintext</span><br><span class="line">100.0 % (13 / 13)</span><br><span class="line">[11:30:41] Attack on 542303 Z values at index 6</span><br><span class="line">Keys: c4490e28 b414a23d 91404b31</span><br><span class="line">33.9 % (183761 / 542303)</span><br><span class="line">[11:33:41] Keys</span><br><span class="line">c4490e28 b414a23d 91404b31</span><br></pre></td></tr></table></figure><p>可以算出耗时为3分钟，这里多了一个字节的明文，但是破解速度稍微慢了几秒。</p><p>前面说了知道的连续的明文越多，破解的速度就越快，是相对而言的。如果附加的明文有很多个字节的话，那么破解速度就能加快许多。</p><h3 id="四、恢复原始文件"><a href="#四、恢复原始文件" class="headerlink" title="四、恢复原始文件"></a>四、恢复原始文件</h3><p>一旦我们有了3个密钥，我们就可以从压缩包中恢复出原始文件。</p><h4 id="1、修改压缩包的密码"><a href="#1、修改压缩包的密码" class="headerlink" title="1、修改压缩包的密码"></a>1、修改压缩包的密码</h4><p>假设zip压缩包里的所有文件都使用了相同的密钥，那么我们可以使用新密码来将<code>secret.zip</code>存储为一个新的加密压缩包。</p><p>例如使用<code>easy</code>作为新密码，执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ../bkcrack -C secrets.zip -k c4490e28 b414a23d 91404b31 -U secrets_with_new_password.zip easy</span><br></pre></td></tr></table></figure><blockquote><p>命令格式为：bkcrack -C 加密的压缩包 -k 3个密钥 -U 新的压缩包 新密码</p></blockquote><p>执行后会得到一个<code>secrets_with_new_password.zip</code>压缩包，使用<code>easy</code>密码就可以解压出所有文件。</p><h4 id="2、直接提取文件"><a href="#2、直接提取文件" class="headerlink" title="2、直接提取文件"></a>2、直接提取文件</h4><p>我们也可以选择一一提取文件。</p><p>首先提取<code>spiral.svg</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ../bkcrack -C secrets.zip -c spiral.svg -k c4490e28 b414a23d 91404b31 -d spiral_deciphered.svg</span><br></pre></td></tr></table></figure><p>由于压缩包中的<code>spiral.svg</code>文件未压缩，因此执行后得到的<code>spiral_deciphered.svg</code>便是原文件。</p><p>再提取<code>advice.jpg</code>文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ../bkcrack -C secrets.zip -c advice.jpg -k c4490e28 b414a23d 91404b31 -d advice_deciphered.deflate</span><br></pre></td></tr></table></figure><p>因为<code>advice.jpg</code>是通过<code>deflate</code>算法压缩的，所以提取到的<code>advice_deciphered.deflate</code>也是压缩过的，我们需要解压它，为此，<code>tools</code>目录中提供了一个<code>Python</code>脚本，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 ../tools/inflate.py &lt; advice_deciphered.deflate &gt; very_good_advice.jpg</span><br></pre></td></tr></table></figure><p>执行后便可以得到解压的<code>very_good_advice.jpg</code>图片。</p><h3 id="五、通过压缩过的文件进行明文攻击"><a href="#五、通过压缩过的文件进行明文攻击" class="headerlink" title="五、通过压缩过的文件进行明文攻击"></a>五、通过压缩过的文件进行明文攻击</h3><p>假设zip压缩包里没有包含未压缩的文件<code>spiral.svg</code>，而全部文件都是压缩过的，那该怎么办呢？</p><p>我们可以通过<code>advice.jpg</code>文件的扩展名知道这是一张图片，由于图片的文件头前面一部分字节是固定的值，因此我们可以将这些字节作为明文来使用。</p><p>但问题是，这个文件被压缩过了，文件的内容已经发生了改变。想进行明文攻击的话，就必须要知道文件压缩后的内容变成了什么。但是如果不知道原来整个文件的内容，基本不可能推出文件压缩后的内容。</p><p>如果可以在网上轻松找到原始文件，例如压缩包里包含了某个<code>.dll</code>文件，在别的地方可以下载到，就可以拿来使用。然后，可以使用各种压缩软件和压缩级别对其进行压缩，以尝试生成正确的明文。</p><p>假如我们在网上下载到了<code>very_good_advice.jpg</code>图片，下面演示如何通过该图片来获取密钥。</p><h4 id="1、压缩图片文件"><a href="#1、压缩图片文件" class="headerlink" title="1、压缩图片文件"></a>1、压缩图片文件</h4><p>执行命令压缩图片：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ zip very_good_advice.jpg.zip very_good_advice.jpg</span><br></pre></td></tr></table></figure><p>执行后生成<code>very_good_advice.jpg.zip</code>压缩包，查看压缩包信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ zipinfo very_good_advice.jpg.zip</span><br><span class="line"></span><br><span class="line">Archive:  very_good_advice.jpg.zip</span><br><span class="line">Zip file size: 54873 bytes, number of entries: 1</span><br><span class="line">-rw-r--r--  3.0 unx    54799 bx defN 21-Oct-14 16:29 very_good_advice.jpg</span><br><span class="line">1 file, 54799 bytes uncompressed, 54683 bytes compressed:  0.2%</span><br></pre></td></tr></table></figure><p>可以看到该压缩包也是使用<code>deflate</code>算法压缩的。</p><h4 id="2、进行明文攻击"><a href="#2、进行明文攻击" class="headerlink" title="2、进行明文攻击"></a>2、进行明文攻击</h4><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ../bkcrack -C secrets.zip -c advice.jpg -P very_good_advice.jpg.zip -p very_good_advice.jpg</span><br><span class="line"></span><br><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">[11:40:46] Z reduction using 54675 bytes of known plaintext</span><br><span class="line">10.7 % (5855 / 54675)</span><br><span class="line">[11:40:48] Attack on 15 Z values at index 48886</span><br><span class="line">100.0 % (15 / 15)</span><br><span class="line">[11:40:48] Could not find the keys.</span><br></pre></td></tr></table></figure><blockquote><p>命令格式为：bkcrack -C 加密的压缩包 -c 加密的压缩文件 -P 未加密的压缩包 -p 未加密的压缩文件</p></blockquote><p>结果显示无法找到密钥，可能是因为压缩包的压缩率不同，导致压缩后的压缩包数据不同，因此使用这些错误的明文是无法破解的。</p><h4 id="3、寻找zip压缩率"><a href="#3、寻找zip压缩率" class="headerlink" title="3、寻找zip压缩率"></a>3、寻找zip压缩率</h4><p>zip压缩率有<code>0 ~ 9</code>一共10个级别，其中<code>0</code>代表未压缩存储，<code>1</code>代表压缩速度最快(文件最大)，<code>9</code>代表压缩速度最慢(文件最小)，默认的压缩级别是<code>6</code>。</p><p>编写一个<code>Python</code>脚本遍历10个级别进行破解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> level <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nLevel %d:&quot;</span>%(level))</span><br><span class="line">    <span class="comment"># 删除旧压缩包</span></span><br><span class="line">    os.system(<span class="string">&quot;rm very_good_advice.jpg.zip&quot;</span>)</span><br><span class="line">    <span class="comment"># 创建新压缩包</span></span><br><span class="line">    os.system(<span class="string">&quot;zip -%d very_good_advice.jpg.zip very_good_advice.jpg &gt; /dev/null&quot;</span>%(level))</span><br><span class="line">    <span class="comment"># 进行明文攻击</span></span><br><span class="line">    os.system(<span class="string">&quot;../bkcrack -C secrets.zip -c advice.jpg -P very_good_advice.jpg.zip -p very_good_advice.jpg&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Level 0:</span><br><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">Data error: ciphertext is smaller than plaintext.</span><br><span class="line"></span><br><span class="line">Level 1:</span><br><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">Data error: plaintext offset is too large.</span><br><span class="line"></span><br><span class="line">Level 2:</span><br><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">Data error: plaintext offset is too large.</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">Level 9:</span><br><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">[11:40:23] Z reduction using 54674 bytes of known plaintext</span><br><span class="line">13.4 % (7311 / 54674)</span><br><span class="line">[11:40:24] Attack on 24 Z values at index 47465</span><br><span class="line">100.0 % (24 / 24)</span><br><span class="line">[11:40:24] Could not find the keys.</span><br></pre></td></tr></table></figure><p>无法获取到密钥，说明<code>secrets.zip</code>这个压缩包应该不是使用<code>MacOS</code>系统的<code>zip</code>命令创建的。</p><h4 id="4、测试别的压缩软件"><a href="#4、测试别的压缩软件" class="headerlink" title="4、测试别的压缩软件"></a>4、测试别的压缩软件</h4><p>接下来使用<code>7z</code>来测试，<code>7z</code>有<code>1 ~ 9</code>一共9个压缩级别，执行以下<code>Python</code>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> level <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nLevel %d:&quot;</span>%(level))</span><br><span class="line">    <span class="comment"># 删除旧压缩包</span></span><br><span class="line">    os.system(<span class="string">&quot;rm very_good_advice.jpg.zip&quot;</span>)</span><br><span class="line">    <span class="comment"># 创建新压缩包</span></span><br><span class="line">    os.system(<span class="string">&quot;7z a -tzip -mx%d very_good_advice.jpg.zip very_good_advice.jpg &gt; /dev/null&quot;</span>%(level))</span><br><span class="line">    <span class="comment"># 进行明文攻击</span></span><br><span class="line">    os.system(<span class="string">&quot;../bkcrack -C secrets.zip -c advice.jpg -P very_good_advice.jpg.zip -p very_good_advice.jpg&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Level 1:</span><br><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">Data error: ciphertext is smaller than plaintext.</span><br><span class="line"></span><br><span class="line">Level 2:</span><br><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">Data error: ciphertext is smaller than plaintext.</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">Level 8:</span><br><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">Data error: plaintext offset is too large.</span><br><span class="line"></span><br><span class="line">Level 9:</span><br><span class="line">bkcrack 1.3.1 - 2021-08-16</span><br><span class="line">[11:50:49] Z reduction using 54680 bytes of known plaintext</span><br><span class="line">16.0 % (8732 / 54680)</span><br><span class="line">[11:50:50] Attack on 141 Z values at index 46518</span><br><span class="line">Keys: c4490e28 b414a23d 91404b31</span><br><span class="line">99.3 % (140 / 141)</span><br><span class="line">[11:50:51] Keys</span><br><span class="line">c4490e28 b414a23d 91404b31</span><br></pre></td></tr></table></figure><p>可见，使用压缩级别<code>9</code>可以成功获取到密钥。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;bkcrack&lt;/code&gt;是一个&lt;code&gt;zip明文攻击&lt;/code&gt;工具，&lt;a href=&quot;https://github.com/kimci86/bkcrack&quot;&gt;点击这里访问仓库地址&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;本教程翻译自&lt;code&gt;bkcrack&lt;/co</summary>
      
    
    
    
    <category term="学习园地" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/"/>
    
    <category term="逆向工程" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="教学" scheme="https://www.poboke.com/tags/%E6%95%99%E5%AD%A6/"/>
    
    <category term="逆向" scheme="https://www.poboke.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>关于我把博客从WordPress迁移到Hexo这件事</title>
    <link href="https://www.poboke.com/migrate-wordpres-to-hexo.html"/>
    <id>https://www.poboke.com/migrate-wordpres-to-hexo.html</id>
    <published>2021-08-15T13:58:37.000Z</published>
    <updated>2021-10-24T04:21:20.694Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、为什么要迁移博客"><a href="#一、为什么要迁移博客" class="headerlink" title="一、为什么要迁移博客"></a>一、为什么要迁移博客</h3><p>我本来以为我已经过了折腾博客的年纪了，没想到最近还是把博客从<code>WordPress</code>迁移到了<code>Hexo</code>，主要有以下几个原因：</p><h4 id="1、People-Die-But-Long-Live-GitHub"><a href="#1、People-Die-But-Long-Live-GitHub" class="headerlink" title="1、People Die, But Long Live GitHub"></a>1、People Die, But Long Live GitHub</h4><p>最近，我用了10多年的<code>PHP</code>主机商宣布停运了，突然感到有些失落，我已经经历过太多网站的关停了，包括在我博客留下足迹的众多个人博客，现在还能打开的博客寥寥无几。</p><p>我就在思考，如果我有一天去世了，我的空间到期后也会被关闭，域名到期也会被回收，所以我希望我的博客在我大限到来之后能够再运行久一点。</p><p>因此我打算将<code>WordPress</code>博客迁移到静态博客<code>Hexo</code>，因为静态博客可以托管在<code>GitHub Pages</code>里，如果<code>GitHub</code>不倒闭的话，我的博客也不会关闭。</p><p>人终有一死，但<code>GitHub</code>永存不朽。</p><p>如果正在看这篇文章的你所在的年份是<code>2121</code>年之后的话，说明100年后我的博客还存在，至少证明我现在的决定是正确的。</p><h4 id="2、使用Markdown写作"><a href="#2、使用Markdown写作" class="headerlink" title="2、使用Markdown写作"></a>2、使用<code>Markdown</code>写作</h4><p>我一直幻想<code>WordPress</code>的编辑器有一天能够支持<code>Markdown</code>，可惜每次更新后都没看到希望，而且编辑器也变得越来越非主流。</p><p>我使用了第三方的<code>Markdown</code>插件，但是插件有时会把<code>Markdown</code>格式的文章又转换成<code>html</code>编码，导致文章很难编辑。</p><p>而<code>Hexo</code>是为程序员而生的，只需用<code>Markdown</code>格式编写文章，<code>Hexo</code>框架会自动渲染，非常丝滑优雅。</p><h4 id="3、静态博客的评论系统"><a href="#3、静态博客的评论系统" class="headerlink" title="3、静态博客的评论系统"></a>3、静态博客的评论系统</h4><p>我很久以前就想使用静态博客了，但是考虑到静态博客无法进行评论，不能将<code>WordPress</code>的评论迁移过去，所以还是放弃了。</p><p>经过多年的发展，市面上已经涌现出很多优秀的开源评论系统，如<code>beaudar</code>, <code>valine</code>, <code>twikoo</code>, <code>waline</code>, <code>minivaline</code>, <code>disqus</code>, <code>disqusjs</code>, <code>gitalk</code>, <code>vssue</code>, <code>livere</code>, <code>isso</code>, <code>hashover</code>等。</p><p>经过对比，我选择了使用<code>waline</code>评论系统，官网为 <a href="https://waline.js.org/">https://waline.js.org</a> 。</p><h4 id="4、GitHub的访问速度"><a href="#4、GitHub的访问速度" class="headerlink" title="4、GitHub的访问速度"></a>4、GitHub的访问速度</h4><p>众所周知，国内访问<code>GitHub Pages</code>的速度非常慢，有时甚至无法访问。</p><p>不过目前已经有别的网站托管服务商可以使用，比如优秀的<code>Vercel</code>，可以看这篇介绍文章：<br><a href="https://zhuanlan.zhihu.com/p/347990778">《Vercel是什么神仙网站？》</a></p><p>主站可以使用<code>Vercel</code>部署，而<code>GitHub Pages</code>用来作为博客的备份。</p><h3 id="二、博客迁移过程踩的坑"><a href="#二、博客迁移过程踩的坑" class="headerlink" title="二、博客迁移过程踩的坑"></a>二、博客迁移过程踩的坑</h3><p>博客迁移过程主要参考了这篇文章：<a href="https://www.hrwhisper.me/wordpress-to-hexo/">《WordPress迁移到Hexo填坑记录》</a> 。  </p><p>该文章将博客的评论迁移到<code>valine</code>评论系统，我使用的是<code>waline</code>，因为<code>waline</code>是基于<code>valine</code>开发的，所以迁移的过程大致相同。</p><h4 id="1、博客文章的迁移"><a href="#1、博客文章的迁移" class="headerlink" title="1、博客文章的迁移"></a>1、博客文章的迁移</h4><p>登录<code>WordPress</code>后台，点击<kbd>工具</kbd> - <kbd>导出</kbd> - <kbd>下载导出的文件</kbd>，可以得到<code>WordPress.2021-08-15.xml</code>文件，存放到<code>hexo/source/</code>目录下。</p><p>使用命令安装文章转换工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-migrator-wordpress --save</span><br></pre></td></tr></table></figure><p>使用以下命令将<code>WordPress</code>文章转成<code>Hexo</code>的文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo migrate wordpress WordPress.2021-08-15.xml --paragraph-fix --import-image --skipduplicate</span><br></pre></td></tr></table></figure><p>转换后文章保存在<code>hexo/source/_posts</code>目录下，由于我之前有一半文章是使用富文本编辑器写的，所以转换后<code>Markdown</code>格式有点问题，因此我手动把所有文章都修整了一遍。</p><h4 id="2、文章链接的修改"><a href="#2、文章链接的修改" class="headerlink" title="2、文章链接的修改"></a>2、文章链接的修改</h4><p>我的<code>WordPress</code>文章的固定链接以前一直使用<code>/%category%/%postname%.html</code>，感觉还是一开始考虑得不够周到，导致现在出现了一点麻烦。</p><p>当初使用<code>WordPress</code>建站的时候，我觉得文章链接加上分类目录的话会更加清晰，能够方便分类。但是我大部分文章都会存放在多个分类里，而分类目录是<code>WordPress</code>随机添加的。</p><p>而<code>Hexo</code>的博客系统使用目录分类比较麻烦，考虑再三，长痛不如短痛，将<code>Hexo</code>的链接去掉了分类目录，只保留了文章名。</p><p>这样会导致旧的链接跳进来后找不到文章，所以我先在<code>WordPress</code>做了<code>301</code>重定向，等搜索引擎更新链接后，再开放<code>Hexo</code>博客。</p><h4 id="3、评论的迁移"><a href="#3、评论的迁移" class="headerlink" title="3、评论的迁移"></a>3、评论的迁移</h4><p>我的<code>WordPress</code>里有<code>1400</code>多条评论，这些评论必须要保留下来。</p><p>新的评论系统使用了<code>waline</code>+<code>MySQL</code>部署，所以迁移过程和上面的文章教程类似，用脚本将评论导入到<code>MySQL</code>数据库即可。</p><p>但是我发现了那篇教程的脚本代码有<code>bug</code>：有些评论的父级id赋值有误，会导致有些评论加载不出来。</p><p>比如A发表了一条评论，B评论了A，这时B的<code>pid</code>和<code>rid</code>都是A。<br>如果C又评论了B，那么C的<code>pid</code>是B，但是<code>rid</code>是A。<br><code>rid</code>是评论的根id，如果设置错误的话，C的评论就无法显示出来。</p><p>这个<code>bug</code>我已经修复了，文章后面会贴出代码。</p><h4 id="4、文章浏览数的迁移"><a href="#4、文章浏览数的迁移" class="headerlink" title="4、文章浏览数的迁移"></a>4、文章浏览数的迁移</h4><p>文章的浏览数也是必须保留的，所幸的是，<code>waline</code>也自带了统计文章浏览数的功能。</p><p>和评论的迁移一样，也是将浏览数批量保存到<code>MySQL</code>数据库。</p><h4 id="5、数据库迁移代码"><a href="#5、数据库迁移代码" class="headerlink" title="5、数据库迁移代码"></a>5、数据库迁移代码</h4><p>我使用了<code>macOS</code>的<code>MAMP</code>集成环境运行<code>MySQL</code>，再使用<code>Python</code>执行脚本，参考代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timezone, timedelta</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WPComment</span>:</span></span><br><span class="line">    post_id: <span class="built_in">int</span></span><br><span class="line">    post_name: <span class="built_in">str</span></span><br><span class="line">    post_type: <span class="built_in">str</span></span><br><span class="line">    comment_ID: <span class="built_in">int</span></span><br><span class="line">    comment_author: <span class="built_in">str</span></span><br><span class="line">    comment_author_email: <span class="built_in">str</span></span><br><span class="line">    comment_author_url: <span class="built_in">str</span></span><br><span class="line">    comment_author_IP: <span class="built_in">str</span></span><br><span class="line">    comment_date: <span class="built_in">str</span></span><br><span class="line">    comment_content: <span class="built_in">str</span></span><br><span class="line">    comment_agent: <span class="built_in">str</span></span><br><span class="line">    comment_parent: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WPCounter</span>:</span></span><br><span class="line">    post_id: <span class="built_in">int</span></span><br><span class="line">    post_name: <span class="built_in">str</span></span><br><span class="line">    post_type: <span class="built_in">str</span></span><br><span class="line">    post_views: <span class="built_in">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#要替换的链接</span></span><br><span class="line">replace_post_name = &#123;</span><br><span class="line">    <span class="string">&#x27;the-chatty-jokers&#x27;</span> : <span class="string">&#x27;math-and-magic-the-chatty-jokers&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;dicing-with-destiny&#x27;</span> : <span class="string">&#x27;math-and-magic-dicing-with-destiny&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WPDatabase</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.db = pymysql.connect(</span><br><span class="line">            host=<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">            user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">            password=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            database=<span class="string">&#x27;wordpress&#x27;</span>,</span><br><span class="line">            <span class="comment"># MaxOS使用MAMP时需要加上unix_socket</span></span><br><span class="line">            <span class="comment"># unix_socket=&#x27;/Applications/MAMP/tmp/mysql/mysql.sock&#x27;,</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取评论</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_comments</span>(<span class="params">self</span>):</span></span><br><span class="line">        sql_comment = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            SELECT </span></span><br><span class="line"><span class="string">                p.ID,</span></span><br><span class="line"><span class="string">                p.post_name,</span></span><br><span class="line"><span class="string">                p.post_type,</span></span><br><span class="line"><span class="string">                c.comment_ID,</span></span><br><span class="line"><span class="string">                c.comment_author,</span></span><br><span class="line"><span class="string">                c.comment_author_email,</span></span><br><span class="line"><span class="string">                c.comment_author_url,</span></span><br><span class="line"><span class="string">                c.comment_author_IP,</span></span><br><span class="line"><span class="string">                c.comment_date,</span></span><br><span class="line"><span class="string">                c.comment_content,</span></span><br><span class="line"><span class="string">                c.comment_agent,</span></span><br><span class="line"><span class="string">                c.comment_parent</span></span><br><span class="line"><span class="string">            FROM </span></span><br><span class="line"><span class="string">                `wp_comments` AS c,</span></span><br><span class="line"><span class="string">                `wp_posts` AS p </span></span><br><span class="line"><span class="string">            WHERE </span></span><br><span class="line"><span class="string">                c.comment_post_ID = p.ID AND</span></span><br><span class="line"><span class="string">                c.comment_approved != &quot;spam&quot;</span></span><br><span class="line"><span class="string">            ORDER BY</span></span><br><span class="line"><span class="string">                c.comment_ID ASC;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        cursor = self.db.cursor()</span><br><span class="line">        cursor.execute(sql_comment)</span><br><span class="line">        results = cursor.fetchall()</span><br><span class="line"></span><br><span class="line">        comments = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">            wp_comment = WPComment(*row)</span><br><span class="line">            wp_comment.comment_content = wp_comment.comment_content.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\\&#x27;&quot;</span>)</span><br><span class="line">            wp_comment.comment_author = wp_comment.comment_author.replace(<span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;\\&#x27;&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> wp_comment.post_name <span class="keyword">in</span> replace_post_name:</span><br><span class="line">                wp_comment.post_name = replace_post_name[wp_comment.post_name]</span><br><span class="line">            comments.append(wp_comment)</span><br><span class="line">        <span class="keyword">return</span> comments</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取文章浏览量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_counters</span>(<span class="params">self</span>):</span></span><br><span class="line">        sql_counter = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            SELECT </span></span><br><span class="line"><span class="string">                p.ID,</span></span><br><span class="line"><span class="string">                p.post_name,</span></span><br><span class="line"><span class="string">                p.post_type,</span></span><br><span class="line"><span class="string">                c.meta_value </span></span><br><span class="line"><span class="string">            FROM </span></span><br><span class="line"><span class="string">                `wp_postmeta` AS c,</span></span><br><span class="line"><span class="string">                `wp_posts` AS p </span></span><br><span class="line"><span class="string">            WHERE </span></span><br><span class="line"><span class="string">                c.meta_key = &quot;post_views_count&quot; AND </span></span><br><span class="line"><span class="string">                p.post_status = &quot;publish&quot; AND </span></span><br><span class="line"><span class="string">                c.post_id = p.ID </span></span><br><span class="line"><span class="string">            ORDER BY </span></span><br><span class="line"><span class="string">                c.post_id ASC;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        cursor = self.db.cursor()</span><br><span class="line">        cursor.execute(sql_counter)</span><br><span class="line">        results = cursor.fetchall()</span><br><span class="line"></span><br><span class="line">        counters = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">            wp_counter = WPCounter(*row)</span><br><span class="line">            <span class="keyword">if</span> wp_counter.post_name <span class="keyword">in</span> replace_post_name:</span><br><span class="line">                wp_counter.post_name = replace_post_name[wp_counter.post_name]</span><br><span class="line">            wp_counter.post_views = <span class="built_in">int</span>(wp_counter.post_views)</span><br><span class="line">            counters.append(wp_counter)</span><br><span class="line">        <span class="keyword">return</span> counters</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WalineDatabase</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.db = pymysql.connect(</span><br><span class="line">            host=<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">            user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">            password=<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            database=<span class="string">&#x27;waline&#x27;</span>,</span><br><span class="line">            <span class="comment"># MaxOS使用MAMP时需要加上unix_socket</span></span><br><span class="line">            <span class="comment"># unix_socket=&#x27;/Applications/MAMP/tmp/mysql/mysql.sock&#x27;,</span></span><br><span class="line">        )</span><br><span class="line">        self.wp_to_waline_id = &#123;&#125;</span><br><span class="line">        self.wp_reply_id = &#123;&#125;</span><br><span class="line">        self.wp_reply_nickname = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归查找评论的根id</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_root_id</span>(<span class="params">self, child_id</span>):</span></span><br><span class="line">        parent_id = self.wp_reply_id[child_id]</span><br><span class="line">        <span class="keyword">if</span> parent_id == child_id:</span><br><span class="line">            <span class="keyword">return</span> parent_id</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.find_root_id(parent_id)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加评论</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_comments</span>(<span class="params">self, wp_comments</span>):</span></span><br><span class="line">        cursor = self.db.cursor()</span><br><span class="line">        <span class="keyword">for</span> wp_comment <span class="keyword">in</span> wp_comments:</span><br><span class="line">            pid = <span class="string">&#x27;NULL&#x27;</span></span><br><span class="line">            rid = <span class="string">&#x27;NULL&#x27;</span></span><br><span class="line">            comment = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> wp_comment.comment_parent == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 新评论</span></span><br><span class="line">                comment = <span class="string">&#x27;&lt;p&gt;%s&lt;/p&gt;\n&#x27;</span>%(wp_comment.comment_content)</span><br><span class="line">                self.wp_reply_id[wp_comment.comment_ID] = wp_comment.comment_ID</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 回复别人的评论</span></span><br><span class="line">                pid = self.wp_to_waline_id[wp_comment.comment_parent]</span><br><span class="line">                rid = self.wp_to_waline_id[self.find_root_id(wp_comment.comment_parent)]</span><br><span class="line">                reply_name = self.wp_reply_nickname[wp_comment.comment_parent]</span><br><span class="line">                comment = <span class="string">&#x27;&lt;p&gt;&lt;a class=&quot;at&quot; href=&quot;#%s&quot;&gt;@%s&lt;/a&gt; , %s&lt;/p&gt;\n&#x27;</span>%(pid, reply_name, wp_comment.comment_content)</span><br><span class="line">                self.wp_reply_id[wp_comment.comment_ID] = wp_comment.comment_parent</span><br><span class="line"></span><br><span class="line">            url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> wp_comment.post_type == <span class="string">&#x27;page&#x27;</span>:</span><br><span class="line">                url = <span class="string">&#x27;/%s/&#x27;</span>%(wp_comment.post_name)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                url = <span class="string">&#x27;/%s.html&#x27;</span>%(wp_comment.post_name)</span><br><span class="line"></span><br><span class="line">            sql_comment = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                INSERT INTO `wl_Comment` (`comment`, `insertedAt`, `ip`, `link`, `mail`, `nick`, `pid`, `rid`, `status`, `ua`, `url`)</span></span><br><span class="line"><span class="string">                VALUES (&#x27;<span class="subst">&#123;comment&#125;</span>&#x27;, &#x27;<span class="subst">&#123;wp_comment.comment_date&#125;</span>&#x27;, &#x27;<span class="subst">&#123;wp_comment.comment_author_IP&#125;</span>&#x27;, &#x27;<span class="subst">&#123;wp_comment.comment_author_url&#125;</span>&#x27;, &#x27;<span class="subst">&#123;wp_comment.comment_author_email&#125;</span>&#x27;, &#x27;<span class="subst">&#123;wp_comment.comment_author&#125;</span>&#x27;, <span class="subst">&#123;pid&#125;</span>, <span class="subst">&#123;rid&#125;</span>, &#x27;approved&#x27;, &#x27;<span class="subst">&#123;wp_comment.comment_agent&#125;</span>&#x27;, &#x27;<span class="subst">&#123;url&#125;</span>&#x27;);</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">            cursor.execute(sql_comment)</span><br><span class="line">            self.db.commit()</span><br><span class="line"></span><br><span class="line">            self.wp_to_waline_id[wp_comment.comment_ID] = cursor.lastrowid</span><br><span class="line">            self.wp_reply_nickname[wp_comment.comment_ID] = wp_comment.comment_author</span><br><span class="line">            <span class="built_in">print</span>(wp_comment.comment_date, wp_comment.comment_author)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加文章浏览量</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_counters</span>(<span class="params">self, wp_counters</span>):</span></span><br><span class="line">        cursor = self.db.cursor()</span><br><span class="line">        <span class="keyword">for</span> wp_counter <span class="keyword">in</span> wp_counters:</span><br><span class="line">            <span class="keyword">if</span> wp_counter.post_views == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            url = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> wp_counter.post_type == <span class="string">&#x27;page&#x27;</span>:</span><br><span class="line">                url = <span class="string">&#x27;/%s/&#x27;</span>%(wp_counter.post_name)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                url = <span class="string">&#x27;/%s.html&#x27;</span>%(wp_counter.post_name)</span><br><span class="line"></span><br><span class="line">            sql_comment = <span class="string">f&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                INSERT INTO `wl_Counter` (`time`, `url`)</span></span><br><span class="line"><span class="string">                VALUES (<span class="subst">&#123;wp_counter.post_views&#125;</span>, &#x27;<span class="subst">&#123;url&#125;</span>&#x27;);</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">            cursor.execute(sql_comment)</span><br><span class="line">            self.db.commit()</span><br><span class="line">            <span class="built_in">print</span>(wp_counter.post_id, wp_counter.post_views)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    wp_database = WPDatabase()</span><br><span class="line">    waline_database = WalineDatabase()</span><br><span class="line"></span><br><span class="line">    wp_comments = wp_database.get_comments()</span><br><span class="line">    waline_database.add_comments(wp_comments)</span><br><span class="line"></span><br><span class="line">    wp_counters = wp_database.get_counters()</span><br><span class="line">    waline_database.add_counters(wp_counters)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、为什么要迁移博客&quot;&gt;&lt;a href=&quot;#一、为什么要迁移博客&quot; class=&quot;headerlink&quot; title=&quot;一、为什么要迁移博客&quot;&gt;&lt;/a&gt;一、为什么要迁移博客&lt;/h3&gt;&lt;p&gt;我本来以为我已经过了折腾博客的年纪了，没想到最近还是把博客从&lt;code&gt;Wo</summary>
      
    
    
    
    <category term="其它分类" scheme="https://www.poboke.com/categories/%E5%85%B6%E5%AE%83%E5%88%86%E7%B1%BB/"/>
    
    <category term="博客折腾" scheme="https://www.poboke.com/categories/%E5%85%B6%E5%AE%83%E5%88%86%E7%B1%BB/%E5%8D%9A%E5%AE%A2%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="WordPress" scheme="https://www.poboke.com/tags/WordPress/"/>
    
    <category term="Hexo" scheme="https://www.poboke.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用iOS快捷指令实现自动领喵币教程</title>
    <link href="https://www.poboke.com/use-ios-shortcuts-to-make-quick-macro.html"/>
    <id>https://www.poboke.com/use-ios-shortcuts-to-make-quick-macro.html</id>
    <published>2020-11-08T08:32:52.000Z</published>
    <updated>2021-09-11T06:34:37.888Z</updated>
    
    <content type="html"><![CDATA[<p>2020年的淘宝双11活动又到来了，今年的主题是超级星秀猫，通过喂喵币让小猫升级为不同的明星。</p><p>跟去年一样，浏览店铺满15秒可以获得大量的喵币，每天可以重复做几十次，但是这个过程有点无聊。</p><p>程序员最讨厌的就是做重复的事了，如果有一件事要重复做两次以上，程序员就往往会考虑编写代码来自动完成这些事。</p><p>如果在越狱的iOS或者安卓系统上，可以使用<code>按键精灵</code>软件来自动领取喵币，不过能否在没越狱的iOS手机上做到呢？</p><p><code>iOS 13</code>系统自带的<code>快捷指令</code>应用能够执行自动化操作，或许能够创建一个类似于<code>按键精灵</code>的流程来自动领取喵币，于是我研究了一下，最终成功实现了自动化的流程：</p><video width="296" height="640" controls="controls" loop="loop"><source id="mp4" src="/assets/2020/11/macro_demo_video.mp4" type="video/mp4"></video><blockquote><p>注意：该流程在<code>iOS 14</code>的<code>iPhone 11</code>上完美运行，在<code>iOS 13.3</code>的<code>iPhone SE</code>上偶尔会中断，具体原因不明，其它机型和系统没有进行测试。</p></blockquote><p>整个研究的过程并不是很顺利，解决了很多个大坑才得以完成，下面就来介绍一下我使用的方法。</p><hr><h3 id="一、自动点击手机屏幕"><a href="#一、自动点击手机屏幕" class="headerlink" title="一、自动点击手机屏幕"></a>一、自动点击手机屏幕</h3><p><code>按键精灵</code>最重要的功能是能够自动点击屏幕，遗憾的是<code>快捷指令</code>应用里并没有提供自动点击屏幕的功能，不过<code>iOS 13</code>系统自带的<code>语音控制</code>功能就能够做到这一点。</p><p>我在不久之前看过一个视频教程：<a href="https://www.bilibili.com/video/BV1tE411M7Qh/">《iOS 13自带王者荣耀一键换键功能，相当于辅助外挂》</a>，这个视频介绍了在<code>语音控制</code>里添加点击手势的操作步骤，建议先观看视频学习。</p><p>正常来说，我们要对<code>手机淘宝</code>添加的点击手势是：在游戏界面点击<kbd>去浏览</kbd>按钮进入店铺界面，等待读条15秒任务完成后，再点击店铺右上角的<kbd>关闭</kbd>按钮退出店铺界面。</p><p><img src="/assets/2020/11/macro_process_1.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_process_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><blockquote><p>注意：语音控制的手势最多只能录制5个操作，最长只能录制10秒。</p></blockquote><p>但是由于<code>语音控制</code>的手势最多只能录制10秒，而读条等待的时间却超过了15秒，所以不能在一个手势里录制这些操作。那么我们不妨换个思路，先在店铺界面等待读条完成，再开始使用<code>语音控制</code>执行点击手势。</p><p>修改后的手势操作为：点击右上角的<kbd>关闭</kbd>按钮返回到游戏界面，等待两秒后再点击<kbd>去浏览</kbd>按钮进入下一个店铺界面，这样只需花费不到5秒的时间便可以完成操作。</p><p><img src="/assets/2020/11/macro_process_2.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_process_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>以下是在<code>手机淘宝</code>里创建点击手势的操作步骤：</p><p>1、打开手机的<kbd>设置</kbd> - <kbd>辅助功能</kbd> - <kbd>语音控制</kbd>，开启<code>语音控制</code>功能。</p><p><img src="/assets/2020/11/macro_voice_control_1.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_voice_control_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><blockquote><p>注意：如果是第一次开启<code>语音控制</code>功能，需要连接上WiFi，因为系统要下载几百M的语音数据包，不连接WiFi的话会导致开启失败。开启成功后，状态栏会出现一个蓝色的麦克风图标。</p></blockquote><p>2、开启<code>语音控制</code>后，进入<kbd>自定命令</kbd> - <kbd>自定</kbd> - <kbd>创建新命令</kbd>，输入命令短语。</p><p><img src="/assets/2020/11/macro_voice_control_2.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_voice_control_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><blockquote><p>注意：短语只能使用英文，但是使用单音节的词容易误识别，于是我使用了<code>evening</code>这个命令短语。</p></blockquote><p>3、点击<kbd>操作</kbd> - <kbd>运行自定手势</kbd>，由于要点击的区域被导航栏挡到了，所以要点击<kbd>隐藏控制项</kbd>按钮进入全屏状态。</p><p><img src="/assets/2020/11/macro_voice_control_3.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_voice_control_3.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>4、先点击点击右上角<kbd>关闭</kbd>按钮的位置❶，等待两秒后点击<kbd>去浏览</kbd>按钮的位置❷，并保存录制结果。</p><p><img src="/assets/2020/11/macro_voice_control_4.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_voice_control_4.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>5、现在可以进入手机淘宝的店铺界面测试一下，对着手机的麦克风说出<code>evening</code>，系统就会自动执行点击操作。</p><hr><h3 id="二、自动执行语音控制"><a href="#二、自动执行语音控制" class="headerlink" title="二、自动执行语音控制"></a>二、自动执行语音控制</h3><p>前面介绍了用人类的声音控制手机执行点击操作的方法，但是这样的“人工智能”并不是我们想要的，如果能够让手机自动执行<code>语音控制</code>就再好不过了。</p><p>好在<code>快捷指令</code>应用里有<code>朗读文本</code>的功能，能够让手机朗读出<code>evening</code>，从而自动执行<code>语音控制</code>。</p><p>接下来打开<code>快捷指令</code>应用，新建一个自动化流程：</p><p>1、在<code>自动化</code>界面点击<kbd>创建个人自动化</kbd>按钮。</p><p><img src="/assets/2020/11/macro_shortcuts_taobao_1.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_taobao_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>2、自动化的触发条件选择<kbd>打开App</kbd>。</p><p><img src="/assets/2020/11/macro_shortcuts_taobao_2.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_taobao_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>3、选择打开<code>手机淘宝</code>应用，再点击<kbd>下一步</kbd>。</p><p><img src="/assets/2020/11/macro_shortcuts_taobao_3.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_taobao_3.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>4、添加两个快捷指令：等待8秒后，朗读<code>evening</code>。</p><p><img src="/assets/2020/11/macro_shortcuts_taobao_4.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_taobao_4.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><blockquote><p>注意：打开<code>手机淘宝</code>自动执行快捷指令时，手机顶部会出现运行快捷指令的通知，通知大概需要6秒后才会消失。为了不出现误操作，等待8秒钟的容错率比较高。</p></blockquote><p>5、展开<code>朗读文本</code>的选项，<code>语言</code>选择<code>英语（英国）</code>，再点击<kbd>下一步</kbd>。</p><p><img src="/assets/2020/11/macro_shortcuts_taobao_5.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_taobao_5.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><blockquote><p>注意：默认的Siri语音可能会播不出声音，所以需要换成英国的发音。</p></blockquote><p>6、不要选中<code>运行前询问</code>，这样打开<code>手机淘宝</code>后，系统才会自动执行快捷指令，否则需要手动确认才能执行。</p><p><img src="/assets/2020/11/macro_shortcuts_taobao_6.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_taobao_6.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>7、这时可以打开<code>手机淘宝</code>，系统会自动朗读文本，<code>语音控制</code>也会自动执行。</p><blockquote><p>注意：朗读文本需要使用手机扬声器播放，手机的音量可以调大一点，以便让语音控制识别到。</p></blockquote><hr><h3 id="三、自动循环执行"><a href="#三、自动循环执行" class="headerlink" title="三、自动循环执行"></a>三、自动循环执行</h3><p>前面两步教程实现了以下的自动化操作：打开手机淘宝 -&gt; 等待8秒 -&gt; 朗读<code>evening</code> -&gt; <code>语音控制</code>执行操作 -&gt; 退出店铺界面 -&gt; 进入下一个店铺界面。</p><p>那么怎样才能让以上的操作一直循环执行呢？很不巧的是，<code>快捷指令</code>依然没有循环执行的功能，但是还是有办法来解决这个问题的。</p><p>因为<code>快捷指令</code>里面有打开应用(跳转应用)的指令，假设有应用A和B，那么可以创建两条自动化流程，第一条是打开应用A时跳转到B应用，第二条是打开B应用时跳转到A应用，这样两个应用就会不断互相跳转，相当于命令一直循环执行了。</p><p>所以我们可以在朗读<code>evening</code>后，等待十几秒，再跳转到另一个应用，另一个应用再跳回<code>手机淘宝</code>。当回到<code>手机淘宝</code>后，又自动执行了<code>手机淘宝</code>的快捷指令，这样快捷指令就能够一直循环执行。</p><p>随便找一个比较少用到的应用来做为工具人，我用的是系统自带的<code>Apple TV</code>，也就是<code>电视</code>应用。</p><blockquote><p>注意：本教程使用<code>iOS 13</code>系统截图，应用名字叫<code>电视</code>，<code>iOS 14</code>里应用名字改为了<code>视频</code>。</p></blockquote><p>下面是实现循环执行的步骤：</p><p>1、编辑<code>手机淘宝</code>的快捷指令，追加两条快捷指令：等待15秒钟，打开<code>电视</code>应用。</p><p><img src="/assets/2020/11/macro_shortcuts_taobao_7.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_taobao_7.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><blockquote><p>注意：15秒是一个比较合适的时间，虽然和上面的8秒加起来让整个流程的等待时间达到了23秒，但是店铺界面之间的跳转以及语音控制的操作也是需要花费时间的，加起来花费的时间也要20多秒。</p></blockquote><p>2、创建一个新的自动化流程，触发条件为打开<code>电视</code>应用。</p><p><img src="/assets/2020/11/macro_shortcuts_tool_1.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_tool_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>3、添加两个快捷指令：等待1秒后，打开<code>手机淘宝</code>应用。</p><p><img src="/assets/2020/11/macro_shortcuts_tool_2.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_tool_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>4、当然，<code>运行前询问</code>也不要选中。</p><p><img src="/assets/2020/11/macro_shortcuts_tool_3.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_tool_3.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>5、至此，所有的快捷指令就创建完成了，打开<code>手机淘宝</code>后，系统便会循环执行快捷指令。</p><hr><h3 id="四、停止循环执行"><a href="#四、停止循环执行" class="headerlink" title="四、停止循环执行"></a>四、停止循环执行</h3><p>目前两个应用在互相跳转，永远不会停止，那么如何才能让快捷指令停止下来呢？下面介绍几种方法。</p><p>1、在这个教程里，快捷指令有十多秒的等待时间，只要在这段时间里，打开<code>快捷指令</code>应用，将<code>启用此自动化</code>关闭就行了。</p><p><img src="/assets/2020/11/macro_shortcuts_taobao_8.png" class="lazyload placeholder" data-srcset="/assets/2020/11/macro_shortcuts_taobao_8.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>2、如果快捷指令的等待时间比较短，来不及进行关闭的操作，那么可以将应用强制关闭，再马上锁屏。锁屏状态下的快捷指令会执行失败，所以能够打断循环执行的链条。</p><blockquote><p>注意：单纯的锁屏是没用的，只要应用存活，屏幕解锁后又自动执行快捷指令了。</p></blockquote><p>3、如果快捷指令执行的速度太快，来不及强制关闭应用，那么可以考虑强制重启手机。</p><p>4、也可以在<code>快捷指令</code>里编写计次器，达到指定的执行次数后就中断执行流程。</p><hr><h3 id="五、后记"><a href="#五、后记" class="headerlink" title="五、后记"></a>五、后记</h3><p>快捷指令的功能很强大，除了自动领活动奖励，还可以做很多东西，比如自动签到、定时执行任务等，以后有机会的话再写一些新的教程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2020年的淘宝双11活动又到来了，今年的主题是超级星秀猫，通过喂喵币让小猫升级为不同的明星。&lt;/p&gt;
&lt;p&gt;跟去年一样，浏览店铺满15秒可以获得大量的喵币，每天可以重复做几十次，但是这个过程有点无聊。&lt;/p&gt;
&lt;p&gt;程序员最讨厌的就是做重复的事了，如果有一件事要重复做两次</summary>
      
    
    
    
    <category term="娱乐天地" scheme="https://www.poboke.com/categories/%E5%A8%B1%E4%B9%90%E5%A4%A9%E5%9C%B0/"/>
    
    <category term="奇思妙想" scheme="https://www.poboke.com/categories/%E5%A8%B1%E4%B9%90%E5%A4%A9%E5%9C%B0/%E5%A5%87%E6%80%9D%E5%A6%99%E6%83%B3/"/>
    
    
    <category term="教学" scheme="https://www.poboke.com/tags/%E6%95%99%E5%AD%A6/"/>
    
    <category term="iOS" scheme="https://www.poboke.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>算法解《机械迷城》游戏三：扳手关水管</title>
    <link href="https://www.poboke.com/machinarium-puzzle-game-waterpipe.html"/>
    <id>https://www.poboke.com/machinarium-puzzle-game-waterpipe.html</id>
    <published>2020-06-07T04:31:25.000Z</published>
    <updated>2021-09-11T06:32:52.387Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、游戏介绍"><a href="#一、游戏介绍" class="headerlink" title="一、游戏介绍"></a>一、游戏介绍</h3><p>小萝卜头来到了下水道，下水道里面有一些错综复杂的水管，如图所示（红色箭头表示进水口和出水口）：</p><p><img src="/assets/2020/06/waterpipe_start.jpg" class="lazyload placeholder" data-srcset="/assets/2020/06/waterpipe_start.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>其中出水口的水流进了蓄水池，而小萝卜头打算进入蓄水池里，所以只能想办法关闭这个出水口。<br>水管上面总共有11个阀门，而下水道里面只能找到3个扳手，每个扳手能关掉一个阀门。  </p><p>那么问题来了：你能帮小萝卜头关闭3个阀门，让出水口流不出水吗？</p><hr><h3 id="二、游戏分析"><a href="#二、游戏分析" class="headerlink" title="二、游戏分析"></a>二、游戏分析</h3><p>我们遇到了新类型的游戏，这个游戏可以看成一个连通图，阀门就是连通图的节点，那么问题可以转化为：如何通过去掉3个节点，让进水口和出水口不相通?<br>如果用<code>X</code>来表示进水口，用<code>Y</code>表示出水口，用<code>A</code> ~ <code>K</code>来标记11个阀门，结果如图所示：</p><p><img src="/assets/2020/06/waterpipe_mark.jpg" class="lazyload placeholder" data-srcset="/assets/2020/06/waterpipe_mark.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>那么如何来构建这张连通图呢？<br>首先要找出图中所有相连的节点，可以用元组<code>(X, Y)</code>来表示节点<code>X</code>和节点<code>Y</code>相连。<br>找出所有两两相连的节点后，就可以用这些相连的节点来构建一个连通图。  </p><p>以进水口节点<code>X</code>为例，与节点<code>X</code>相连的节点为<code>[G, H, K, B]</code>，如图所示：</p><p><img src="/assets/2020/06/waterpipe_link.jpg" class="lazyload placeholder" data-srcset="/assets/2020/06/waterpipe_link.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>那么可以用一个元组数组来表示节点<code>X</code>的连通关系：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">link_valves = [</span><br><span class="line">    (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;G&#x27;</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;H&#x27;</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;K&#x27;</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>假如接下来要寻找节点<code>G</code>的连通关系，由于<code>G</code>与<code>X</code>已经相连了，已经存在<code>(X, G)</code>，那么连通数组就可以不必加入<code>(G, X)</code>。<br>当然，如果要加入也是没关系的，不加入的话看起来比较简洁。</p><p>由于水管错综复杂，要找出所有节点的连通关系是一件很麻烦的事情，所以只能使用<code>人工智能</code>来寻找了。<br>这是一个纯体力活，耗费了两个打怪的时间才找完所有节点，节点的连通数组如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">link_valves = [</span><br><span class="line">    (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;G&#x27;</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;H&#x27;</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;K&#x27;</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;C&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;D&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;E&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;J&#x27;</span>), </span><br><span class="line">    (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;B&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;H&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;I&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>), (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>), (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;I&#x27;</span>), (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;J&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;F&#x27;</span>), (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;G&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;I&#x27;</span>), (<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;K&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><hr><h3 id="三、游戏编写"><a href="#三、游戏编写" class="headerlink" title="三、游戏编写"></a>三、游戏编写</h3><h4 id="1、阀门类的实现"><a href="#1、阀门类的实现" class="headerlink" title="1、阀门类的实现"></a>1、阀门类的实现</h4><p>由于阀门节点要记录与其相连的阀门，所以不能够用基础数据类型来表示，定义一个阀门类比较方便。<br>阀门类使用阀门名字来初始化（阀门名字为英文字母）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Valve</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;阀门类</span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        name: 阀门名字</span></span><br><span class="line"><span class="string">        closed: 是否关闭</span></span><br><span class="line"><span class="string">        outlets: 连接的阀门对象数组</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;使用阀门名字初始化阀门</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            name: 阀门名字</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.closed = <span class="literal">False</span></span><br><span class="line">        self.outlets = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">link</span>(<span class="params">self, valve</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;连接某个阀门</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            valve: 阀门对象</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.outlets.append(valve)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印阀门名和连接的阀门</span></span><br><span class="line"><span class="string">        Print: &quot;阀门名(是否关闭) : [连接的阀门名数组]&quot;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        outlet_names = [x.name <span class="keyword">for</span> x <span class="keyword">in</span> self.outlets]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s(%d) : %s&quot;</span>%(self.name, self.closed, outlet_names))</span><br><span class="line"></span><br><span class="line">valve_a = Valve(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">valve_b = Valve(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">valve_a.link(valve_b)</span><br><span class="line">valve_a.show()</span><br></pre></td></tr></table></figure><p>测试代码将阀门<code>B</code>与阀门<code>A</code>相连，执行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A(<span class="number">0</span>) : [<span class="string">&#x27;B&#x27;</span>]</span><br></pre></td></tr></table></figure><p>进水口和出水口可以视为特殊的阀门，即不可关闭，永远可以让水通过。</p><h4 id="2、游戏类的实现"><a href="#2、游戏类的实现" class="headerlink" title="2、游戏类的实现"></a>2、游戏类的实现</h4><p>游戏类可以维护一个字典，以便快速根据阀门名来找到阀门对象。<br>新建一个游戏类，用相连的阀门节点数组初始化游戏：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;扳手关水管游戏</span></span><br><span class="line"><span class="string">    Attributes:</span></span><br><span class="line"><span class="string">        valve_dict: 存放阀门的字典&#123;阀门名:阀门对象&#125;</span></span><br><span class="line"><span class="string">        water_inlet: 入水口</span></span><br><span class="line"><span class="string">        water_outlet: 出水口</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, link_valves</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;使用连接的阀门数组初始化游戏</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            link_valves: 相连的阀门数组</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.valve_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> link_valve <span class="keyword">in</span> link_valves:</span><br><span class="line">            from_name, to_name = link_valve</span><br><span class="line">            self.add_link_valve(from_name, to_name)</span><br><span class="line">        self.water_inlet = self.valve_dict[<span class="string">&#x27;X&#x27;</span>]</span><br><span class="line">        self.water_outlet = self.valve_dict[<span class="string">&#x27;Y&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_link_valve</span>(<span class="params">self, from_name, to_name</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;添加相连的阀门</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            from_name: 起始阀门名</span></span><br><span class="line"><span class="string">            to_name: 目的阀门名</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        from_valve = self.valve_dict.get(from_name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> from_valve:</span><br><span class="line">            from_valve = Valve(from_name)</span><br><span class="line">            self.valve_dict[from_name] = from_valve</span><br><span class="line"></span><br><span class="line">        to_valve = self.valve_dict.get(to_name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> to_valve:</span><br><span class="line">            to_valve = Valve(to_name)</span><br><span class="line">            self.valve_dict[to_name] = to_valve</span><br><span class="line"></span><br><span class="line">        from_valve.link(to_valve)</span><br><span class="line">        to_valve.link(from_valve)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印出所有阀门的值&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> self.valve_dict:</span><br><span class="line">            valve = self.valve_dict[key]</span><br><span class="line">            valve.show()</span><br><span class="line"></span><br><span class="line">link_valves = [</span><br><span class="line">    (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;G&#x27;</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;H&#x27;</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;K&#x27;</span>), (<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;B&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;C&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;D&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;E&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;J&#x27;</span>), </span><br><span class="line">    (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;B&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;H&#x27;</span>), (<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;I&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;D&#x27;</span>), (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;C&#x27;</span>), (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;I&#x27;</span>), (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;J&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;F&#x27;</span>), (<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;G&#x27;</span>),</span><br><span class="line">    (<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;I&#x27;</span>), (<span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;K&#x27;</span>),</span><br><span class="line">]</span><br><span class="line">game = Game(link_valves)</span><br><span class="line">game.show()</span><br></pre></td></tr></table></figure><p>代码执行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">A(<span class="number">0</span>) : [<span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>]</span><br><span class="line">C(<span class="number">0</span>) : [<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">B(<span class="number">0</span>) : [<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;I&#x27;</span>]</span><br><span class="line">E(<span class="number">0</span>) : [<span class="string">&#x27;Y&#x27;</span>]</span><br><span class="line">D(<span class="number">0</span>) : [<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">G(<span class="number">0</span>) : [<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">F(<span class="number">0</span>) : [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;K&#x27;</span>]</span><br><span class="line">I(<span class="number">0</span>) : [<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">H(<span class="number">0</span>) : [<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>]</span><br><span class="line">K(<span class="number">0</span>) : [<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;F&#x27;</span>]</span><br><span class="line">J(<span class="number">0</span>) : [<span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Y(<span class="number">0</span>) : [<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>]</span><br><span class="line">X(<span class="number">0</span>) : [<span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br></pre></td></tr></table></figure><p>如果要判断两个节点是否相通，需要使用递归来进行判断。<br>由于我们目前已经知道进水口<code>X</code>和出水口<code>Y</code>是相连通的，但是阀门<code>X</code>连接的节点为<code>[&#39;G&#39;, &#39;H&#39;, &#39;K&#39;, &#39;B&#39;]</code>，里面没有<code>Y</code>。所以要遍历每一个连接的阀门，判断某个阀门是否和<code>Y</code>连通。<br>假如能够找到某条相通的路径，例如<code>X -&gt; B -&gt; Y</code>，就说明<code>X</code>和<code>Y</code>是相通的。如果遍历完所有路径都找不到，就说明两个阀门不相通。<br>判断两个阀门是否相通的深度优先遍历算法如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_connected</span>(<span class="params">self, from_valve, to_valve</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断两个阀门是否相通</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            from_valve: 起始阀门</span></span><br><span class="line"><span class="string">            to_valve: 目的阀门</span></span><br><span class="line"><span class="string">        Returns: 是否相通</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        visited = <span class="built_in">set</span>()</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">valve</span>):</span></span><br><span class="line">            <span class="string">&quot;&quot;&quot;使用DFS判断</span></span><br><span class="line"><span class="string">            Args:</span></span><br><span class="line"><span class="string">                valve: 阀门对象</span></span><br><span class="line"><span class="string">            Returns: 是否相通</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">            <span class="comment"># 如果阀门关闭，肯定不相通</span></span><br><span class="line">            <span class="keyword">if</span> valve.closed:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># 如果阀门和目的阀门是同一个阀门，说明相通</span></span><br><span class="line">            <span class="keyword">if</span> valve == to_valve:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="comment"># 如果阀门已经访问过了，说明不相通</span></span><br><span class="line">            <span class="keyword">if</span> valve.name <span class="keyword">in</span> visited:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            visited.add(valve.name)</span><br><span class="line">            <span class="comment"># 遍历目的阀门的所有连接阀门，递归判断是否相通</span></span><br><span class="line">            <span class="keyword">for</span> valve <span class="keyword">in</span> valve.outlets:</span><br><span class="line">                <span class="keyword">if</span> dfs(valve):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 如果任意一个阀门关闭了，肯定不相通</span></span><br><span class="line">        <span class="keyword">if</span> from_valve.closed <span class="keyword">or</span> to_valve.closed:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> dfs(from_valve)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(game.is_connected(game.water_inlet, game.water_outlet))</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><p>说明进水口和出水口是相通的。</p><hr><h3 id="四、游戏解法"><a href="#四、游戏解法" class="headerlink" title="四、游戏解法"></a>四、游戏解法</h3><p>首先实现一下判断游戏是否完成的方法，如果进水口和出水口不相通，就相当于出水口被关闭了，那么可以写出下面的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_done</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否完成游戏</span></span><br><span class="line"><span class="string">        Returns: 是否完成游戏</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.is_connected(self.water_inlet, self.water_outlet)</span><br></pre></td></tr></table></figure><p>这个游戏可以使用回溯算法来求解答案，回溯算法跟<strong>深度优先搜索算法</strong>差不多。<br>如果<strong>广度优先搜索算法</strong>是孙悟空用分身走迷宫的话，那么<strong>深度优先搜索算法</strong>就是猪八戒走迷宫，猪八戒不能分身，只能先沿着迷宫某个岔路口一直走到最深处（深度优先的含义），如果发现是死路，再选择别的岔路口去尝试。</p><p>同理，这个游戏先尝试关闭前3个阀门，判断是否完成游戏。如果没完成游戏，就把第3个阀门打开，关闭第4个阀门，这样一直尝试下去，直到游戏完成为止。<br>回溯算法如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;使用回溯求解答案</span></span><br><span class="line"><span class="string">        Returns: 是否找到了答案</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 如果关掉了3个阀门，就验证游戏结果</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.ops) == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> self.is_done()</span><br><span class="line"></span><br><span class="line">        valve_names = [</span><br><span class="line">            <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>,      <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>,</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> valve_name <span class="keyword">in</span> valve_names:</span><br><span class="line">            valve = self.valve_dict[valve_name]</span><br><span class="line">            <span class="keyword">if</span> valve.closed:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 关闭当前阀门</span></span><br><span class="line">            valve.closed = <span class="literal">True</span></span><br><span class="line">            self.ops.append(valve.name)</span><br><span class="line">            <span class="comment"># 递归验证其它阀门</span></span><br><span class="line">            <span class="keyword">if</span> self.backtrack():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="comment"># 打开当前阀门进行回溯</span></span><br><span class="line">            valve.closed = <span class="literal">False</span></span><br><span class="line">            self.ops.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;调用回溯算法求解答案&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.backtrack():</span><br><span class="line">            <span class="built_in">print</span>(self.ops)</span><br><span class="line"></span><br><span class="line">game.solve()</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;H&#x27;</span>]</span><br></pre></td></tr></table></figure><p>将<code>[A, B, H]</code>这3个阀门关闭的话，就能完成游戏，如图所示：</p><p><img src="/assets/2020/06/waterpipe_done.jpg" class="lazyload placeholder" data-srcset="/assets/2020/06/waterpipe_done.jpg" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><hr><h3 id="五、完整代码"><a href="#五、完整代码" class="headerlink" title="五、完整代码"></a>五、完整代码</h3><p>完整的代码见：<a href="https://github.com/poboke/Machinarium">https://github.com/poboke/Machinarium</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、游戏介绍&quot;&gt;&lt;a href=&quot;#一、游戏介绍&quot; class=&quot;headerlink&quot; title=&quot;一、游戏介绍&quot;&gt;&lt;/a&gt;一、游戏介绍&lt;/h3&gt;&lt;p&gt;小萝卜头来到了下水道，下水道里面有一些错综复杂的水管，如图所示（红色箭头表示进水口和出水口）：&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="学习园地" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/"/>
    
    <category term="算法之美" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Python" scheme="https://www.poboke.com/tags/Python/"/>
    
    <category term="算法" scheme="https://www.poboke.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="谜题" scheme="https://www.poboke.com/tags/%E8%B0%9C%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>算法解《机械迷城》游戏二：箭头换位置</title>
    <link href="https://www.poboke.com/machinarium-puzzle-game-arrow.html"/>
    <id>https://www.poboke.com/machinarium-puzzle-game-arrow.html</id>
    <published>2020-05-23T02:58:22.000Z</published>
    <updated>2021-08-23T16:05:42.369Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、游戏介绍"><a href="#一、游戏介绍" class="headerlink" title="一、游戏介绍"></a>一、游戏介绍</h3><p>原文再续，书接上回。<br>机器人小萝卜头从牢房出来后，遇到了一个丢失了小狗的阿姨。<br>阿姨附近有一个起重电磁铁，小萝卜头打算使用起重电磁铁把铁箱子吸上去，不过需要先打开开关才能使用起重电磁铁。<br>电磁铁的开关有6个箭头，左边3个，右边3个，中间隔了一个空格。（注：游戏里使用的是上下箭头，而本文章使用左右箭头，讲解比较方便）</p><p><img src="/assets/2020/05/arrow_start.png" class="lazyload placeholder" data-srcset="/assets/2020/05/arrow_start.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>箭头移动的规则和玻璃珠跳棋的规则类似。<br>箭头只能移动到空格里，而且只能往箭头朝向的方向移动，不能够后退。<br>箭头移动的方式有两种，一种是把箭头移动到相邻的空格（例如上图第3个位置的箭头往前走一步）：<br><img src="/assets/2020/05/arrow_move_1.png" class="lazyload placeholder" data-srcset="/assets/2020/05/arrow_move_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>另一种是跳过相邻的箭头后进入后面的空格，但是最多只能跳过一个箭头（例如上图倒数第3个位置的箭头往前走两步）：<br><img src="/assets/2020/05/arrow_move_2.png" class="lazyload placeholder" data-srcset="/assets/2020/05/arrow_move_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>将左右两边的箭头互换位置，就能打开开关，如图所示：<br><img src="/assets/2020/05/arrow_done.png" class="lazyload placeholder" data-srcset="/assets/2020/05/arrow_done.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>那么新的问题来了，你能帮小萝卜头找出打开开关的最少移动步骤吗？</p><hr><h3 id="二、游戏分析"><a href="#二、游戏分析" class="headerlink" title="二、游戏分析"></a>二、游戏分析</h3><p>如果用<code>1</code>来表示方向朝右的箭头，用<code>-1</code>表示方向朝左的箭头，<code>0</code>表示空格，那么游戏可以用一个数组来表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 1, 1, 0, -1, -1, -1]</span><br></pre></td></tr></table></figure><p>用<code>1</code>和<code>-1</code>来表示箭头是有原因的，因为方向朝右的箭头要往数组右边移动，所以下标要+1。而方向朝左的箭头往数组左边移动，下标要-1。箭头的值即为箭头移动时下标的偏移量，这会给代码增加一点便利性。</p><p>当箭头移动时，只需要交换数组里元素的值就行了。</p><hr><h3 id="三、游戏编写"><a href="#三、游戏编写" class="headerlink" title="三、游戏编写"></a>三、游戏编写</h3><p>新建一个游戏类，用数组初始化游戏：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, values</span>):</span></span><br><span class="line">        self.values = values</span><br><span class="line">        self.length = <span class="built_in">len</span>(self.values)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.values)</span><br><span class="line"></span><br><span class="line">values = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">game = Game(values)</span><br><span class="line">game.show()</span><br></pre></td></tr></table></figure><p>代码执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 1, 1, 0, -1, -1, -1]</span><br></pre></td></tr></table></figure><p>再给游戏类添加一个移动箭头的方法，参数为要移动的箭头的下标。<br>先把箭头当前所在的下标加上箭头的值，就得到箭头移动的新下标，如果这个下标所在的格子是空格，就说明可以移动。如果这个格子不是空格，就把新下标再加上该箭头的值得到新的下标，再继续判断。<br>因为箭头最多只能移动两个格子的位置，所以只需要判断两次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span>(<span class="params">self, index</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;移动箭头</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            index: 箭头所在的下标</span></span><br><span class="line"><span class="string">        Returns: 是否移动成功</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        new_index = index</span><br><span class="line">        value = self.values[index]</span><br><span class="line">        <span class="comment"># 箭头最多移动两格</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            <span class="comment"># 按箭头的方向移动下标</span></span><br><span class="line">            new_index += value</span><br><span class="line">            <span class="keyword">if</span> new_index &lt; <span class="number">0</span> <span class="keyword">or</span> new_index &gt;= self.length:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            new_value = self.values[new_index]</span><br><span class="line">            <span class="keyword">if</span> new_value == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 如果遇到空格，就交换两个位置的值</span></span><br><span class="line">                self.values[index], self.values[new_index] = \</span><br><span class="line">                    self.values[new_index], self.values[index]</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">values = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">game = Game(values)</span><br><span class="line">game.show()</span><br><span class="line"><span class="comment"># 先移动第3个格子的箭头</span></span><br><span class="line">game.move(<span class="number">2</span>)</span><br><span class="line">game.show()</span><br><span class="line"><span class="comment"># 再移动第5个格子的箭头</span></span><br><span class="line">game.move(<span class="number">4</span>)</span><br><span class="line">game.show()</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, -<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>可见箭头的移动结果是正确的。</p><hr><h3 id="四、游戏解法"><a href="#四、游戏解法" class="headerlink" title="四、游戏解法"></a>四、游戏解法</h3><p>首先实现一下判断游戏是否完成的方法，如果游戏完成的话，中间的格子肯定是空格，左半部分全部都是方向朝左的箭头，那么可以写出下面的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_done</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否完成游戏</span></span><br><span class="line"><span class="string">        Returns: 是否完成</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 如果中间不是空格，肯定未完成</span></span><br><span class="line">        middle = self.length / <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> self.values[middle] != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 判断左半部分是否全部是方向朝左的箭头</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, middle):</span><br><span class="line">            <span class="keyword">if</span> self.values[i] != -<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>沿用上一个游戏的套路，这个游戏也继续使用广度优先搜索算法来求解答案。</p><p>那么怎么获取该游戏的操作步骤呢？<br>因为只有距离空格左右两边两个格子以内的箭头才能够移动，所以只要判断空格周围的4个箭头就行了。<br>获取空格左边两格内方向朝右的箭头，加上空格右边两格内方向朝左的箭头作为操作步骤。<br>可以写一个方法来获取空格周围的箭头下标：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_space_neighbors</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取空格左右两边可移动的箭头下标</span></span><br><span class="line"><span class="string">        Returns: 下标数组</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        index = self.values.index(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># 获取空格左边方向朝右的箭头</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="number">0</span>, index-<span class="number">2</span>), index):</span><br><span class="line">            <span class="keyword">if</span> self.values[i] == <span class="number">1</span>:</span><br><span class="line">                neighbors.append(i)</span><br><span class="line">        <span class="comment"># 获取空格右边方向朝左的箭头</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(index+<span class="number">1</span>, <span class="built_in">min</span>(index+<span class="number">3</span>, self.length)):</span><br><span class="line">            <span class="keyword">if</span> self.values[i] == -<span class="number">1</span>:</span><br><span class="line">                neighbors.append(i)</span><br><span class="line">        <span class="keyword">return</span> neighbors</span><br></pre></td></tr></table></figure><p>广度优先搜索算法算法如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copy</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;拷贝对象</span></span><br><span class="line"><span class="string">        Returns: 新的游戏对象</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        game = Game(self.values[:])</span><br><span class="line">        game.ops = self.ops[:]</span><br><span class="line">        <span class="keyword">return</span> game</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;使用BFS求解答案&quot;&quot;&quot;</span></span><br><span class="line">        queue = [self]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            pre_game = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 获取空格左右两边的箭头下标</span></span><br><span class="line">            neighbors = pre_game.get_space_neighbors()</span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> neighbors:</span><br><span class="line">                cur_game = pre_game.copy()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> cur_game.move(index):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                cur_game.ops += [index]</span><br><span class="line">                <span class="keyword">if</span> cur_game.is_done():</span><br><span class="line">                    <span class="comment"># 如果游戏完成，则打印操作步骤</span></span><br><span class="line">                    <span class="built_in">print</span>(cur_game.ops)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="comment"># 将当前游戏加入队列</span></span><br><span class="line">                queue.append(cur_game)</span><br><span class="line"></span><br><span class="line">values = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">game = Game(values)</span><br><span class="line">game.solve()</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>数字代表每次移动的箭头下标，如<code>2</code>表示移动第三个格子的箭头，其它类推。</p><p>需要移动15步才能打开开关，移动步骤如下：</p><p><img src="/assets/2020/05/arrow.gif" class="lazyload placeholder" data-srcset="/assets/2020/05/arrow.gif" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><hr><h3 id="五、扩展思考"><a href="#五、扩展思考" class="headerlink" title="五、扩展思考"></a>五、扩展思考</h3><p>题目中空格左右两边只有3个箭头，人脑也能比较容易思考出游戏解法。<br>那么如果每边的箭头不止3个，而是有4个、5个或更多个，怎样才能算出最少的移动步数呢？</p><p>先使用下面的代码打印出当每边有<code>i</code>个箭头时，最少的移动次数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line">        <span class="keyword">if</span> cur_game.is_done():</span><br><span class="line">            <span class="comment"># 如果游戏完成，则打印操作次数</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">len</span>(cur_game.ops))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    <span class="built_in">print</span> i, <span class="string">&quot;=&gt;&quot;</span>,</span><br><span class="line">    values = [<span class="number">1</span>] * i + [<span class="number">0</span>] + [-<span class="number">1</span>] * i</span><br><span class="line">    game = Game(values)</span><br><span class="line">    game.solve()</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0 =&gt; 0</span><br><span class="line">1 =&gt; 3</span><br><span class="line">2 =&gt; 8</span><br><span class="line">3 =&gt; 15</span><br><span class="line">4 =&gt; 24</span><br><span class="line">5 =&gt; 35</span><br><span class="line">6 =&gt; 48</span><br><span class="line">7 =&gt; 63</span><br><span class="line">8 =&gt; 80</span><br><span class="line">9 =&gt; 99</span><br><span class="line">10 =&gt; 120</span><br></pre></td></tr></table></figure><p>从结果可以看出：<br>如果每边有0个箭头，这时不用移动箭头就完成游戏，移动次数为0。<br>如果每边有1个箭头，最少需要移动3次。<br>如果每边有2个箭头，最少需要移动8次。<br>如果每边有3个箭头，最少需要移动15次，跟当前游戏相同。</p><p>观察结果，可以推出以下式子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">0</span>) = <span class="number">0</span></span><br><span class="line">f(<span class="number">1</span>) = f(<span class="number">0</span>) + <span class="number">3</span></span><br><span class="line">f(<span class="number">2</span>) = f(<span class="number">1</span>) + <span class="number">5</span></span><br><span class="line">f(<span class="number">3</span>) = f(<span class="number">2</span>) + <span class="number">7</span></span><br><span class="line">f(<span class="number">4</span>) = f(<span class="number">3</span>) + <span class="number">9</span></span><br><span class="line">...</span><br><span class="line">f(n) = f(n-<span class="number">1</span>) + 2n + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>求一下数列的通项式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">由于：</span><br><span class="line">f(n)   - f(n-1) = 2(n) + 1</span><br><span class="line">f(n-1) - f(n-2) = 2(n-1) + 1</span><br><span class="line">f(n-2) - f(n-3) = 2(n-2) + 1</span><br><span class="line">...</span><br><span class="line">f(2) - f(1) = 2(2) + 1</span><br><span class="line">f(1) - f(0) = 2(1) + 1</span><br><span class="line"></span><br><span class="line">将等号两边分别相加得：</span><br><span class="line">f(n) - f(0) = 2(1 + 2 + ... + n) + (1 + 1 + ... + 1)</span><br><span class="line">            = 2((1 + n) * n / 2) + n</span><br><span class="line">            = (1 + n) * n + n</span><br><span class="line">            = n * (n + 2)</span><br><span class="line"></span><br><span class="line">由于 f(0) = 0，</span><br><span class="line">因此 f(n) = n * (n + 2)</span><br></pre></td></tr></table></figure><p>可以很方便地算出，当每边有3个箭头时，所需移动次数为<code>3 * (3 + 2) = 15</code>。</p><hr><h3 id="六、完整代码"><a href="#六、完整代码" class="headerlink" title="六、完整代码"></a>六、完整代码</h3><p>完整的代码见：<a href="https://github.com/poboke/Machinarium">https://github.com/poboke/Machinarium</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、游戏介绍&quot;&gt;&lt;a href=&quot;#一、游戏介绍&quot; class=&quot;headerlink&quot; title=&quot;一、游戏介绍&quot;&gt;&lt;/a&gt;一、游戏介绍&lt;/h3&gt;&lt;p&gt;原文再续，书接上回。&lt;br&gt;机器人小萝卜头从牢房出来后，遇到了一个丢失了小狗的阿姨。&lt;br&gt;阿姨附近有一个起</summary>
      
    
    
    
    <category term="学习园地" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/"/>
    
    <category term="算法之美" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Python" scheme="https://www.poboke.com/tags/Python/"/>
    
    <category term="算法" scheme="https://www.poboke.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="谜题" scheme="https://www.poboke.com/tags/%E8%B0%9C%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>算法解《机械迷城》游戏一：红绿点转盘</title>
    <link href="https://www.poboke.com/machinarium-puzzle-game-wheel.html"/>
    <id>https://www.poboke.com/machinarium-puzzle-game-wheel.html</id>
    <published>2020-05-17T09:54:45.000Z</published>
    <updated>2021-08-23T16:05:27.403Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、游戏介绍"><a href="#一、游戏介绍" class="headerlink" title="一、游戏介绍"></a>一、游戏介绍</h3><p>我们的机器人小萝卜头(robot)经历了千辛万苦，终于进入了监狱的第三个牢房。<br>牢房的柜子里可能藏着好东西，但是柜子的门上安装了一个密码锁，需要先打开密码锁才能开柜子。</p><p>密码锁由12个点组成，其中有6个绿点和6个红点。<br>密码锁上面还有3个转盘，每个转盘边上都有6个点。<br>转盘可以按顺时针或逆时针的方向旋转，当转盘旋转时，转盘上的6个点会跟着转盘一起转动。</p><p><img src="/assets/2020/05/wheel_1.png" class="lazyload placeholder" data-srcset="/assets/2020/05/wheel_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>如果将6个绿色的点转到中央的三角形区域，密码锁就能打开，如下图所示：</p><p><img src="/assets/2020/05/wheel_done.png" class="lazyload placeholder" data-srcset="/assets/2020/05/wheel_done.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>那么问题来了：你能帮小萝卜头找出打开密码锁的<strong>最少</strong>旋转步骤吗？</p><hr><h3 id="二、游戏分析"><a href="#二、游戏分析" class="headerlink" title="二、游戏分析"></a>二、游戏分析</h3><p>如果用数字1来表示绿点，数字0表示红点，那么游戏可以表示为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  1   0   1</span><br><span class="line"></span><br><span class="line">0   1   0   1</span><br><span class="line"></span><br><span class="line">  0   1   0</span><br><span class="line"></span><br><span class="line">    1   0</span><br></pre></td></tr></table></figure><p>若将这12个数字按从左到右、从上到下的顺序保存到一个数组里，则当前游戏状态可以表示为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]</span><br></pre></td></tr></table></figure><p>那么当转盘转动时，怎么改变这个数组的值呢？<br>可以考虑先记录下每个转盘上的点在数组里的下标，然后根据下标来移动元素的值。</p><p>先看一下所有点在数组里的下标：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  0   1   2</span><br><span class="line"></span><br><span class="line">3   4   5   6</span><br><span class="line"></span><br><span class="line">  7   8   9</span><br><span class="line"></span><br><span class="line">   10   11</span><br></pre></td></tr></table></figure><p>由上图可知，3个转盘边上的点的下标分别为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第1个转盘：[0, 1, 5, 8, 7, 3]</span><br><span class="line">第2个转盘：[1, 2, 6, 9, 8, 4]</span><br><span class="line">第3个转盘：[4, 5, 9, 11, 10, 7]</span><br></pre></td></tr></table></figure><p>注意，上面转盘的点坐标是按顺时针方向获取的，以便进行旋转的操作。<br>只要能够模拟转盘的转动，就能编写自动求解答案的算法了。</p><hr><h3 id="三、游戏编写"><a href="#三、游戏编写" class="headerlink" title="三、游戏编写"></a>三、游戏编写</h3><p>要找出游戏的解法，首先要模拟游戏的玩法，下面就用python来实现一下这个游戏。</p><p>新建一个游戏类，使用dots数组来初始化游戏：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dots</span>):</span></span><br><span class="line">        self.dots = dots</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        text = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">   %d   %d   %d</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> %d   %d   %d   %d</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   %d   %d   %d</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     %d   %d</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>%<span class="built_in">tuple</span>(self.dots)</span><br><span class="line">        <span class="built_in">print</span>(text)</span><br><span class="line"></span><br><span class="line">dots = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">game = Game(dots)</span><br><span class="line">game.show()</span><br></pre></td></tr></table></figure><p>代码执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  1   0   1</span><br><span class="line"></span><br><span class="line">0   1   0   1</span><br><span class="line"></span><br><span class="line">  0   1   0</span><br><span class="line"></span><br><span class="line">    1   0</span><br></pre></td></tr></table></figure><p>由结果可见，游戏类能够正常打印出点的位置。</p><p>再给游戏类添加一个转动转盘的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, dots</span>):</span></span><br><span class="line">        self.dots = dots</span><br><span class="line">        self.wheel_poses = [</span><br><span class="line">            [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">3</span>],</span><br><span class="line">            [<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">4</span>],</span><br><span class="line">            [<span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">7</span>],</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">turn</span>(<span class="params">self, index, clockwise</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;转动轮盘</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            index: 转盘下标</span></span><br><span class="line"><span class="string">            clockwise: 是否顺时针旋转</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        poses = self.wheel_poses[index]</span><br><span class="line">        <span class="keyword">if</span> clockwise:</span><br><span class="line">            <span class="comment"># 顺时针旋转</span></span><br><span class="line">            temp = self.dots[poses[-<span class="number">1</span>]]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(poses)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">                self.dots[poses[i]] = self.dots[poses[i-<span class="number">1</span>]]</span><br><span class="line">            self.dots[poses[<span class="number">0</span>]] = temp</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 逆时针旋转</span></span><br><span class="line">            temp = self.dots[poses[<span class="number">0</span>]]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(poses)):</span><br><span class="line">                self.dots[poses[i-<span class="number">1</span>]] = self.dots[poses[i]]</span><br><span class="line">            self.dots[poses[-<span class="number">1</span>]] = temp</span><br></pre></td></tr></table></figure><p>如果将第一个转盘按顺时针方向转动一下，将会成为下面的样子：</p><p>转动前：<br><img src="/assets/2020/05/wheel_1.png" class="lazyload placeholder" data-srcset="/assets/2020/05/wheel_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>转动后：<br><img src="/assets/2020/05/wheel_11.png" class="lazyload placeholder" data-srcset="/assets/2020/05/wheel_11.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>测试一下旋转的方法，以下代码将第一个转盘按顺时针方向转动：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dots = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">game = Game(dots)</span><br><span class="line">game.turn(<span class="number">0</span>, <span class="literal">True</span>)</span><br><span class="line">game.show()</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  0   1   1</span><br><span class="line"></span><br><span class="line">0   1   0   1</span><br><span class="line"></span><br><span class="line">  1   0   0</span><br><span class="line"></span><br><span class="line">    1   0</span><br></pre></td></tr></table></figure><p>可见结果的数值和图片是相对应的，至此游戏的代码就编写完成了。</p><hr><h3 id="四、游戏解法"><a href="#四、游戏解法" class="headerlink" title="四、游戏解法"></a>四、游戏解法</h3><p>我们想写算法自动求解游戏，最终肯定要判断游戏是否完成的，所以可以先考虑一下游戏的完成条件。<br>当结果如下图所示时，就说明游戏完成了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  0   1   0</span><br><span class="line"></span><br><span class="line">0   1   1   0</span><br><span class="line"></span><br><span class="line">  1   1   1</span><br><span class="line"></span><br><span class="line">    0   0</span><br></pre></td></tr></table></figure><p>将上图转换成数组，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0]</span><br></pre></td></tr></table></figure><p>所以只要判断游戏状态是否等于上面的数组就行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_done</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;判断是否完成游戏&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.dots == [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>要找出最少的旋转步骤，可以使用广度优先搜索算法来求解答案。</p><p>广度优先搜索就像孙悟空走迷宫一样，比如孙悟空走到迷宫的三岔口，就会拔出猴毛变成三个分身，每个分身进入一个分叉口。每个分身分别到达下一个分叉口后，又变出和分叉口一样多的分身进入每个分叉口。这样当其中某个分身最先到达迷宫终点的时候，这个分身所走过的路径就是最短的。</p><p>这个转盘游戏也是一样，游戏有3个转盘，每个转盘有两个旋转方向，所以总共有6种转法。每种转法相当于一个分叉口，把初始游戏按每种转法旋转后得到6个结果，每个结果也分别转6次得到6个子结果，这样不断转下去，子子孙孙无穷匮也。当某个子结果完成的时候，这个子结果所转动的次数就是最少的。</p><p>算法如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copy</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;拷贝对象&quot;&quot;&quot;</span></span><br><span class="line">        game = Game(self.dots[:])</span><br><span class="line">        game.ops = self.ops[:]</span><br><span class="line">        <span class="keyword">return</span> game</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;使用BFS求解答案&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 将当前游戏加入队列</span></span><br><span class="line">        queue = [self]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            pre_game = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># 遍历3个转盘的下标</span></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]:</span><br><span class="line">                <span class="comment"># 遍历两种旋转方向</span></span><br><span class="line">                <span class="keyword">for</span> clockwise <span class="keyword">in</span> [<span class="literal">True</span>, <span class="literal">False</span>]:</span><br><span class="line">                    <span class="comment"># 拷贝上一个游戏状态来模拟游戏旋转</span></span><br><span class="line">                    cur_game = pre_game.copy()</span><br><span class="line">                    cur_game.turn(index, clockwise)</span><br><span class="line">                    cur_game.ops += [(index, clockwise)]</span><br><span class="line">                    <span class="keyword">if</span> cur_game.is_done():</span><br><span class="line">                        <span class="comment"># 如果游戏完成，则打印操作步骤</span></span><br><span class="line">                        <span class="built_in">print</span>(cur_game.ops)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    <span class="comment"># 将当前游戏加入队列</span></span><br><span class="line">                    queue.append(cur_game)</span><br><span class="line"></span><br><span class="line">dots = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">game = Game(dots)</span><br><span class="line">game.solve()</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(0, True), (1, False), (2, True), (1, False)]</span><br></pre></td></tr></table></figure><p>其中<code>(0, True)</code>表示将第1个转盘进行顺时针旋转，<code>(1, False)</code>表示将第2个转盘进行逆时针旋转，其它的同理。</p><p>也就是说，最少需要转动4次才能解开密码锁，旋转过程为：</p><p><img src="/assets/2020/05/wheel_1.gif" class="lazyload placeholder" data-srcset="/assets/2020/05/wheel_1.gif" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><hr><h3 id="五、其它解法"><a href="#五、其它解法" class="headerlink" title="五、其它解法"></a>五、其它解法</h3><p>多次打开密码锁可以发现，密码锁的初始状态不是固定的，还可能出现另一种状态：</p><p><img src="/assets/2020/05/wheel_2.png" class="lazyload placeholder" data-srcset="/assets/2020/05/wheel_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>修改一下初始化数组的值，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dots = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">game = Game(dots)</span><br><span class="line">game.solve()</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(0, True), (1, True), (2, False), (0, False), (0, False)]</span><br></pre></td></tr></table></figure><p>在这种初始状态下，需要旋转5次才能完成游戏，旋转过程为：</p><p><img src="/assets/2020/05/wheel_2.gif" class="lazyload placeholder" data-srcset="/assets/2020/05/wheel_2.gif" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><hr><h3 id="六、完整代码"><a href="#六、完整代码" class="headerlink" title="六、完整代码"></a>六、完整代码</h3><p>完整的代码见：<a href="https://github.com/poboke/Machinarium">https://github.com/poboke/Machinarium</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、游戏介绍&quot;&gt;&lt;a href=&quot;#一、游戏介绍&quot; class=&quot;headerlink&quot; title=&quot;一、游戏介绍&quot;&gt;&lt;/a&gt;一、游戏介绍&lt;/h3&gt;&lt;p&gt;我们的机器人小萝卜头(robot)经历了千辛万苦，终于进入了监狱的第三个牢房。&lt;br&gt;牢房的柜子里可能藏着好</summary>
      
    
    
    
    <category term="学习园地" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/"/>
    
    <category term="算法之美" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/"/>
    
    
    <category term="Python" scheme="https://www.poboke.com/tags/Python/"/>
    
    <category term="算法" scheme="https://www.poboke.com/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="谜题" scheme="https://www.poboke.com/tags/%E8%B0%9C%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>能让人疯掉的10道题</title>
    <link href="https://www.poboke.com/ten-crazy-questions.html"/>
    <id>https://www.poboke.com/ten-crazy-questions.html</id>
    <published>2020-01-25T13:26:08.000Z</published>
    <updated>2021-08-15T12:12:49.868Z</updated>
    
    <content type="html"><![CDATA[<p>这10道题环环相扣，单看一道题或几道题，答不出结果。<br>只有把题目全看完，并作出正确的假设和推理，才能答对。</p><blockquote><p>1、第一个答案是B的问题是哪一个：<br>A.第2题　B.第3题　C.第4题　D.第5题　E.第6题</p><p>2、唯一的连续两个具有相同答案的问题是：<br>A.第2，3题　B.第3，4题　C.第4，5题　D.第5，6题　E.第6，7题</p><p>3、本问题答案和哪一个问题的答案相同：<br>A.第1题　B.第2题　C.第4题　D.第7题　E.第6题</p><p>4、答案是A的问题的个数是：<br>A.0个　B.1个　C.2个　D.3个　E.4个</p><p>5、本问题答案和哪一个问题的答案相同：<br>A.第10题　B.第9题　C.第8题　D.第7题　E.第6题</p><p>6、答案是A的问题的个数和答案是什么的问题的个数相同：<br>A.B　B.C　C.D　D.E　E.以上都不是</p><p>7、按照字母顺序，本问题的答案和下一个问题的答案相差几个字母（注：A和B相差一个字母）：<br>A.4个　B.3个　C.2个　D.1个　E.0个</p><p>8、答案是元音字母的问题的个数是（注：A和E是元音字母）：<br>A.2个　B.3个　C.4个　D.5个　E.6个</p><p>9、答案是辅音字母的问题的个数是：<br>A.一个质数　B.一个阶乘数　C.一个平方数　D.一个立方数　E.5的倍数</p><p>10、本问题的答案是：<br>A.A　B.B　C.C　D.D　E.E</p><p>这10道题的答案为：<u>　　　　　　　　　　　</u>。</p></blockquote><p>以下是用python代码写的求解算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">A = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">B = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">C = <span class="string">&#x27;C&#x27;</span></span><br><span class="line">D = <span class="string">&#x27;D&#x27;</span></span><br><span class="line">E = <span class="string">&#x27;E&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q1</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : answer[<span class="number">2</span>],</span><br><span class="line">        B : answer[<span class="number">3</span>],</span><br><span class="line">        C : answer[<span class="number">4</span>],</span><br><span class="line">        D : answer[<span class="number">5</span>],</span><br><span class="line">        E : answer[<span class="number">6</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">1</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == B</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q2</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : (answer[<span class="number">2</span>], answer[<span class="number">3</span>]),</span><br><span class="line">        B : (answer[<span class="number">3</span>], answer[<span class="number">4</span>]),</span><br><span class="line">        C : (answer[<span class="number">4</span>], answer[<span class="number">5</span>]),</span><br><span class="line">        D : (answer[<span class="number">5</span>], answer[<span class="number">6</span>]),</span><br><span class="line">        E : (answer[<span class="number">6</span>], answer[<span class="number">7</span>]),</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">2</span>]]</span><br><span class="line">    count = <span class="built_in">sum</span>([(x[<span class="number">0</span>] == x[<span class="number">1</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> options.values()])</span><br><span class="line">    <span class="keyword">return</span> (option[<span class="number">0</span>] == option[<span class="number">1</span>]) <span class="keyword">and</span> (count == <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q3</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : answer[<span class="number">1</span>],</span><br><span class="line">        B : answer[<span class="number">2</span>],</span><br><span class="line">        C : answer[<span class="number">4</span>],</span><br><span class="line">        D : answer[<span class="number">7</span>],</span><br><span class="line">        E : answer[<span class="number">6</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">3</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == answer[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q4</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : <span class="number">0</span>,</span><br><span class="line">        B : <span class="number">1</span>,</span><br><span class="line">        C : <span class="number">2</span>,</span><br><span class="line">        D : <span class="number">3</span>,</span><br><span class="line">        E : <span class="number">4</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">4</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == answer.count(A)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q5</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : answer[<span class="number">10</span>],</span><br><span class="line">        B : answer[<span class="number">9</span>],</span><br><span class="line">        C : answer[<span class="number">8</span>],</span><br><span class="line">        D : answer[<span class="number">7</span>],</span><br><span class="line">        E : answer[<span class="number">6</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">5</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == answer[<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q6</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : B,</span><br><span class="line">        B : C,</span><br><span class="line">        C : D,</span><br><span class="line">        D : E,</span><br><span class="line">        E : <span class="literal">None</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">6</span>]]</span><br><span class="line">    <span class="keyword">if</span> option == <span class="literal">None</span>:</span><br><span class="line">        counts = [answer.count(x) <span class="keyword">for</span> x <span class="keyword">in</span> [B, C, D, E]]</span><br><span class="line">        <span class="keyword">return</span> answer.count(A) <span class="keyword">not</span> <span class="keyword">in</span> counts</span><br><span class="line">    <span class="keyword">return</span> answer.count(A) == answer.count(option)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q7</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : <span class="number">4</span>,</span><br><span class="line">        B : <span class="number">3</span>,</span><br><span class="line">        C : <span class="number">2</span>,</span><br><span class="line">        D : <span class="number">1</span>,</span><br><span class="line">        E : <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">7</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == <span class="built_in">abs</span>(<span class="built_in">ord</span>(answer[<span class="number">7</span>]) - <span class="built_in">ord</span>(answer[<span class="number">8</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q8</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : <span class="number">2</span>,</span><br><span class="line">        B : <span class="number">3</span>,</span><br><span class="line">        C : <span class="number">4</span>,</span><br><span class="line">        D : <span class="number">5</span>,</span><br><span class="line">        E : <span class="number">6</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">8</span>]]</span><br><span class="line">    count = answer.count(A) + answer.count(E)</span><br><span class="line">    <span class="keyword">return</span> option == count</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q9</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : (<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>),</span><br><span class="line">        B : (<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>),</span><br><span class="line">        C : (<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>),</span><br><span class="line">        D : (<span class="number">0</span>, <span class="number">1</span>, <span class="number">8</span>),</span><br><span class="line">        E : (<span class="number">0</span>, <span class="number">5</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">9</span>]]</span><br><span class="line">    count = <span class="number">10</span> - answer.count(A) - answer.count(E)</span><br><span class="line">    <span class="keyword">return</span> count <span class="keyword">in</span> option</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q10</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : A,</span><br><span class="line">        B : B,</span><br><span class="line">        C : C,</span><br><span class="line">        D : D,</span><br><span class="line">        E : E,</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">10</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == answer[<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取10道题答案的全排列</span></span><br><span class="line">answers = itertools.product([A, B, C, D, E], repeat=<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> answer <span class="keyword">in</span> answers:</span><br><span class="line">    <span class="comment">#为了让代码更容易看懂，加了个下标占位符</span></span><br><span class="line">    answer = [<span class="string">&#x27;&#x27;</span>] + <span class="built_in">list</span>(answer)</span><br><span class="line">    <span class="keyword">if</span> Q1() <span class="keyword">and</span> Q2() <span class="keyword">and</span> Q3() <span class="keyword">and</span> Q4() <span class="keyword">and</span> Q5() <span class="keyword">and</span> \</span><br><span class="line">       Q6() <span class="keyword">and</span> Q7() <span class="keyword">and</span> Q8() <span class="keyword">and</span> Q9() <span class="keyword">and</span> Q10():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(answer))</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><details><summary>点击查看答案：</summary><p>执行结果为：<code>CDEBEEDCBA</code></p></details>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这10道题环环相扣，单看一道题或几道题，答不出结果。&lt;br&gt;只有把题目全看完，并作出正确的假设和推理，才能答对。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、第一个答案是B的问题是哪一个：&lt;br&gt;A.第2题　B.第3题　C.第4题　D.第5题　E.第6题&lt;/p&gt;
&lt;p&gt;2、</summary>
      
    
    
    
    <category term="娱乐天地" scheme="https://www.poboke.com/categories/%E5%A8%B1%E4%B9%90%E5%A4%A9%E5%9C%B0/"/>
    
    <category term="挑战智慧" scheme="https://www.poboke.com/categories/%E5%A8%B1%E4%B9%90%E5%A4%A9%E5%9C%B0/%E6%8C%91%E6%88%98%E6%99%BA%E6%85%A7/"/>
    
    
    <category term="Python" scheme="https://www.poboke.com/tags/Python/"/>
    
    <category term="智力题" scheme="https://www.poboke.com/tags/%E6%99%BA%E5%8A%9B%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>《数学与魔术：油与水》</title>
    <link href="https://www.poboke.com/math-and-magic-oil-and-water.html"/>
    <id>https://www.poboke.com/math-and-magic-oil-and-water.html</id>
    <published>2019-11-11T03:11:11.000Z</published>
    <updated>2021-09-10T17:08:07.632Z</updated>
    
    <content type="html"><![CDATA[<div class="note link green"><p>点击链接查看第9集的魔术表演：<a href="https://open.163.com/newview/movie/free?pid=M8JHGS5KF&mid=M8JHKQCEM">《数学与魔术：油与水》</a></p></div><p>利用数学原理表演的魔术，只要严格按照魔术师的步骤表演，结果都一定能成功。</p><p>所以很多看似不可能完成的事情，背后往往有着不为人知的技巧，而这正是魔术令人着迷的地方。</p><p>接下来就详细说一下我对这个魔术表演的推理过程。</p><h3 id="一、魔术师的表演步骤"><a href="#一、魔术师的表演步骤" class="headerlink" title="一、魔术师的表演步骤"></a>一、魔术师的表演步骤</h3><p>魔术师在表演过程中做了以下几个步骤：</p><ul><li>① 将五张红牌和五张蓝牌面朝上放在一起</li><li>② 将五张红色牌翻过来背朝上</li><li>③ 把牌的顺序洗乱</li><li>④ 放一张翻一张将牌数在桌上</li><li>⑤ 魔术师随便切牌</li><li>⑥ 拿几张牌让观众决定是否翻过来</li><li>⑦ 重复⑤和⑥直到观众满意</li><li>⑧ 左一张右一张将牌分成两叠</li><li>⑨ 让观众选择一叠翻过来</li><li>⑩ 结果：不同颜色的牌的朝向不同</li></ul><h3 id="二、简化表演步骤"><a href="#二、简化表演步骤" class="headerlink" title="二、简化表演步骤"></a>二、简化表演步骤</h3><p>整个表演过程中随机性的选择很多，所以看起来不太好推导，但是如果把步骤精简一下的话，看起来就清晰多了。</p><p>假如在很久很久以前，有一个魔术师发明了一个魔术，魔术的步骤是①②⑩，做完这3个步骤后，魔术就完美结束了，因为经过第②步操作后，红蓝牌的朝向自然就不同了。<br>也就是说，第③到⑨之间操作的步骤，并不会改变牌的朝向，而只会打乱牌的顺序。</p><p>那么把步骤③加进去呢？结果还是一样，牌的顺序乱了，但牌的朝向不变。</p><p>如果把步骤④加进去呢？奇数张牌的朝向不变，但是偶数张牌的朝向变了。</p><p>如果再把步骤⑧⑨加进去呢？⑧是将奇数的牌和偶数的牌分成两叠，⑨是将其中一叠翻过来。<br>如果观众选择的是偶数牌叠，那么就会和步骤④互相抵消，牌的朝向又还原了。<br>如果观众选择的是奇数牌叠，和步骤④合起来相当于把所有牌翻了过来，那么红蓝牌的朝向依然不同。</p><p>如果把步骤⑤加进去呢？切牌就是将牌分成两叠再交换位置。<br>更多切牌的知识可以看这篇文章：<a href="/math-and-magic-the-mind-match-experiment.html">《数学与魔术：心灵支配配对实验》</a>。<br>如果切的两叠牌都是偶数张，那么牌的奇偶性不变，原来奇数位置的牌依然在奇数的位置。<br>如果切的两叠牌都是奇数张，那么偶数张牌和奇数张牌的位置互换了，虽然原来的奇数张牌变成了偶数张牌，但是牌的朝向依然不变，所以对魔术的结果依然没影响。</p><h3 id="三、观众的选择"><a href="#三、观众的选择" class="headerlink" title="三、观众的选择"></a>三、观众的选择</h3><p>现在只剩下第⑥个步骤了，观众随机的选择，会让牌的朝向发生变化，这是最能迷惑人的地方。</p><p>因为做完步骤②后，魔术是可以结束的，也就是说牌的朝向都是正确的，可以将10张牌的朝向记为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>注意，数组记录的是牌正确的朝向，而不是牌的正反面。红色的牌背面朝上，黑色的牌正面朝上，都是正确的朝向，所以都记为<code>1</code>。</p><p>做完第⑤个步骤后，奇数张牌和偶数张牌朝向不同，如果将错误的朝向记为<code>0</code>，那么这10张牌的朝向可以表示为(下标<code>0</code>为牌顶)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>假如现在开始做步骤⑥了，魔术师将牌分成两部分，顶部4张牌和底部6张牌：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">top = [a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>], a[<span class="number">3</span>]] = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">bottom = [a[<span class="number">4</span>], a[<span class="number">5</span>], a[<span class="number">6</span>], a[<span class="number">7</span>], a[<span class="number">8</span>], a[<span class="number">9</span>]] = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>如果观众选择将顶部4张牌翻面，底部6张牌不翻面，那么结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># top是先翻面放下去的，bottom就成了牌顶</span></span><br><span class="line">a = bottom + ~top</span><br><span class="line">  = [a[<span class="number">4</span>], a[<span class="number">5</span>], a[<span class="number">6</span>], a[<span class="number">7</span>], a[<span class="number">8</span>], a[<span class="number">9</span>], !a[<span class="number">3</span>], !a[<span class="number">2</span>], !a[<span class="number">1</span>], !a[<span class="number">0</span>]]</span><br><span class="line">  = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>可见奇数张牌和偶数张牌的朝向依然不变，如果观众选择顶部4张牌不翻面，底部6张牌翻面，结果也是一样的。</p><p>如果魔术师将顶部3张翻面和底部7张不翻面的话，会导致结果异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [a[<span class="number">3</span>], a[<span class="number">4</span>], a[<span class="number">5</span>], a[<span class="number">6</span>], a[<span class="number">7</span>], a[<span class="number">8</span>], a[<span class="number">9</span>], !a[<span class="number">2</span>], !a[<span class="number">1</span>], !a[<span class="number">0</span>]]</span><br><span class="line">  = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>视频里也可以看出魔术师有数牌的痕迹，每次数<code>2</code>、<code>4</code>或<code>6</code>张，所以魔术师只要保证每次拿的牌是偶数就行了，无论观众怎么选择，牌的朝向都不会改变。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note link green&quot;&gt;&lt;p&gt;点击链接查看第9集的魔术表演：&lt;a href=&quot;https://open.163.com/newview/movie/free?pid=M8JHGS5KF&amp;mid=M8JHKQCEM&quot;&gt;《数学与魔术：油与水》&lt;/a&gt;</summary>
      
    
    
    
    <category term="娱乐天地" scheme="https://www.poboke.com/categories/%E5%A8%B1%E4%B9%90%E5%A4%A9%E5%9C%B0/"/>
    
    <category term="魔术学堂" scheme="https://www.poboke.com/categories/%E5%A8%B1%E4%B9%90%E5%A4%A9%E5%9C%B0/%E9%AD%94%E6%9C%AF%E5%AD%A6%E5%A0%82/"/>
    
    
    <category term="教学" scheme="https://www.poboke.com/tags/%E6%95%99%E5%AD%A6/"/>
    
    <category term="魔术" scheme="https://www.poboke.com/tags/%E9%AD%94%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>《数学与魔术：心灵支配配对实验》</title>
    <link href="https://www.poboke.com/math-and-magic-the-mind-match-experiment.html"/>
    <id>https://www.poboke.com/math-and-magic-the-mind-match-experiment.html</id>
    <published>2018-11-11T03:11:11.000Z</published>
    <updated>2021-09-05T07:44:22.464Z</updated>
    
    <content type="html"><![CDATA[<div class="note link green"><p>点击链接查看第7集的魔术表演：<a href="https://open.163.com/newview/movie/free?pid=M8JHGS5KF&mid=M8JHKPS78">《数学与魔术：心灵支配配对实验》</a></p></div><h3 id="一、切牌的原理"><a href="#一、切牌的原理" class="headerlink" title="一、切牌的原理"></a>一、切牌的原理</h3><p>切牌是指将一副牌任意分成两部分，再将两部分牌进行交换，切牌后牌的相对顺序依然保持不变。</p><p>比如有5张牌，顺序为<code>1 2 3 4 5</code>，如果把牌看成首尾相接的圆环的话，那么<code>5</code>的下一张牌就是<code>1</code>。<br>将牌顶的两张牌切到牌底，顺序变成了<code>3 4 5 1 2</code>，可以看到<code>5</code>的下一张牌还是<code>1</code>。<br>无论切了多少次牌，牌的相对顺序依然不变。</p><h3 id="二、卡片和筹码的秘密"><a href="#二、卡片和筹码的秘密" class="headerlink" title="二、卡片和筹码的秘密"></a>二、卡片和筹码的秘密</h3><p>魔术师将ESP卡片分成两叠，每叠有5张卡片，让观众把4个筹码任意放在两叠卡片上，每叠卡片有多少个筹码就从顶部拿多少张卡片到底部。</p><p>因为这是数学魔术，所以无论观众怎么放筹码，最终都会成功的。</p><p>怎样才能找出两叠卡片的相对顺序呢？假设一开始第一叠卡片翻开了，第二叠卡片的顺序还未知：<br><img src="/assets/2018/11/mind_match_1.png" class="lazyload placeholder" data-srcset="/assets/2018/11/mind_match_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>注意魔术师移动卡片时，每次都是把顶部的卡片移到底部，相当于每次都切1张牌。<br>那么如果第一叠卡片移动3次，第二叠卡片移动1次的话，结果会变成：<br><img src="/assets/2018/11/mind_match_2.png" class="lazyload placeholder" data-srcset="/assets/2018/11/mind_match_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>由结果可知，<code>卡片B</code>为<code>波浪卡</code>。</p><p>而筹码总共有5种摆放方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一叠卡片的筹码数：0 1 2 3 4</span><br><span class="line">第二叠卡片的筹码数：4 3 2 1 0</span><br></pre></td></tr></table></figure><p>只要把这5种情况都试一遍，就能得出第二叠卡片的排列顺序：<br><img src="/assets/2018/11/mind_match_3.png" class="lazyload placeholder" data-srcset="/assets/2018/11/mind_match_3.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>可见第一叠卡片和第二叠卡片的顺序相反。</p><h3 id="三、逆序卡片的特性"><a href="#三、逆序卡片的特性" class="headerlink" title="三、逆序卡片的特性"></a>三、逆序卡片的特性</h3><p>为什么两叠卡片的顺序相反时有这个特性呢？</p><p>假设每叠卡片的数量为<code>n</code>，筹码数是<code>n-1</code>。<br>如果第一叠卡片放了<code>k</code>个筹码，则移动<code>k</code>张卡片后，卡片顶部是第<code>k</code>张(下标从0开始)。<br>第二叠卡片移动了<code>n-1-k</code>次，卡片顶部是第<code>n-1-k</code>张。</p><p>由于两叠卡片顺序相反，那么第一叠卡片的第<code>i</code>张和第二叠卡片的第<code>n-1-i</code>张相同(下标从0开始)。<br>所以第一叠卡片的第<code>k</code>张和第二叠卡片的第<code>n-1-k</code>张相同。</p><p>因为整个过程都是通过切牌的方式移动卡片的，所以当拿走顶部的卡片后，剩下的卡片的相对顺序不变，两叠卡片依然是逆序的，因此能够继续表演下去。</p><h3 id="四、推导出卡片的初始顺序"><a href="#四、推导出卡片的初始顺序" class="headerlink" title="四、推导出卡片的初始顺序"></a>四、推导出卡片的初始顺序</h3><p>一开始魔术师随便切了几次牌，观众也切过了牌，魔术师再从顶部一张一张数了5张卡片到桌子上形成第一叠卡片，剩下的卡片直接放在桌子上形成第二叠卡片。  </p><p>这时桌子上两叠卡片的顺序是相反的，也就是说一开始两叠卡片的顺序是相同的，第一叠卡片在数牌的时候顺序反过来了。</p><p>表演前只需把两叠卡片按相同的顺序排序叠在一起就可以了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note link green&quot;&gt;&lt;p&gt;点击链接查看第7集的魔术表演：&lt;a href=&quot;https://open.163.com/newview/movie/free?pid=M8JHGS5KF&amp;mid=M8JHKPS78&quot;&gt;《数学与魔术：心灵支配配对实验</summary>
      
    
    
    
    <category term="娱乐天地" scheme="https://www.poboke.com/categories/%E5%A8%B1%E4%B9%90%E5%A4%A9%E5%9C%B0/"/>
    
    <category term="魔术学堂" scheme="https://www.poboke.com/categories/%E5%A8%B1%E4%B9%90%E5%A4%A9%E5%9C%B0/%E9%AD%94%E6%9C%AF%E5%AD%A6%E5%A0%82/"/>
    
    
    <category term="教学" scheme="https://www.poboke.com/tags/%E6%95%99%E5%AD%A6/"/>
    
    <category term="魔术" scheme="https://www.poboke.com/tags/%E9%AD%94%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>恢复Mac版QQ一些隐藏的小功能</title>
    <link href="https://www.poboke.com/restore-some-functions-of-qq-for-mac.html"/>
    <id>https://www.poboke.com/restore-some-functions-of-qq-for-mac.html</id>
    <published>2016-09-16T14:37:32.000Z</published>
    <updated>2021-09-10T14:44:53.440Z</updated>
    
    <content type="html"><![CDATA[<h3 id="零、前言"><a href="#零、前言" class="headerlink" title="零、前言"></a>零、前言</h3><p>最近使用Mac版QQ时弹出了一个版本更新提示，说最新版<code>v5.1.2</code>正式版已在官网发布，于是我便更新了。</p><p>不过更新完我就后悔了，因为我发现<code>5.x</code>版本有些功能用不了：</p><p>1、不能选择忙碌状态：<br><img src="/assets/2016/09/macqq_no_busy_status.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_no_busy_status.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"><br>要知道，我每次上QQ都会把状态设为忙碌，这样才能假装成很忙的样子。</p><p>2、不能发送本地图片，只能发送文件：<br><img src="/assets/2016/09/macqq_no_picture_button.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_no_picture_button.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"><br>从上图可以看到，发送图片的按钮不见了。虽然可以把图片拖到聊天窗口发送，但操作还是感觉很麻烦。</p><p>看来，我只能自己给给QQ加上这两个功能了。</p><h3 id="一、恢复忙碌状态选项"><a href="#一、恢复忙碌状态选项" class="headerlink" title="一、恢复忙碌状态选项"></a>一、恢复忙碌状态选项</h3><p>用<a href="http://www.interface-inspector.com/">Interface Inspector</a>附加QQ的进程，然后定位到选择状态的按钮，如下图所示：<br><img src="/assets/2016/09/macqq_inspector_popup_button.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_inspector_popup_button.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"><br>可以很明显地看出，菜单列表里有一个<code>忙碌</code>的菜单项，后面有个划了一条斜线的眼睛，表示该菜单项是隐藏状态。</p><p>因此可以猜想程序员只是把该菜单项隐藏了，具体作用应该还保留着，如果将该菜单项设置为不隐藏的话，那么就很有可能可以使用忙碌的功能了。</p><p>那么怎样才能获取到这个菜单列表呢？首先我们可以看到状态按钮的类名是<code>OnlineStateImagePopUpButton</code>，父类为<code>NSPopUpButton</code>，查看<code>NSPopUpButton</code>类的头文件，可以发现该类有一个<code>itemArray</code>的属性，能够获取到菜单列表：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSPopUpButton</span> : <span class="title">NSButton</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Accessing the items</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;<span class="built_in">NSMenuItem</span> *&gt; *itemArray;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>) <span class="built_in">NSInteger</span> numberOfItems;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>也就是说，如果能获取到状态按钮对象的话，就能获取到菜单列表了。由图片可知，状态按钮在<code>MQAIOSelfInfoViewController2</code>视图控制器里。</p><p>用<code>class-dump</code>获取QQ的头文件，找到<code>MQAIOSelfInfoViewController2.h</code>，部分内容如下：</p><figure class="highlight objc"><figcaption><span>MQAIOSelfInfoViewController2.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MQAIOSelfInfoViewController2</span> : <span class="title">NSViewController</span> &lt;<span class="title">NSMenuDelegate</span>&gt;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> _status;</span><br><span class="line">    <span class="built_in">NSButton</span> *_avatarButton;</span><br><span class="line">    <span class="built_in">NSPopUpButton</span> *_statusPopUpButton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>可以看到该视图控制器有一个<code>_statusPopUpButton</code>属性，看名字基本可以肯定是状态按钮了。</p><p>那么我们可以hook该视图控制器的<code>viewDidLoad</code>方法，这时状态按钮已经创建完毕，通过遍历状态按钮的菜单列表，将每个菜单的<code>hidden</code>属性设为<code>NO</code>。</p><h3 id="二、创建插件工程"><a href="#二、创建插件工程" class="headerlink" title="二、创建插件工程"></a>二、创建插件工程</h3><p>按照<a href="/use-easysimbl-to-inject-plugins-to-mac-app.html">《使用EasySIMBL为Mac应用加载插件》</a>教程里的方法安装EasySIMBL模板，然后用Xcode新建一个EasySIMBL插件工程，工程名为<code>QQPlugin</code>：<br><img src="/assets/2016/09/macqq_project_options.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_project_options.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>然后hook<code>-[MQAIOSelfInfoViewController2 viewDidLoad]</code>方法，代码如下所示：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">MQAIOSelfInfoViewController2BusyStatus</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)busyStatus_MQAIOSelfInfoViewController2</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> jr_swizzleMethod:<span class="keyword">@selector</span>(viewDidLoad)</span><br><span class="line">                withMethod:<span class="keyword">@selector</span>(busyStatus_viewDidLoad)</span><br><span class="line">                     error:<span class="literal">NULL</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)busyStatus_viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> busyStatus_viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSPopUpButton</span> *popUpButton = [<span class="keyword">self</span> valueForKey:<span class="string">@&quot;_statusPopUpButton&quot;</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSMenuItem</span> *menuItem <span class="keyword">in</span> popUpButton.itemArray) &#123;</span><br><span class="line">        menuItem.hidden = <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>编译后重新运行QQ，已经可以看到忙碌状态菜单了：<br><img src="/assets/2016/09/macqq_has_busy_status.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_has_busy_status.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>选择忙碌状态后，登录另一个QQ查看我当前的状态，确实变成忙碌了：<br><img src="/assets/2016/09/macqq_show_busy_status.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_show_busy_status.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><h3 id="三、恢复发送图片功能"><a href="#三、恢复发送图片功能" class="headerlink" title="三、恢复发送图片功能"></a>三、恢复发送图片功能</h3><p>用<code>Interface Inspector</code>定位到聊天框的工具栏，一共有7个按钮，这些按钮都没有设置隐藏属性：<br><img src="/assets/2016/09/macqq_inspector_chat_toolbar.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_inspector_chat_toolbar.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>可以看到聊天界面的工具栏也是7个按钮：<br><img src="/assets/2016/09/macqq_no_picture_button.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_no_picture_button.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>也就是说，如果要增加发送图片的按钮的话，就只能自己创建一个新的按钮，再加到工具栏上面了。</p><p>至于点击按钮会调用什么方法，可以通过逆向旧版本的QQ来获得。下面介绍一种方法，可以比较快速获取到按钮调用的方法：</p><p>首先下载<code>4.x</code>版本的QQ，然后打开插件工程，按<kbd>command + shift + ,</kbd>快捷键打开<code>Edit scheme</code>界面，<code>Executable</code>那一项选择<code>4.x</code>版本QQ的路径：<br><img src="/assets/2016/09/macqq_edit_scheme.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_edit_scheme.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"><br>然后再按<kbd>command + R</kbd>运行插件工程，Xcode会自动运行QQ。</p><p>登录QQ后随便进入一个聊天窗口，接着在Xcode的debug工具栏里点击界面调试按钮：<br><img src="/assets/2016/09/macqq_xcode_debug_view_hierarchy.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_xcode_debug_view_hierarchy.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>当视图层次界面加载完毕之后，在层次界面里选中QQ聊天框工具栏的发送图片按钮：<br><img src="/assets/2016/09/macqq_view_hierarchy_toolbar.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_view_hierarchy_toolbar.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>在Xcode的右侧边栏可以看到该按钮的属性：<br><img src="/assets/2016/09/macqq_view_hierarchy_action.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_view_hierarchy_action.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"><br>可以看到按钮调用的方法是<code>-[MQAIOChatTootKitViewController onPicture:]</code>。</p><p>查看<code>MQAIOChatTootKitViewController.h</code>文件，可以看到如下方法：</p><figure class="highlight objc"><figcaption><span>MQAIOChatTootKitViewController.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MQAIOChatTootKitViewController</span> : <span class="title">NSViewController</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) MQFaceButton *faceBtn;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) TXHoverButton *grabBtn;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) TXHoverButton *shakeBtn;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) TXHoverButton *pictureBtn;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) TXHoverButton *historyBtn;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) TXHoverButton *disruptBtn;</span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">readonly</span>) MQSwitchButton *switchBtn;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)onFaceButtonClick;</span><br><span class="line">- (<span class="keyword">void</span>)onGrabScreen:(<span class="keyword">id</span>)arg1;</span><br><span class="line">- (<span class="keyword">void</span>)onShakeWindow:(<span class="keyword">id</span>)arg1;</span><br><span class="line">- (<span class="keyword">void</span>)onPicture:(<span class="keyword">id</span>)arg1;</span><br><span class="line">- (<span class="keyword">void</span>)onBlock:(<span class="keyword">id</span>)arg1;</span><br><span class="line">- (<span class="keyword">void</span>)onMsgRecord:(<span class="keyword">id</span>)arg1;</span><br><span class="line">- (<span class="keyword">void</span>)onClickSwitchButton:(<span class="keyword">id</span>)arg1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>可以猜想<code>pictureBtn</code>就是发送图片的按钮。</p><p>在<code>5.x</code>版QQ的头文件里也可以看到这些方法，把<code>5.x</code>版本QQ的可执行文件拖到Hopper里分析，然后查看<code>-[MQAIOChatTootKitViewController pictureBtn]</code>方法的伪代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> * -[MQAIOChatTootKitViewController pictureBtn](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd) &#123;</span><br><span class="line">    rbx = <span class="keyword">self</span>;</span><br><span class="line">    rax = rbx-&gt;_pictureBtn;</span><br><span class="line">    <span class="keyword">if</span> (rax == <span class="number">0x0</span>) &#123;</span><br><span class="line">            r12 = *_OBJC_IVAR_$_MQAIOChatTootKitViewController._pictureBtn;</span><br><span class="line">            r13 = *objc_msgSend;</span><br><span class="line">            rax = [rbx buttonOfClass:[TXHoverButton <span class="keyword">class</span>]];</span><br><span class="line">            rax = [rax <span class="keyword">retain</span>];</span><br><span class="line">            *(rbx + r12) = rax;</span><br><span class="line">            [rbx setConstraintsForButton:rax];</span><br><span class="line">            [*(rbx + r12) setTarget:rbx];</span><br><span class="line">            [*(rbx + r12) setAction:<span class="keyword">@selector</span>(onPicture:)];</span><br><span class="line">            [*(rbx + r12) setToolTip:[[<span class="built_in">NSBundle</span> mainBundle] localizedStringForKey:<span class="string">@&quot;Send pictures&quot;</span> value:<span class="string">@&quot;&quot;</span> table:<span class="number">0x0</span>]];</span><br><span class="line">            [*(rbx + r12) setNormalImage:[<span class="built_in">NSImage</span> imageNamed:<span class="string">@&quot;toolbar_pictures_normal&quot;</span>]];</span><br><span class="line">            [*(rbx + r12) setHoverImage:[<span class="built_in">NSImage</span> imageNamed:<span class="string">@&quot;toolbar_pictures_hover&quot;</span>]];</span><br><span class="line">            [*(rbx + r12) setAlternateImage:[<span class="built_in">NSImage</span> imageNamed:<span class="string">@&quot;toolbar_pictures_down&quot;</span>]];</span><br><span class="line">            rax = *(rbx + r12);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到该方法用懒加载的方式创建了一个按钮，也就是说代码还是保留的，只是没使用而已。那么我们可以先看其它按钮是怎么创建的，就看历史记录按钮好了。</p><p>按照<a href="/bulk-export-pseudo-code-in-hopper-disassembler.html">《Hopper Disassembler批量导出反编译的伪代码》</a>里的方法，反编译出<code>MQAIOChatTootKitViewController</code>类所有方法的伪代码。</p><p>打开<code>~/ClassDecompiles/QQ/MQAIOChatTootKitViewController.m</code>文件，搜索<code>historyBtn</code>，可以很快发现以下代码：</p><figure class="highlight objc"><figcaption><span>MQAIOChatTootKitViewController.m</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[MQAIOChatTootKitViewController setupUI:](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd, <span class="keyword">int</span> arg2) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">loc_100086744:</span><br><span class="line">    <span class="keyword">if</span> (LODWORD(r13) != <span class="number">0x80</span>) <span class="keyword">goto</span> loc_100086dad;</span><br><span class="line">    rax = (r12)(r15, <span class="keyword">@selector</span>(fileBtn));</span><br><span class="line">    r14 = var_A0;</span><br><span class="line">    (r12)(r14, <span class="keyword">@selector</span>(addSubview:), rax);</span><br><span class="line">    rax = (r12)(r15, <span class="keyword">@selector</span>(historyBtn));</span><br><span class="line">    (r12)(r14, <span class="keyword">@selector</span>(addSubview:), rax);</span><br><span class="line">    rsi = r15-&gt;_fileBtn;</span><br><span class="line">    rax = _NSDictionaryOfVariableBindings(<span class="string">@&quot;_fileBtn, _historyBtn&quot;</span>, rsi);</span><br><span class="line">    var_A8 = rax;</span><br><span class="line">    rax = (r12)(<span class="built_in">NSLayoutConstraint</span>, <span class="keyword">@selector</span>(constraintsWithVisualFormat:options:metrics:views:), <span class="string">@&quot;V:|-(top)-[_fileBtn]&quot;</span>, <span class="number">0x0</span>, var_98, rax);</span><br><span class="line">    (r12)(r14, <span class="keyword">@selector</span>(addConstraints:), rax);</span><br><span class="line">    rbx = (r12)(r15, <span class="keyword">@selector</span>(historyBtn));</span><br><span class="line">    rax = (r12)(r15, <span class="keyword">@selector</span>(fileBtn));</span><br><span class="line">    rax = (r12)(r15, <span class="keyword">@selector</span>(topAlignView:andView:), rbx, rax);</span><br><span class="line">    (r12)(r14, <span class="keyword">@selector</span>(addConstraint:), rax);</span><br><span class="line">    rdi = <span class="built_in">NSLayoutConstraint</span>;</span><br><span class="line">    rdx = <span class="string">@&quot;H:|-(leading)-[_fileBtn]-(gap1)-[_historyBtn]-(&gt;=gap3)-|&quot;</span>;</span><br><span class="line">    LODWORD(rcx) = <span class="number">0x0</span>;</span><br><span class="line">    rsi = <span class="keyword">@selector</span>(constraintsWithVisualFormat:options:metrics:views:);</span><br><span class="line">    r8 = var_98;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这些按钮是用自动布局的方法写的，因此可以考虑hook<code>-[MQAIOChatTootKitViewController setupUI:]</code>方法，在这些按钮添加完毕后，把发送图片的按钮加到最后面。</p><p>要先知道前面按钮的数量，才能计算出最后一个按钮的位置。考虑到不同的聊天框可能会出现不同数量的按钮，所以不能写死7个。那么怎么才能获取到这些按钮的数量呢？</p><p>看一下前面出现过的图片：<br><img src="/assets/2016/09/macqq_inspector_chat_toolbar.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_inspector_chat_toolbar.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"><br>可以看到这些按钮都是加在<code>MQEventForwardView</code>类的实例对象里的，在<code>MQAIOChatTootKitViewController.m</code>文件里搜索<code>MQEventForwardView</code>，可以发现以下代码：</p><figure class="highlight objc"><figcaption><span>MQAIOChatTootKitViewController.m</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> * -[MQAIOChatTootKitViewController init](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd) &#123;</span><br><span class="line">    var_28 = <span class="keyword">self</span>;</span><br><span class="line">    var_20 = *<span class="number">0x1011d6e70</span>;</span><br><span class="line">    r14 = <span class="keyword">@selector</span>(init);</span><br><span class="line">    rbx = [[var_28 <span class="keyword">super</span>] init];</span><br><span class="line">    <span class="keyword">if</span> (rbx != <span class="number">0x0</span>) &#123;</span><br><span class="line">            r15 = *objc_msgSend;</span><br><span class="line">            r14 = [[[MQEventForwardView alloc] init] autorelease];</span><br><span class="line">            [r14 setTranslatesAutoresizingMaskIntoConstraints:<span class="number">0x0</span>];</span><br><span class="line">            [r14 setDelegate:rbx];</span><br><span class="line">            [rbx setView:r14];</span><br><span class="line">            MQRegisterNotificationInMainThread(<span class="string">@&quot;kMQGroupEventNotification+weqe&quot;</span>, rbx, <span class="keyword">@selector</span>(handleGroupEventNotification:));</span><br><span class="line">            MQRegisterNotificationInMainThread(<span class="string">@&quot;kMQDiscussEventNotification+dfsdf&quot;</span>, rbx, <span class="keyword">@selector</span>(handleDiscussEventNotification:));</span><br><span class="line">            MQRegisterNotificationInMainThread(<span class="string">@&quot;kMQContactIMInfoEvtNotification&quot;</span>, rbx, <span class="keyword">@selector</span>(handleIMInfoEventNotification:));</span><br><span class="line">    &#125;</span><br><span class="line">    rax = rbx;</span><br><span class="line">    <span class="keyword">return</span> rax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，当试图控制器初始化的时候，就将<code>MQEventForwardView</code>实例对象赋值给了<code>view</code>属性。那么使用<code>self.view.subviews.count</code>方法就能获取到按钮的数量了。</p><p>最后的示例代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">MQAIOChatTootKitViewControllerSendPicture</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)sendPicture_MQAIOChatTootKitViewController</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> jr_swizzleMethod:<span class="keyword">@selector</span>(setupUI:)</span><br><span class="line">                withMethod:<span class="keyword">@selector</span>(sendPicture_setupUI:)</span><br><span class="line">                     error:<span class="literal">NULL</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)sendPicture_setupUI:(<span class="keyword">int</span>)arg1</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> sendPicture_setupUI:arg1];</span><br><span class="line">    </span><br><span class="line">    MQAIOChatTootKitViewController *vc = (MQAIOChatTootKitViewController *)<span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSInteger</span> buttonCount = vc.view.subviews.count;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSButton</span> *pictureBtn = (<span class="built_in">NSButton</span> *)vc.pictureBtn;</span><br><span class="line">    [vc.view addSubview:pictureBtn];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSDictionary</span> *metrics = @&#123;</span><br><span class="line">        <span class="string">@&quot;left&quot;</span> : @(<span class="number">20</span> + buttonCount * <span class="number">40</span>),</span><br><span class="line">        <span class="string">@&quot;top&quot;</span>  : @(<span class="number">10</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *views = <span class="built_in">NSDictionaryOfVariableBindings</span>(pictureBtn);</span><br><span class="line">    </span><br><span class="line">    [vc.view addConstraints:[<span class="built_in">NSLayoutConstraint</span> constraintsWithVisualFormat:<span class="string">@&quot;H:|-left-[pictureBtn]&quot;</span></span><br><span class="line">                                                                    options:<span class="number">0</span></span><br><span class="line">                                                                    metrics:metrics</span><br><span class="line">                                                                      views:views]];</span><br><span class="line">    [vc.view addConstraints:[<span class="built_in">NSLayoutConstraint</span> constraintsWithVisualFormat:<span class="string">@&quot;V:|-top-[pictureBtn]&quot;</span></span><br><span class="line">                                                                    options:<span class="number">0</span></span><br><span class="line">                                                                    metrics:metrics</span><br><span class="line">                                                                      views:views]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>编译后重启QQ，可以看到出现了发送图片按钮：<br><img src="/assets/2016/09/macqq_has_picture_button.png" class="lazyload placeholder" data-srcset="/assets/2016/09/macqq_has_picture_button.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"><br>点击后也确实可以发送图片了。</p><p>插件工程可以在<a href="https://github.com/poboke/EasySIMBL-Bundle-Template/tree/master/Samples/QQPlugin">QQPlugin</a>下载。</p><p>很惭愧，就做了一点微小的工作，谢谢大家。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;零、前言&quot;&gt;&lt;a href=&quot;#零、前言&quot; class=&quot;headerlink&quot; title=&quot;零、前言&quot;&gt;&lt;/a&gt;零、前言&lt;/h3&gt;&lt;p&gt;最近使用Mac版QQ时弹出了一个版本更新提示，说最新版&lt;code&gt;v5.1.2&lt;/code&gt;正式版已在官网发布，于是我便更新</summary>
      
    
    
    
    <category term="学习园地" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/"/>
    
    <category term="逆向工程" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="iOS" scheme="https://www.poboke.com/tags/iOS/"/>
    
    <category term="Mac" scheme="https://www.poboke.com/tags/Mac/"/>
    
    <category term="逆向" scheme="https://www.poboke.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>逆向Mac版扫雷游戏</title>
    <link href="https://www.poboke.com/crack-minesweeper-game-for-mac.html"/>
    <id>https://www.poboke.com/crack-minesweeper-game-for-mac.html</id>
    <published>2016-04-12T15:43:17.000Z</published>
    <updated>2021-08-31T16:32:25.716Z</updated>
    
    <content type="html"><![CDATA[<p>Mac App Store有一个扫雷的游戏，免费版只能玩初级和中级的级别，像我这种骨灰级玩家，肯定要玩高级级别的：<br><img src="/assets/2016/04/minesweeper_menu_hight_level.png" class="lazyload placeholder" data-srcset="/assets/2016/04/minesweeper_menu_hight_level.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>不过一点击 <kbd>高级</kbd> 菜单按钮，就会提示让我购买游戏，贫穷的我只能逆向一下这个app。</p><h3 id="一、破解游戏级别限制"><a href="#一、破解游戏级别限制" class="headerlink" title="一、破解游戏级别限制"></a>一、破解游戏级别限制</h3><p>首先运行<a href="http://www.interface-inspector.com/">Interface Inspector</a>，这是一个可以查看Mac应用界面元素结构和属性的软件，功能非常强大，运行后附加上扫雷的进程：<br><img src="/assets/2016/04/minesweeper_attach_application.png" class="lazyload placeholder" data-srcset="/assets/2016/04/minesweeper_attach_application.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>然后展开菜单 <kbd>游戏</kbd> –&gt; <kbd>新游戏</kbd> –&gt; <kbd>高级</kbd> ，在右边侧边栏可以看到 <kbd>高级</kbd> 菜单栏对象的内存地址是<code>0x101331130</code>：<br><img src="/assets/2016/04/minesweeper_inspector_hight_level.png" class="lazyload placeholder" data-srcset="/assets/2016/04/minesweeper_inspector_hight_level.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>接下来用lldb附加扫雷的进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Jobs: ~$ lldb -n &quot;Minesweeper Deluxe&quot;</span><br><span class="line">(lldb) process attach --name &quot;Minesweeper Deluxe&quot;</span><br><span class="line">Process 37343 stopped</span><br><span class="line">* thread #1: tid = 0x2b091, 0x00007fff8499cf72 libsystem_kernel.dylib`mach_msg_trap + 10, queue = &#x27;com.apple.main-thread&#x27;, stop reason = signal SIGSTOP</span><br><span class="line">    frame #0: 0x00007fff8499cf72 libsystem_kernel.dylib`mach_msg_trap + 10</span><br><span class="line">libsystem_kernel.dylib`mach_msg_trap:</span><br><span class="line"><span class="meta">-&gt;</span><span class="bash">  0x7fff8499cf72 &lt;+10&gt;: retq</span></span><br><span class="line">    0x7fff8499cf73 &lt;+11&gt;: nop</span><br><span class="line"></span><br><span class="line">libsystem_kernel.dylib`mach_msg_overwrite_trap:</span><br><span class="line">    0x7fff8499cf74 &lt;+0&gt;:  movq   %rcx, %r10</span><br><span class="line">    0x7fff8499cf77 &lt;+3&gt;:  movl   $0x1000020, %eax          ; imm = 0x1000020</span><br><span class="line"></span><br><span class="line">Executable module set to &quot;/Applications/Minesweeper Deluxe.app/Contents/MacOS/Minesweeper Deluxe&quot;.</span><br><span class="line">Architecture set to: x86_64h-apple-macosx.</span><br><span class="line">(lldb) </span><br></pre></td></tr></table></figure><p>然后使用以下命令获取点击菜单按钮时调用的方法名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po 0x101331130</span><br><span class="line">&lt;NSMenuItem: 0x101331130 高级&gt;</span><br><span class="line"></span><br><span class="line">(lldb) po [0x101331130 target]</span><br><span class="line">&lt;minesweepermacAppDelegate: 0x1013353c0&gt;</span><br><span class="line"></span><br><span class="line">(lldb) po [0x101331130 action]</span><br><span class="line">0x0000000100088db1</span><br><span class="line"></span><br><span class="line">(lldb) po NSStringFromSelector(0x0000000100088db1)</span><br><span class="line">startNewGameExpert:</span><br></pre></td></tr></table></figure><p>由此可知，点击菜单按钮会调用<code>-[minesweepermacAppDelegate startNewGameExpert:]</code>方法，用Hopper可以看到该方法的伪代码为：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[minesweepermacAppDelegate startNewGameExpert:](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd, <span class="keyword">void</span> * arg2) &#123;</span><br><span class="line">    rdx = arg2;</span><br><span class="line">    rbx = <span class="keyword">self</span>;</span><br><span class="line">    r14 = *objc_msgSend;</span><br><span class="line">    [<span class="keyword">self</span> dismissLeaderboardView];</span><br><span class="line">    rax = [GameState sharedInstance];</span><br><span class="line">    rax = [rax fullgame];</span><br><span class="line">    <span class="keyword">if</span> (LOBYTE(rax) != <span class="number">0x0</span>) &#123;</span><br><span class="line">            r14 = *objc_msgSend;</span><br><span class="line">            rax = [GameState sharedInstance];</span><br><span class="line">            [rax setDifficulty:<span class="number">0x2</span>];</span><br><span class="line">            rax = [GameState sharedInstance];</span><br><span class="line">            [rax save];</span><br><span class="line">            [rbx-&gt;beginner setState:<span class="number">0x0</span>];</span><br><span class="line">            [rbx-&gt;intermediate setState:<span class="number">0x0</span>];</span><br><span class="line">            [rbx-&gt;expert setState:<span class="number">0x1</span>];</span><br><span class="line">            [rbx-&gt;custom setState:<span class="number">0x0</span>];</span><br><span class="line">            r15 = *objc_ivar_offset_minesweepermacAppDelegate_window_;</span><br><span class="line">            [*(rbx + r15) setIsVisible:<span class="number">0x0</span>];</span><br><span class="line">            xmm0 = intrinsic_xorps(xmm0, xmm0);</span><br><span class="line">            rdi = *(rbx + r15);</span><br><span class="line">            var_40 = intrinsic_movaps(var_40, xmm0);</span><br><span class="line">            var_30 = <span class="number">0x408d100000000000</span>;</span><br><span class="line">            var_28 = <span class="number">0x4082800000000000</span>;</span><br><span class="line">            [rdi setFrame:<span class="number">0x1</span> display:<span class="number">0x0</span> animate:r8];</span><br><span class="line">            [*(rbx + r15) center];</span><br><span class="line">            rax = [GameManager sharedGameManager];</span><br><span class="line">            [rax runSceneWithID:<span class="number">0x65</span>];</span><br><span class="line">            rax = [*(rbx + r15) setIsVisible:<span class="number">0x1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">            rax = [rbx unlockFullgame:<span class="number">0x0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由代码可知，当<code>-[GameState fullgame]</code>方法的返回值为<code>YES</code>的时候，才可以玩高级级别的游戏。<br>所以可以编写一个插件来hook这个方法，强制返回<code>YES</code>值。</p><p>按照<a href="/use-easysimbl-to-inject-plugins-to-mac-app.html">《使用EasySIMBL为Mac应用加载插件》</a>教程里的方法安装EasySIMBL模板，然后用Xcode新建一个EasySIMBL插件工程，工程名为<code>MinesweeperPlugin</code>：<br><img src="/assets/2016/04/minesweeper_project_options.png" class="lazyload placeholder" data-srcset="/assets/2016/04/minesweeper_project_options.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>然后hook<code>-[GameState fullgame]</code>方法，代码如下所示：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">GameStateHook</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)hook_GameState</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> jr_swizzleMethod:<span class="keyword">@selector</span>(fullgame)</span><br><span class="line">                withMethod:<span class="keyword">@selector</span>(hook_fullgame)</span><br><span class="line">                     error:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)hook_fullgame</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>编译代码后重新运行游戏，就可以进入高级级别游戏了。</p><h3 id="二、破解安全帽数量"><a href="#二、破解安全帽数量" class="headerlink" title="二、破解安全帽数量"></a>二、破解安全帽数量</h3><p>扫雷的菜单里还有一个购买安全帽的功能：<br><img src="/assets/2016/04/minesweeper_menu_5_safety_hat.png" class="lazyload placeholder" data-srcset="/assets/2016/04/minesweeper_menu_5_safety_hat.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>在帮助里可以看到安全帽的说明：</p><blockquote><p>使用安全帽</p><p>==========</p><p>使用 “<kbd>Alt</kbd> / <kbd>Option</kbd> + 左键点击” 可以保证安全。如果方块下面是雷会被插棋，如果下面不是雷会正常打开。每次会用掉一个安全帽。游戏中随时按下 “<kbd>Alt</kbd> / <kbd>Option</kbd>“ 键可以看安全帽数量。安全帽用完了可以在商店菜单中添加，也可以通过分享你的成绩获得免费安全帽。</p></blockquote><p>虽然我玩扫雷时不会使用这种作弊的功能，但是在某些情况下还是有用的。比如有时玩到最后会出现2选1的情况，这时如果靠运气点到地雷就太亏了，所以安全帽可以在这种情况下使用。那么顺便把安全帽的数量修改成无限吧。</p><p>同理，在<code>Interface Inspector</code>里查看购买5个安全帽的菜单地址：<br><img src="/assets/2016/04/minesweeper_inspector_5_safety_hat.png" class="lazyload placeholder" data-srcset="/assets/2016/04/minesweeper_inspector_5_safety_hat.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>再获取菜单调用的方法名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po 0x10112c2c0</span><br><span class="line">&lt;NSMenuItem: 0x10112c2c0 5个安全帽&gt;</span><br><span class="line"></span><br><span class="line">(lldb) po [0x10112c2c0 target]</span><br><span class="line">&lt;minesweepermacAppDelegate: 0x10122b630&gt;</span><br><span class="line"></span><br><span class="line">(lldb) po [0x10112c2c0 action]</span><br><span class="line">0x00000001000893a1</span><br><span class="line"></span><br><span class="line">(lldb) po NSStringFromSelector(0x00000001000893a1)</span><br><span class="line">buy5Robot:</span><br></pre></td></tr></table></figure><p>在Hopper里查看<code>-[minesweepermacAppDelegate buy5Robot:]</code>方法的伪代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[minesweepermacAppDelegate buy5Robot:](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd, <span class="keyword">void</span> * arg2) &#123;</span><br><span class="line">    rbx = *objc_msgSend;</span><br><span class="line">    [<span class="keyword">self</span> dismissLeaderboardView];</span><br><span class="line">    rdi = [InAppPurchaseManager getInstance];</span><br><span class="line">    rax = [rdi purchase5robot];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再查看<code>-[InAppPurchaseManager purchase5robot]</code>方法的伪代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[InAppPurchaseManager purchase5robot](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    r15 = *(var_68 + r14 * <span class="number">0x8</span>);</span><br><span class="line">    rax = [r15 productIdentifier];</span><br><span class="line">    rax = [rax isEqualToString:<span class="string">@&quot;com.sg.minesweepermac.robot5&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (LOBYTE(rax) != <span class="number">0x0</span>) &#123;</span><br><span class="line">            r12 = *objc_msgSend;</span><br><span class="line">            rbx = [<span class="built_in">SKPayment</span> paymentWithProduct:r15];</span><br><span class="line">            rax = [<span class="built_in">SKPaymentQueue</span> defaultQueue];</span><br><span class="line">            [rax addPayment:rbx];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码可知，购买的产品的id是<code>com.sg.minesweepermac.robot5</code>。</p><p>由<a href="http://bbs.iosre.com/t/iap/1353">《一种应用内付费(iap)的破解方法》</a>可知，内购的回调方法为<code>paymentQueue:updatedTransactions:</code>，在Hopper里搜一下这个方法，可以发现这个方法在<code>InAppPurchaseManager</code>类里。</p><p>接下来使用<a href="/bulk-export-pseudo-code-in-hopper-disassembler.html">《Hopper Disassembler批量导出反编译的伪代码》</a>里的方法，反编译出<code>InAppPurchaseManager</code>类所有方法的伪代码。<br>打开<code>~/ClassDecompiles/Minesweeper Deluxe/InAppPurchaseManager.m</code>文件，搜索<code>com.sg.minesweepermac.robot5</code>，可以很快发现以下代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)provideContent:(<span class="keyword">id</span>)arg2 </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    rax = [r14 isEqualToString:<span class="string">@&quot;com.sg.minesweepermac.robot5&quot;</span>];</span><br><span class="line">    LODWORD(r13) = <span class="number">0x5</span>;</span><br><span class="line">    <span class="keyword">if</span> (LOBYTE(rax) == <span class="number">0x0</span>) &#123;</span><br><span class="line">            rax = [r14 isEqualToString:<span class="string">@&quot;com.sg.minesweepermac.robot15&quot;</span>];</span><br><span class="line">            LODWORD(r13) = <span class="number">0xf</span>;</span><br><span class="line">            <span class="keyword">if</span> (LOBYTE(rax) == <span class="number">0x0</span>) &#123;</span><br><span class="line">                    rax = [r14 isEqualToString:<span class="string">@&quot;com.sg.minesweepermac.robot30&quot;</span>];</span><br><span class="line">                    LODWORD(r13) = <span class="number">0x1e</span>;</span><br><span class="line">                    <span class="keyword">if</span> (LOBYTE(rax) == <span class="number">0x0</span>) &#123;</span><br><span class="line">                            rax = [r14 isEqualToString:<span class="string">@&quot;com.sg.minesweepermac.robot60&quot;</span>];</span><br><span class="line">                            LODWORD(r13) = <span class="number">0x3c</span>;</span><br><span class="line">                            <span class="keyword">if</span> (LOBYTE(rax) == <span class="number">0x0</span>) &#123;</span><br><span class="line">                                    rax = [r14 isEqualToString:<span class="string">@&quot;com.sg.minesweepermac.robot90&quot;</span>];</span><br><span class="line">                                    LODWORD(r13) = <span class="number">0x5a</span>;</span><br><span class="line">                                    <span class="keyword">if</span> (LOBYTE(rax) == <span class="number">0x0</span>) &#123;</span><br><span class="line">                                            LODWORD(r13) = LODWORD(<span class="number">0x0</span>);</span><br><span class="line">                                    &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rbx = *objc_msgSend;</span><br><span class="line">    LODWORD(r15) = LODWORD([[GameState sharedInstance] robot]);</span><br><span class="line">    rax = [GameState sharedInstance];</span><br><span class="line">    [rax setRobot:LODWORD(LODWORD(r15) + LODWORD(r13))];</span><br><span class="line">    rax = [GameState sharedInstance];</span><br><span class="line">    [rax save];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，购买成功后通过不同的产品id来增加不同的安全帽数量，然后通过<code>-[GameState setRobot:]</code>方法保存安全帽的数量。<br>也就是说，属性<code>robot</code>储存了安全帽的数量，如果hook了<code>-[GameState robot]</code>方法，返回999个安全帽的话，就有用不完的安全帽了。</p><p>参考代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">GameStateHook</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)hook_GameState</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> jr_swizzleMethod:<span class="keyword">@selector</span>(robot)</span><br><span class="line">                withMethod:<span class="keyword">@selector</span>(hook_robot)</span><br><span class="line">                     error:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">int</span>)hook_robot</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>具体工程代码可以在<a href="https://github.com/poboke/EasySIMBL-Bundle-Template/tree/master/Samples/MinesweeperPlugin">MinesweeperPlugin</a>下载。</p><p>编译工程后，重新运行扫雷，安全帽的数量也变成了999个了：<br><img src="/assets/2016/04/minesweeper_999_safety_hat.png" class="lazyload placeholder" data-srcset="/assets/2016/04/minesweeper_999_safety_hat.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Mac App Store有一个扫雷的游戏，免费版只能玩初级和中级的级别，像我这种骨灰级玩家，肯定要玩高级级别的：&lt;br&gt;&lt;img src=&quot;/assets/2016/04/minesweeper_menu_hight_level.png&quot; class=&quot;lazyload </summary>
      
    
    
    
    <category term="学习园地" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/"/>
    
    <category term="逆向工程" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="iOS" scheme="https://www.poboke.com/tags/iOS/"/>
    
    <category term="Mac" scheme="https://www.poboke.com/tags/Mac/"/>
    
    <category term="Objective-C" scheme="https://www.poboke.com/tags/Objective-C/"/>
    
    <category term="逆向" scheme="https://www.poboke.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Hopper Disassembler批量导出反编译的伪代码</title>
    <link href="https://www.poboke.com/bulk-export-pseudo-code-in-hopper-disassembler.html"/>
    <id>https://www.poboke.com/bulk-export-pseudo-code-in-hopper-disassembler.html</id>
    <published>2016-04-11T15:30:04.000Z</published>
    <updated>2021-08-15T12:33:26.679Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容节选自《iOS应用逆向工程》：</p><blockquote><p>逆向工程最受欢迎的应用场合就是“借鉴”他人的软件功能。</p><p>在App Store里面，有不少优秀的App。当我们不知道App中的某个功能是如何实现的时候，逆向工程就能起到关键性的作用，此时使用iOS逆向工程技术就能够对它了解一二。</p><p>有些老牌软件的架构设计合理，代码工整规范，实现得非常优雅。我们没有他们那样深厚的技术功底和人才储备，想要借鉴他们使用的高级技术，却又求学无门。在这种情况下，逆向工程就是解决问题的金钥匙。通过逆向那些软件，可以从App中把它们的设计思路抽象出来为我所用，从而提高自己App的精致程度。比如，WhatsApp的稳定性、健壮性出类拔萃，如果我们自己要编写一个IM类App，通过逆向工程技术学习WhatsApp的整体架构与设计思路将是非常有益的。</p></blockquote><h3 id="一、功能介绍"><a href="#一、功能介绍" class="headerlink" title="一、功能介绍"></a>一、功能介绍</h3><p>想要了解app的功能是怎么实现的，最简单的方法就是反编译了。<br>所幸的是，<a href="http://www.hopperapp.com/">Hopper Disassembler</a>提供了反编译功能，能够将汇编代码转成伪代码。</p><p>想要使用这个功能的话，要先把光标定位到某个函数的汇编代码里：<br><img src="/assets/2016/04/decompile_assembly_code.png" class="lazyload placeholder" data-srcset="/assets/2016/04/decompile_assembly_code.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>然后点击菜单的 <kbd>Window</kbd> –&gt; <kbd>Show Pseudo Code Of Procedure</kbd> 选项，就会弹出一个伪代码窗口：<br><img src="/assets/2016/04/decompile_pseudo_code.png" class="lazyload placeholder" data-srcset="/assets/2016/04/decompile_pseudo_code.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>这个功能虽然强大，但是每次只能反编译一个函数，并不支持批量生成伪代码。<br>不过Hopper内置了一个Python解析器（这背后一定有肮脏的Python交易），所以我们可以编写Python脚本来实现这个功能。</p><p>打开Hopper的帮助文件<code>/Applications/Hopper Disassembler v3.app/Contents/Resources/Hopper.help</code>，会出现一个窗口：<br><img src="/assets/2016/04/decompile_help.png" class="lazyload placeholder" data-srcset="/assets/2016/04/decompile_help.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>点击<code>Scripting Reference</code>选项，可以看到Hopper提供的类和方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Class Tag</span><br><span class="line">    getName</span><br><span class="line"></span><br><span class="line">Class Procedure</span><br><span class="line">    addTag</span><br><span class="line">    decompile</span><br><span class="line">    getBasicBlock</span><br><span class="line">    getBasicBlockAtAddress</span><br><span class="line">    getBasicBlockCount</span><br><span class="line">    getEntryPoint</span><br><span class="line">    getHeapSize</span><br><span class="line">    getTagAtIndex</span><br><span class="line">    getTagCount</span><br><span class="line">    getTagList</span><br><span class="line">    hasTag</span><br><span class="line">    removeTag</span><br><span class="line">    tagIterator</span><br><span class="line"></span><br><span class="line">//......</span><br></pre></td></tr></table></figure><p>搜索关键字<code>Pseudo</code>，可以发现以反编译的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">decompile()</span><br><span class="line"></span><br><span class="line">    Returns a string containing the pseudo-code of the procedure, or None if the decompilation is not possible.</span><br></pre></td></tr></table></figure><p>既然Hopper提供了这个方法，那么实现批量导出伪代码的功能就不难了。</p><p>由于代码比较长，所以放在Github里，具体代码可以在<a href="https://github.com/poboke/Class-Decompile">https://github.com/poboke/Class-Decompile</a>下载。</p><h3 id="二、使用方法"><a href="#二、使用方法" class="headerlink" title="二、使用方法"></a>二、使用方法</h3><p>1、将下载的<code>Class Decompile.py</code>文件放到<code>~/Library/Application Support/Hopper/Scripts</code>目录里。</p><p>2、将可执行文件拖到Hopper里，等待分析完成。如果日志框里出现以下文字，就说明分析完成了：</p><blockquote><p>Analysis segment __LINKEDIT</p><p>Analysis segment External Symbols</p><p>Background analysis ended</p></blockquote><p>3、点击菜单 <kbd>Scripts</kbd> –&gt; <kbd>Class Decompile</kbd> ：<br><img src="/assets/2016/04/decompile_menu.png" class="lazyload placeholder" data-srcset="/assets/2016/04/decompile_menu.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>4、Hopper会出现一个弹框，可以选择反编译类型：<br><img src="/assets/2016/04/decompile_choose_type.png" class="lazyload placeholder" data-srcset="/assets/2016/04/decompile_choose_type.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><ul><li><kbd>Decompile All Classes</kbd> : 反编译所有类</li><li><kbd>Decompile One Class</kbd> : 反编译单个类</li><li><kbd>Cancel</kbd> : 取消</li></ul><p>5、如果选择反编译单个类的话，会出现以下弹框：<br><img src="/assets/2016/04/decompile_input_class_name.png" class="lazyload placeholder" data-srcset="/assets/2016/04/decompile_input_class_name.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"><br>输入某个类名后，点击 <kbd>OK</kbd> 按钮就可以反编译出该类的伪代码。</p><p>6、反编译出来的伪代码保存在<code>~/ClassDecompiles</code>目录里。</p><p>7、打开反编译的文件，例如<code>CalculatorController.m</code>，可以看到生成的伪代码：</p><figure class="highlight objc"><figcaption><span>CalculatorController.m</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CalculatorController</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)clearRecentConversionsMenu:(<span class="keyword">id</span>)arg2 </span><br><span class="line">&#123;</span><br><span class="line">    rdi = <span class="keyword">self</span>-&gt;_conversionController;</span><br><span class="line">    r14 = *objc_msgSend;</span><br><span class="line">    [rdi clearRecentConversions];</span><br><span class="line">    rax = [<span class="keyword">self</span> updateRecentConversionsMenu];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)openExpressionSyntaxHelp:(<span class="keyword">id</span>)arg2 </span><br><span class="line">&#123;</span><br><span class="line">    r14 = *objc_msgSend;</span><br><span class="line">    rbx = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@&quot;ExpressionSyntax&quot;</span> ofType:<span class="string">@&quot;rtf&quot;</span>];</span><br><span class="line">    rdi = [<span class="built_in">NSWorkspace</span> sharedWorkspace];</span><br><span class="line">    rdx = rbx;</span><br><span class="line">    rax = [rdi openFile:rdx];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以下内容节选自《iOS应用逆向工程》：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;逆向工程最受欢迎的应用场合就是“借鉴”他人的软件功能。&lt;/p&gt;
&lt;p&gt;在App Store里面，有不少优秀的App。当我们不知道App中的某个功能是如何实现的时候，逆向工程就能起到关键性的作用，</summary>
      
    
    
    
    <category term="学习园地" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/"/>
    
    <category term="逆向工程" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="Python" scheme="https://www.poboke.com/tags/Python/"/>
    
    <category term="逆向" scheme="https://www.poboke.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>微信自动摇一摇刷一分钱</title>
    <link href="https://www.poboke.com/wechat-auto-shake-to-get-money-on-new-years-eve.html"/>
    <id>https://www.poboke.com/wechat-auto-shake-to-get-money-on-new-years-eve.html</id>
    <published>2016-03-03T15:33:23.000Z</published>
    <updated>2021-08-15T12:34:56.067Z</updated>
    
    <content type="html"><![CDATA[<p>除夕打开微信摇一摇抢红包，红包雨还没开始时，会显示如下界面：<br><img src="/assets/2016/03/shake_notice_vc.png" class="lazyload placeholder" data-srcset="/assets/2016/03/shake_notice_vc.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>底部圆形的logo在不停地跳动，点击一下，居然领到了一分钱：<br><img src="/assets/2016/03/shake_get_money.png" class="lazyload placeholder" data-srcset="/assets/2016/03/shake_get_money.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>如果不断摇一摇再点击logo，就可以领到很多一分钱。不过手动操作太麻烦了，所以写了个<code>tweak</code>插件来自动领取。</p><p><strong>插件要做的操作大概如下：</strong></p><ol><li>在摇一摇界面，插件自动调用摇一摇的方法。</li><li>进入红包详情界面后，插件自动点击图标领钱。</li><li>领完钱后，插件自动退出红包详情界面，回到摇一摇界面。</li><li>重复步骤1。</li></ol><p>当前的微信版本是<code>6.3.10</code>，iOS设备是越狱后的<code>iPad mini 2</code>。<br>这个插件的功能算是很简单的，下面就说一下编写插件的过程：</p><h3 id="一、获取微信的头文件"><a href="#一、获取微信的头文件" class="headerlink" title="一、获取微信的头文件"></a>一、获取微信的头文件</h3><p>使用<a href="https://github.com/nygard/class-dump">class-dump</a>可以获取微信的头文件。</p><p>解压<code>微信.ipa</code>，将<code>Payload/WeChat.app/WeChat</code>这个可执行文件拷贝出来，然后在终端执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class-dump -sSH WeChat -o WeChatHeaders</span><br></pre></td></tr></table></figure><p>在生成的<code>WeChatHeaders</code>文件夹里可以看到微信的所有类的头文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── ABNewPersonViewControllerDelegate-Protocol.h</span><br><span class="line">├── ABPeoplePickerNavigationControllerDelegate-Protocol.h</span><br><span class="line">├── ABTestItem.h</span><br><span class="line">├── ABtestCase.h</span><br><span class="line">├── ABtestMgr.h</span><br><span class="line">├── ABtestPoint.h</span><br><span class="line">├── ABtestPointPeriod.h</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="二、自动摇一摇"><a href="#二、自动摇一摇" class="headerlink" title="二、自动摇一摇"></a>二、自动摇一摇</h3><p>首先进入摇一摇界面：<br><img src="/assets/2016/03/shake_shake_vc.png" class="lazyload placeholder" data-srcset="/assets/2016/03/shake_shake_vc.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>使用<a href="http://revealapp.com/">Reveal</a>查看视图控制器的类名：<br><img src="/assets/2016/03/shake_reveal_shake_vc.png" class="lazyload placeholder" data-srcset="/assets/2016/03/shake_reveal_shake_vc.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>然后在微信头文件里找到<code>NewYearShakeViewController.h</code>，搜索关键字<code>shake</code>，可以搜到一个方法：<code>- (void)OnShake;</code>。</p><p>用电脑打开终端远程连接到iPad，再用<a href="http://www.cycript.org/">Cycript</a>附加微信，调用<code>OnShake</code>方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Jobs: ~$ ssh root@remoteip</span><br><span class="line"></span><br><span class="line">Jobss-iPad:~ root# cycript -p WeChat</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">cy#</span><span class="bash"> [<span class="comment">#0x1457f95b0 OnShake]</span></span></span><br></pre></td></tr></table></figure><p>执行命令后界面果然自动摇一摇了，并且跳到了红包详情界面。</p><h3 id="三、自动领RMB"><a href="#三、自动领RMB" class="headerlink" title="三、自动领RMB"></a>三、自动领RMB</h3><p>在红包详情界面，用Reveal可以看到logo是一个按钮：<br><img src="/assets/2016/03/shake_reveal_animation_button.png" class="lazyload placeholder" data-srcset="/assets/2016/03/shake_reveal_animation_button.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>在Cycript中使用以下方法可以获取点击按钮时调用的方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">cy#</span><span class="bash"> button = <span class="comment">#0x1468358f0</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">&quot;&lt;ImagesAnimationButton: 0x1468358f0; baseClass = UIButton; frame = (364 0; 40 40); opaque = NO; layer = &lt;CALayer: 0x174439640&gt;&gt;&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">cy#</span><span class="bash"> button.allTargets()</span></span><br><span class="line">[NSSet setWithArray:@[#&quot;&lt;NewYearShakeInteractiveLogoView: 0x1468c6d50; frame = (0 930; 768 94); layer = &lt;CALayer: 0x174622e40&gt;&gt;&quot;]]]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">cy#</span><span class="bash"> target = <span class="comment">#0x1468c6d50</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="string">&quot;&lt;NewYearShakeInteractiveLogoView: 0x1468c6d50; frame = (0 930; 768 94); layer = &lt;CALayer: 0x174622e40&gt;&gt;&quot;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">cy#</span><span class="bash"> [button actionsForTarget:target forControlEvent:UIControlEventTouchUpInside]</span></span><br><span class="line">@[&quot;onClickLogoButton:&quot;]</span><br></pre></td></tr></table></figure><p>可以看到，点击按钮时会调用<code>[NewYearShakeInteractiveLogoView onClickLogoButton:]</code>方法。<br>可以在<code>NewYearShakeInteractiveLogoView</code>初始化后调用点击按钮的方法，就可以实现自动领取了。<br>这个方法需要传入按钮对象作为参数，在<code>NewYearShakeInteractiveLogoView.h</code>里可以看到按钮是一个成员变量<code>ImagesAnimationButton *m_logoView;</code>，所以可以通过<code>[self valueForKey:@&quot;m_logoView&quot;]</code>方法获取按钮对象。</p><h3 id="四、自动退出红包详情界面"><a href="#四、自动退出红包详情界面" class="headerlink" title="四、自动退出红包详情界面"></a>四、自动退出红包详情界面</h3><p>领到钱后需要退出当前界面，才能继续重新摇一摇。<br>而点击按钮时会出现金币旋转的动画，然后请求网络领取RMB，领到RMB后再结束动画，也就是说动画执行的时间可能不是固定的。<br>如果能找到结束动画的方法的话，通过hook这个方法，就可以在动画结束后退出当前界面了。</p><p>用<code>Hopper Disassembler</code>反编译微信的可执行程序，搜索<code>NewYearShakeInteractiveLogoView onClickLogoButton</code>，按 <kbd>alt + enter</kbd> 生成伪代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[NewYearShakeInteractiveLogoView onClickLogoButton:](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd, <span class="keyword">void</span> * arg2) &#123;</span><br><span class="line">    r2 = arg2;</span><br><span class="line">    r0 = <span class="keyword">self</span>;</span><br><span class="line">    r1 = <span class="keyword">@selector</span>(onClickLogoEvent);</span><br><span class="line">    r0 = loc_1c0d0d4(r0, r1, r2);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到调用了<code>onClickLogoEvent</code>方法，查看该方法的伪代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[NewYearShakeInteractiveLogoView onClickLogoEvent](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd) &#123;</span><br><span class="line">    r7 = &amp;arg_4;</span><br><span class="line">    r4 = <span class="keyword">self</span>;</span><br><span class="line">    r1 = r4-&gt;m_hasClickLogo;</span><br><span class="line">    <span class="keyword">asm</span>&#123; it         ne &#125;;</span><br><span class="line">    <span class="keyword">if</span> (r1 != <span class="number">0x0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    r0 = *objc_ivar_offset_NewYearShakeInteractiveLogoView_m_hasClickLogo;</span><br><span class="line">    *(int8_t *)(r4 + r0) = <span class="number">0x1</span>;</span><br><span class="line">    r0 = *objc_ivar_offset_NewYearShakeInteractiveLogoView_m_logoView;</span><br><span class="line">    r0 = *(r4 + r0);</span><br><span class="line">    loc_e0a05c(r0, <span class="keyword">@selector</span>(setEnabled:), <span class="number">0x0</span>, <span class="number">0x1</span>);</span><br><span class="line">    loc_e0a05c(r4, <span class="keyword">@selector</span>(setEmptyTipText));</span><br><span class="line">    loc_e0a05c(r4, <span class="keyword">@selector</span>(stopShowAnimation));</span><br><span class="line">    loc_e0a05c(r4, <span class="keyword">@selector</span>(startClickAnimation));</span><br><span class="line">    r1 = <span class="keyword">@selector</span>(callClickLogoHongBao);</span><br><span class="line">    r0 = r4;</span><br><span class="line">    Pop();</span><br><span class="line">    Pop();</span><br><span class="line">    Pop();</span><br><span class="line">    r0 = loc_1c0d0d4(r0, r1, <span class="number">0x0</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>伪代码里调用了<code>startClickAnimation</code>方法开始执行动画，那么很可能存在一个停止执行动画的方法。<br>在<code>NewYearShakeInteractiveLogoView.h</code>里搜索<code>stop</code>，可以发现<code>- (void)stopClickAnimation;</code>方法，基本上就可以确定这是停止动画时调用的方法了。</p><p>如果要在view的<code>stopClickAnimation</code>方法里关闭红包界面的话，就需要通过view获取view所在的视图控制器，可以通过<code>nextResponder</code>方法来获取。<br>最后让视图控制器对象调用<code>dismissViewControllerAnimated:completion:</code>方法来退出红包界面。</p><h3 id="五、编写插件"><a href="#五、编写插件" class="headerlink" title="五、编写插件"></a>五、编写插件</h3><p>使用Theos新建一个tweak插件，代码非常简单：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NewYearShakeViewController</span> : <span class="title">UIViewController</span></span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidAppear:(<span class="built_in">BOOL</span>)animated;</span><br><span class="line">- (<span class="keyword">void</span>)OnShake;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NewYearShakeInteractiveLogoView</span> : <span class="title">UIView</span></span></span><br><span class="line">- (<span class="keyword">void</span>)initView;</span><br><span class="line">- (<span class="keyword">void</span>)onClickLogoButton;</span><br><span class="line">- (<span class="keyword">void</span>)stopClickAnimation;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%hook NewYearShakeViewController</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidAppear:(<span class="built_in">BOOL</span>)animated</span><br><span class="line">&#123;</span><br><span class="line">    %orig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示界面一秒后自动摇一摇</span></span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        [<span class="keyword">self</span> OnShake];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%hook NewYearShakeInteractiveLogoView</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)initView</span><br><span class="line">&#123;</span><br><span class="line">    %orig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//view初始化一秒后自动点击按钮</span></span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">UIButton</span> *button = [<span class="keyword">self</span> valueForKey:<span class="string">@&quot;m_logoView&quot;</span>];</span><br><span class="line">        [<span class="keyword">self</span> onClickLogoButton:button];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)stopClickAnimation</span><br><span class="line">&#123;</span><br><span class="line">    %orig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动画停止一秒后自动退出界面</span></span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">1</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">UIViewController</span> *noticeViewController = (<span class="built_in">UIViewController</span> *)<span class="keyword">self</span>.nextResponder.nextResponder.nextResponder;</span><br><span class="line">        [noticeViewController dismissViewControllerAnimated:<span class="literal">NO</span> completion:<span class="literal">nil</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%end</span><br></pre></td></tr></table></figure><p>iPad安装插件后，重新打开微信，微信就会自动领一分钱了：</p><video id="video" controls="" preload="none" poster="/assets/2016/03/shake_video_preview.png">      <source id="mp4" src="/assets/2016/03/shake_video.mp4" type="video/mp4">      <p>Your user agent does not support the HTML5 Video element.</p></video><p>最后领到了很多一分钱，不知不觉中已经发财了：<br><img src="/assets/2016/03/shake_money_income.png" class="lazyload placeholder" data-srcset="/assets/2016/03/shake_money_income.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;除夕打开微信摇一摇抢红包，红包雨还没开始时，会显示如下界面：&lt;br&gt;&lt;img src=&quot;/assets/2016/03/shake_notice_vc.png&quot; class=&quot;lazyload placeholder&quot; data-srcset=&quot;/assets/2016/0</summary>
      
    
    
    
    <category term="学习园地" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/"/>
    
    <category term="逆向工程" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="iOS" scheme="https://www.poboke.com/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://www.poboke.com/tags/Objective-C/"/>
    
    <category term="逆向" scheme="https://www.poboke.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>SSCTF网络安全比赛——HungryGame</title>
    <link href="https://www.poboke.com/ssctf-network-security-competition-hungry-game.html"/>
    <id>https://www.poboke.com/ssctf-network-security-competition-hungry-game.html</id>
    <published>2016-02-29T00:08:44.000Z</published>
    <updated>2021-08-15T12:28:43.463Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><p>这道题的题目是《饥饿游戏》，一进游戏果然是好莱坞大片的即视感：<br><img src="/assets/2016/02/hungry_level_1.png" class="lazyload placeholder" data-srcset="/assets/2016/02/hungry_level_1.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>可以看到场面非常宏伟壮观，而我们的英雄人物就是<code>乔布斯</code>。</p><p>看一下游戏提示：</p><blockquote><p>Connected<br>Login OK<br>Use [↑↓←→] ot move around, [space] is the function key.</p></blockquote><p>也就是说：方向键可以移动英雄，空格键是用来触发功能的。</p><p>把英雄移动到门的旁边，按空格键可以过关。</p><h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><p>地图里有两扇门：<br><img src="/assets/2016/02/hungry_level_2.png" class="lazyload placeholder" data-srcset="/assets/2016/02/hungry_level_2.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>关卡提示：</p><blockquote><p>There is a locked door in front of you, but you don’t have the key.</p></blockquote><p>走到左边的门旁边按空格键，看到提示：</p><blockquote><p>Find key to open this door!</p></blockquote><p>看来需要钥匙才能打开左边的门，但是地图里没看到有钥匙。</p><p>在网页源码里搜索关键字<code>Find key</code>，可以在<code>game.js</code>文件里发现以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onnextdoor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">data = <span class="built_in">JSON</span>.stringify([msg(<span class="string">&#x27;next&#x27;</span>, &#123;&#125;)]);</span><br><span class="line">ws.send(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onfackdoor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">logtext(<span class="string">&#x27;Find key to open this door!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜一下<code>onfackdoor()</code>函数，发现按空格就直接调用了，所以是找不到钥匙来开启的。<br>而<code>onnextdoor()</code>函数的作用是向服务器发送数据进入下一关，所以在浏览器的控制台里执行<code>onnextdoor()</code>即可过关。</p><p>还有一种方法是修改英雄的坐标，这样英雄就可以<code>穿墙</code>了，然后走到右边的门按空格键。</p><h3 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h3><p>地图里有两颗树：<br><img src="/assets/2016/02/hungry_level_3.png" class="lazyload placeholder" data-srcset="/assets/2016/02/hungry_level_3.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>游戏提示：</p><blockquote><p>Hold [space] to cut the tree. When you get 9999 wood, a wooden pickaxe will be automatically generated.</p></blockquote><p>在树的旁边按住空格键可以砍树，获得9999块木材会自动获取一根木制镐。</p><p>走到树边砍树：</p><blockquote><p>Cutting Tree…<br>You get 3 woods,total 3<br>You get 5 woods,total 8<br>……</p></blockquote><p>按住一秒会得到一个木材，手动砍树的话肯定是行不通的，看一下js文件，发现如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (level == <span class="number">2</span> &amp;&amp; users[heroname].x &lt; <span class="number">800</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>()) - woodstart</span><br><span class="line">    <span class="keyword">if</span> (tmp &gt; <span class="number">1000</span> &amp;&amp; woodstart != -<span class="number">1</span>) &#123;</span><br><span class="line">        woodstart = -<span class="number">1</span>;</span><br><span class="line">        data = <span class="built_in">JSON</span>.stringify([msg(<span class="string">&#x27;wood&#x27;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;time&#x27;</span>: tmp</span><br><span class="line">        &#125;)]);</span><br><span class="line">        ws.send(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>tmp</code>变量是两次按键之间的毫秒数，所以可以轻易伪造砍了10000颗树，在浏览器控制台输入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="built_in">JSON</span>.stringify([msg(<span class="string">&#x27;wood&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;time&#x27;</span>: <span class="number">10000000</span></span><br><span class="line">&#125;)]);</span><br><span class="line">ws.send(data);</span><br></pre></td></tr></table></figure><p>执行后游戏提示：</p><blockquote><p>You get 10000 woods,total 10008<br>Get the wooden pickaxe!!!</p></blockquote><p>走到门边通往下一关。</p><h3 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h3><p>地图里有两堆钻石：<br><img src="/assets/2016/02/hungry_level_4.png" class="lazyload placeholder" data-srcset="/assets/2016/02/hungry_level_4.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>游戏提示：</p><blockquote><p>Mine by hitting [space], When you get 9999 diamonds,the diamond sword will be automatically generated.</p></blockquote><p>猛击空格键，得到9999颗钻石会获得一把钻石剑。</p><p>在游戏源码里可以发现以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (level == <span class="number">3</span> &amp;&amp; users[heroname].x &lt; <span class="number">800</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (second != <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>()) &amp;&amp; diamondpos) &#123;</span><br><span class="line">        <span class="keyword">if</span> (diamondtimes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            data = <span class="built_in">JSON</span>.stringify([msg(<span class="string">&#x27;diamond&#x27;</span>, &#123;</span><br><span class="line">                <span class="string">&#x27;count&#x27;</span>: diamondtimes</span><br><span class="line">            &#125;)]);</span><br><span class="line">            ws.send(data);</span><br><span class="line">        &#125;</span><br><span class="line">        diamondtimes = <span class="number">0</span>;</span><br><span class="line">        diamondpos = <span class="literal">false</span>;</span><br><span class="line">        second = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        diamondtimes += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照第三关的方法在浏览器控制台执行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="built_in">JSON</span>.stringify([msg(<span class="string">&#x27;diamond&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&#x27;count&#x27;</span>: <span class="number">10000</span></span><br><span class="line">&#125;)]);</span><br><span class="line">ws.send(data);</span><br></pre></td></tr></table></figure><p>游戏提示：</p><blockquote><p>Mining too fast, manager kicked you out.<br>Connection lost</p></blockquote><p>挖掘太快，被服务器踢出去了。</p><p>应该是数量太多了，经过试验，每次挖掘的最大数量是50，所以用循环执行200次就行了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">200</span>; i++) &#123;</span><br><span class="line">    data = <span class="built_in">JSON</span>.stringify([msg(<span class="string">&#x27;diamond&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;count&#x27;</span>: <span class="number">50</span></span><br><span class="line">    &#125;)]);</span><br><span class="line">    ws.send(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><blockquote><p>Get 50 diamond,total 50<br>Get 50 diamond,total 100<br>Get 50 diamond,total 150<br>……<br>Get 50 diamond,total 9950<br>Get 50 diamond,total 10000<br>Get the diamond sword!!!</p></blockquote><p>通过门可以通向下一关。</p><h3 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h3><p>终于要打BOSS了：<br><img src="/assets/2016/02/hungry_level_5.png" class="lazyload placeholder" data-srcset="/assets/2016/02/hungry_level_5.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>游戏提示：</p><blockquote><p>At last, the final level! Wave your diamond sword and beat the BOSS.<br>PS: Short-range weapons can only hurt other players(your hp +1) but cannot harm the BOSS.<br>PS: Cause 15 point damages to the BOSS to get the flag<br>PS: Or kill 5 players to get the flag</p></blockquote><p>近距离攻击的武器只能攻击到别的玩家，打不到远处的BOSS。攻击到别的玩家时，别的玩家的hp会减1，自己的hp会加1。<br>有两种过关方法，一是让BOSS掉15滴血，二是杀死5个玩家。</p><p>BOSS是有瞬移技能的，满地图顺机传送，而且隔两三秒就攻击玩家一次：</p><blockquote><p>Attacked by boss<br>Attacked by boss<br>Attacked by TFBoys<br>Attacked by boss</p></blockquote><p>英雄不但会受到BOSS攻击，还会受到其它玩家的攻击，而英雄只有10滴血，往往坚持30多秒就挂了。</p><p>地图里有个神秘的箱子和一把远程攻击的弓箭，其实这些都是骗人的，捡物品的时候会调用以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onselfkill</span>(<span class="params">argument</span>) </span>&#123;</span><br><span class="line">logtext(<span class="string">&quot;There&#x27;s nothing here.Too yong too simple.( ‵▽′)ψ &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下按功能键时的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (level == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (second != <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>())) &#123;</span><br><span class="line">        data = <span class="built_in">JSON</span>.stringify([msg(<span class="string">&#x27;attack&#x27;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;x&#x27;</span>: users[heroname].x,</span><br><span class="line">            <span class="string">&#x27;y&#x27;</span>: users[heroname].y</span><br><span class="line">        &#125;)]);</span><br><span class="line">        ws.send(data);</span><br><span class="line">        attacking = <span class="literal">true</span>;</span><br><span class="line">        second = <span class="built_in">Date</span>.parse(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码向服务器发送了一个攻击事件和英雄的当前坐标，服务器应该是判断这个坐标周围有没有攻击对象的。如果把这个坐标改成BOSS的坐标的话，那么就可以攻击到BOSS了。</p><p>查看js代码，发现有一个<code>boss</code>变量，所以可以在控制台执行以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">attact</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    data = <span class="built_in">JSON</span>.stringify([msg(<span class="string">&#x27;attack&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;x&#x27;</span>: boss.x,</span><br><span class="line">        <span class="string">&#x27;y&#x27;</span>: boss.y</span><br><span class="line">    &#125;)]);</span><br><span class="line">    ws.send(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="string">&#x27;attact()&#x27;</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>执行后可以得到过关的key：</p><blockquote><p>Attack:boss,total 1<br>Attack:boss,total 2<br>Attacked by boss<br>Attack:boss,total 3<br>Attack:boss,total 4<br>Attack:boss,total 5<br>Attacked by boss<br>Attack:boss,total 6<br>Attack:boss,total 7<br>Attacked by boss<br>Attack:boss,total 8<br>Attack:boss,total 9<br>Attack:boss,total 10<br>Attacked by boss<br>Attack:boss,total 11<br>Attack:boss,total 12<br>Attack:boss,total 13<br>Attacked by boss<br>Attack:boss,total 14<br>Attack:boss,total 15<br>SSCTF{2b3d41dd4b7911dc0fe683d1a0d977ef}</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第一关&quot;&gt;&lt;a href=&quot;#第一关&quot; class=&quot;headerlink&quot; title=&quot;第一关&quot;&gt;&lt;/a&gt;第一关&lt;/h3&gt;&lt;p&gt;这道题的题目是《饥饿游戏》，一进游戏果然是好莱坞大片的即视感：&lt;br&gt;&lt;img src=&quot;/assets/2016/02/hungr</summary>
      
    
    
    
    <category term="学习园地" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/"/>
    
    <category term="CTF比赛" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/CTF%E6%AF%94%E8%B5%9B/"/>
    
    
    <category term="CTF" scheme="https://www.poboke.com/tags/CTF/"/>
    
    <category term="JavaScript" scheme="https://www.poboke.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>破解Mac版WiFi万能钥匙密码</title>
    <link href="https://www.poboke.com/decrypt-the-password-of-wifi-master-key-for-mac.html"/>
    <id>https://www.poboke.com/decrypt-the-password-of-wifi-master-key-for-mac.html</id>
    <published>2016-02-24T12:03:23.000Z</published>
    <updated>2021-08-15T12:34:00.288Z</updated>
    
    <content type="html"><![CDATA[<p>春节回家，家里没有网络，手机流量又不够用，所以只能去蹭邻居的网。</p><p>我的电脑里以前装过WiFi万能钥匙，打开一看，发现有可以连接的热点：<br><img src="/assets/2016/02/wifi_list.png" class="lazyload placeholder" data-srcset="/assets/2016/02/wifi_list.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>先用手机开启一个热点给电脑使用，再打开<a href="http://www.charlesproxy.com/">Charles</a>拦截电脑数据包。<br>在WiFi列表里选中<code>TP-LINK_FB2BBE</code>这一列，然后点击 <kbd>自动连接</kbd> 按钮，可以截取到以下数据：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;qryapwd&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;retCd&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;psws&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;f8:d1:11:fb:2b:be&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;bssid&quot;</span>: <span class="string">&quot;f8:d1:11:fb:2b:be&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;pwd&quot;</span>: <span class="string">&quot;EDFE4543092F6A8BAD1900F2ACD40233E723205FDE9211C4B5D1D54900F9C9BC&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;hid&quot;</span>: <span class="string">&quot;1AD1DB9E0F7EBBA9B0FB6E8C567CE3A8&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;xJs&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;ssid&quot;</span>: <span class="string">&quot;TP-LINK_FB2BBE&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;xUser&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;internet&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;xPwd&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;securityLevel&quot;</span>: <span class="string">&quot;2&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;retCd&quot;</span>: <span class="string">&quot;0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由结果可以看出，<code>pwd</code>字段很有可能就是加密后的密码。如果能破解出原始密码的话，那么手机就可以直接连接WiFi了。</p><p>以下就是破解密码的过程：</p><h3 id="一、获取选中的CellView"><a href="#一、获取选中的CellView" class="headerlink" title="一、获取选中的CellView"></a>一、获取选中的CellView</h3><p>先按照<a href="/use-easysimbl-to-inject-plugins-to-mac-app.html">《使用EasySIMBL为Mac应用加载插件》</a>教程里的方法安装EasySIMBL模板，然后用Xcode新建一个EasySIMBL插件工程，工程名为<code>WifiMasterKeyPlugin</code>，再将初始化代码改为：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="keyword">instancetype</span>)sharedInstance</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> WifiMasterKeyPlugin *plugin = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">@synchronized</span>(<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!plugin) &#123;</span><br><span class="line">            plugin = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">            [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:plugin selector:<span class="keyword">@selector</span>(notificationListener:) name:<span class="built_in">NSViewDidUpdateTrackingAreasNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> plugin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)notificationListener:(<span class="built_in">NSNotification</span> *)notification</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//打印出视图对象以及视图的大小</span></span><br><span class="line">    <span class="built_in">NSView</span> *view = notification.object;</span><br><span class="line">    <span class="keyword">if</span> ([view respondsToSelector:<span class="keyword">@selector</span>(frame)]) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;view : %@, frame : %@&quot;</span>, view, [<span class="built_in">NSValue</span> valueWithRect:view.frame]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br></pre></td></tr></table></figure><p>上面的代码能够获取到创建视图的通知，根据通知可以打印出视图的类名。<br>编译工程后，打开控制台应用，重新运行WiFi万能钥匙，然后点击<code>TP-LINK_FB2BBE</code>这一列，在控制台里可以看到输出的log：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WiFiMasterKey[30976]: view : &lt;NSTableView: 0x7f8fa3dc3810&gt;, frame : NSRect: &#123;&#123;0, 0&#125;, &#123;537, 862&#125;&#125;</span><br><span class="line">WiFiMasterKey[30976]: view : &lt;NSTableRowView: 0x7f8fa60a8620&gt; - row: 1, frame : NSRect: &#123;&#123;0, 52&#125;, &#123;537, 82&#125;&#125;</span><br><span class="line">WiFiMasterKey[30976]: view : &lt;WiFiTableSelectedCellView: 0x7f8fa6134df0&gt;, frame : NSRect: &#123;&#123;1, 1&#125;, &#123;534, 80&#125;&#125;</span><br></pre></td></tr></table></figure><p>可以看到创建了一个<code>&lt;WiFiTableSelectedCellView: 0x7f8fa6134df0&gt;</code>，看类名应该是当前选中的CellView，CellView对象的内存地址为<code>0x7f8fa6134df0</code>。</p><h3 id="二、用Xcode动态调试应用"><a href="#二、用Xcode动态调试应用" class="headerlink" title="二、用Xcode动态调试应用"></a>二、用Xcode动态调试应用</h3><p>接下来用Xcode来动态调试WiFi万能钥匙，点击Xcode的菜单 <kbd>Debug</kbd> –&gt; <kbd>Attach to Process</kbd> ，选择<code>WiFiMasterKey</code>进程。<br><img src="/assets/2016/02/wifi_xcode_attach.png" class="lazyload placeholder" data-srcset="/assets/2016/02/wifi_xcode_attach.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>等待进程附加完毕，点击下面的按钮暂停应用：<br><img src="/assets/2016/02/wifi_xcode_pause.png" class="lazyload placeholder" data-srcset="/assets/2016/02/wifi_xcode_pause.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>然后在调试框里输入以下命令打印出CellView的子视图：<br>（注意：<code>pviews</code>命令需要先安装<a href="https://github.com/facebook/chisel">chisel</a>才能使用。）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po 0x7f8fa6134df0</span><br><span class="line">&lt;WiFiTableSelectedCellView: 0x7f8fa6134df0&gt;</span><br><span class="line"></span><br><span class="line">(lldb) pviews 0x7f8fa6134df0</span><br><span class="line">[   A     P    ] h=--- v=-&amp;- WiFiTableSelectedCellView 0x7f8fa6134df0 f=(1,1,534,80) b=(-) TIME drawRect: min/mean/max 0.00/0.00/0.00 ms</span><br><span class="line">  [   A          ] h=--&amp; v=&amp;-- NSImageView 0x7f8fa6159a80 &quot;&lt;NSImage 0x7f8fa3d302c0 Name=icon_lock_signal_big_3 Size=&#123;45, 37&#125; Reps=(</span><br><span class="line">    &quot;NSBitmapImageRep 0x7f8fa615f6d0 Size=&#123;45, 37&#125; ColorSpace=iMac colorspace BPS=8 BPP=32 Pixels=45x37 Alpha=YES Planar=NO Format=2 CurrentBacking=&lt;CGImageRef: 0x7f8fa615f850&gt; CGImageSource=0x7f8fa62424f0&quot;</span><br><span class="line"><span class="meta">)&gt;</span><span class="bash"><span class="string">&quot; f=(5,22,44,37) b=(-) TIME drawRect: min/mean/max 0.00/0.00/0.00 ms</span></span></span><br><span class="line">  [   AF         ] h=--&amp; v=&amp;-- NSButton 0x7f8fa61353d0 &quot;输入密码&quot; f=(433,6,85,25) b=(-) TIME drawRect: min/mean/max 0.00/0.00/0.00 ms</span><br><span class="line">  [   AF         ] h=--&amp; v=&amp;-- NSTextField 0x7f8fa3d1a810 f=(415,47,99,20) b=(-) TIME drawRect: min/mean/max 0.00/0.00/0.00 ms</span><br><span class="line">  [   A          ] h=--&amp; v=&amp;-- NSImageView 0x7f8fa3d149e0 &quot;&lt;NSImage 0x7f8fa607c030 Name=icon_key Size=&#123;10, 18&#125; Reps=(</span><br><span class="line">    &quot;NSBitmapImageRep 0x7f8fa3d1a4f0 Size=&#123;10, 18&#125; ColorSpace=sRGB IEC61966-2.1 colorspace BPS=8 BPP=32 Pixels=10x18 Alpha=YES Planar=NO Format=2 CurrentBacking=&lt;CGImageRef: 0x7f8fa615ae10&gt; CGImageSource=0x7f8fa3de4270&quot;</span><br><span class="line"><span class="meta">)&gt;</span><span class="bash"><span class="string">&quot;</span> f=(495,40,23,34) b=(-) TIME drawRect: min/mean/max 0.00/0.00/0.00 ms</span></span><br><span class="line">  [   AF         ] h=-&amp;- v=&amp;-- NSTextField 0x7f8fa61977e0 &quot;TP-LINK_FB2BBE&quot; f=(60,30,184,21) b=(-) TIME drawRect: min/mean/max 0.00/0.00/0.00 ms</span><br><span class="line">  [   AF         ] h=--&amp; v=&amp;-- NSButton 0x7f8fa3daf760 &quot;自动连接&quot; f=(237,6,85,25) b=(-) TIME drawRect: min/mean/max 0.00/0.00/0.00 ms</span><br><span class="line">  [   AF         ] h=--&amp; v=&amp;-- NSButton 0x7f8fa6184d80 &quot;分享热点&quot; f=(336,6,85,25) b=(-) TIME drawRect: min/mean/max 0.00/0.00/0.00 ms</span><br><span class="line">A=autoresizesSubviews, C=canDrawConcurrently, D=needsDisplay, F=flipped, G=gstate, H=hidden (h=by ancestor), L=needsLayout (l=child needsLayout), U=needsUpdateConstraints (u=child needsUpdateConstraints), O=opaque, P=preservesContentDuringLiveResize, S=scaled/rotated, W=wantsLayer (w=ancestor wantsLayer), V=needsVibrancy (v=allowsVibrancy), #=has surface</span><br></pre></td></tr></table></figure><p>由结果可知， <kbd>自动连接</kbd> 按钮对象的内存地址是<code>0x7f8fa3daf760</code>，用以下命令可以得到点击按钮时调用的方法名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(lldb) po [0x7f8fa3daf760 target]</span><br><span class="line">&lt;WiFiTableSelectedCellView: 0x7f8fa6134df0&gt;</span><br><span class="line"></span><br><span class="line">(lldb) po [0x7f8fa3daf760 action]</span><br><span class="line">0x0000000101d2c889</span><br><span class="line"></span><br><span class="line">(lldb) po NSStringFromSelector(0x0000000101d2c889)</span><br><span class="line">autoConnectButtonAction:</span><br></pre></td></tr></table></figure><p>也就是说，点击按钮时会调用<code>[WiFiTableSelectedCellView autoConnectButtonAction:]</code>方法。</p><h3 id="三、用Hopper静态分析应用"><a href="#三、用Hopper静态分析应用" class="headerlink" title="三、用Hopper静态分析应用"></a>三、用Hopper静态分析应用</h3><p>接下来用动态调试来分析比较麻烦，可以采用静态分析的方法。<br>将WiFi万能钥匙的可执行文件拖到<a href="http://www.hopperapp.com/">Hopper Disassembler</a>里进行分析，等待分析完毕后搜索<code>WiFiTableSelectedCellView autoConnectButtonAction:</code>方法，再按 <kbd>alt + enter</kbd> 组合键查看反汇编伪代码，可得到以下结果：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[WiFiTableSelectedCellView autoConnectButtonAction:](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd, <span class="keyword">void</span> * arg2) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    rsi = <span class="keyword">@selector</span>(queryWiFiMasterKey);</span><br><span class="line">    [var_90 queryWiFiMasterKey];</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看<code>queryWiFiMasterKey</code>方法的伪代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[WiFiTableSelectedCellView queryWiFiMasterKey](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">loc_10004c361:</span><br><span class="line">    rsi = <span class="keyword">@selector</span>(queryWiFiMasterKeyFromServer);</span><br><span class="line">    <span class="keyword">goto</span> loc_10004c385;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再查看<code>queryWiFiMasterKeyFromServer</code>方法的伪代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[WiFiTableSelectedCellView queryWiFiMasterKeyFromServer](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd) &#123;</span><br><span class="line">    rdx = <span class="keyword">self</span>-&gt;_wifi;</span><br><span class="line">    r12 = *objc_msgSend;</span><br><span class="line">    r14 = [[<span class="built_in">NSArray</span> arrayWithObject:rdx] <span class="keyword">retain</span>];</span><br><span class="line">    r13 = [[WiFiMasterKeyService shareInstance] <span class="keyword">retain</span>];</span><br><span class="line">    var_50 = *_NSConcreteStackBlock;</span><br><span class="line">    var_48 = <span class="number">0xc2000000</span>;</span><br><span class="line">    var_44 = <span class="number">0x0</span>;</span><br><span class="line">    var_40 = ___57-[WiFiTableSelectedCellView queryWiFiMasterKeyFromServer]_block_invoke;</span><br><span class="line">    var_38 = ___block_descriptor_tmp219;</span><br><span class="line">    var_30 = [<span class="keyword">self</span> <span class="keyword">retain</span>];</span><br><span class="line">    [r13 queryMasterKey:r14 tag:<span class="number">0x0</span> userInfo:<span class="number">0x0</span> scanWiFiType:<span class="number">0x1</span> success:var_50 failure:<span class="keyword">void</span> ^(<span class="keyword">void</span> * _block, <span class="keyword">struct</span> AFHTTPRequestOperation * arg1, <span class="keyword">struct</span> <span class="built_in">NSError</span> * arg2) &#123;</span><br><span class="line">        rax = [MLHudAlert alertWithType:<span class="number">0x2</span> message:cfstring__g_RhV___c1Y___0];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    rbx = *objc_release;</span><br><span class="line">    [var_30 release];</span><br><span class="line">    [r13 release];</span><br><span class="line">    rax = [r14 release];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，点击 <kbd>自动连接</kbd> 按钮，会调用<code>[WiFiMasterKeyService queryMasterKey:tag:userInfo:scanWiFiType:success:failure:]</code>方法向服务器查询加密后的密码，数据请求成功的回调方法是<code>[WiFiTableSelectedCellView queryWiFiMasterKeyFromServer]_block_invoke</code>，这个block的伪代码是：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ___57-[WiFiTableSelectedCellView queryWiFiMasterKeyFromServer]_block_invoke(<span class="keyword">int</span> arg0) &#123;</span><br><span class="line">    rdi = *(arg0 + <span class="number">0x20</span>);</span><br><span class="line">    rax = [rdi parserScanWiFiResult:rdx];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后通过<code>[WiFiTableSelectedCellView parserScanWiFiResult:]</code>方法来解析返回的数据，所以解密WiFi密码的代码很有可能就在这个方法里。</p><p>由一开始可知，加密后的密码字段名是<code>pwd</code>，因此在<code>parserScanWiFiResult:</code>方法的伪代码里可以很快发现以下代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[WiFiTableSelectedCellView parserScanWiFiResult:](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd, <span class="keyword">void</span> * arg2) &#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    rbx = [[rdi objectForKey:<span class="string">@&quot;pwd&quot;</span>] <span class="keyword">retain</span>];</span><br><span class="line">    r13 = *objc_msgSend;</span><br><span class="line">    r15 = [[WiFiKeyAESUtilties ShareKeyAES128Decry:rbx] <span class="keyword">retain</span>];</span><br><span class="line">    r12 = *objc_release;</span><br><span class="line">    [rbx release];</span><br><span class="line">    [var_38 connectNetworkWithPassword:r15];</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原来是通过<code>[WiFiKeyAESUtilties ShareKeyAES128Decry:]</code>方法解密出密码。</p><h3 id="四、编写插件"><a href="#四、编写插件" class="headerlink" title="四、编写插件"></a>四、编写插件</h3><p>因此我们可以通过hook这个方法，把解密后的密码用弹出框显示出来，示例代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">WiFiKeyAESUtiltiesHook</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)hook_WiFiKeyAESUtilties</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> jr_swizzleClassMethod:<span class="keyword">@selector</span>(ShareKeyAES128Decry:)</span><br><span class="line">                withClassMethod:<span class="keyword">@selector</span>(hook_ShareKeyAES128Decry:)</span><br><span class="line">                     error:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">id</span>)hook_ShareKeyAES128Decry:(<span class="keyword">id</span>)arg1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *shareKey = [<span class="keyword">self</span> hook_ShareKeyAES128Decry:arg1];</span><br><span class="line">    shareKey = [shareKey stringByRemovingPercentEncoding];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSAlert</span> *alert = [[<span class="built_in">NSAlert</span> alloc] init];</span><br><span class="line">    alert.alertStyle = <span class="built_in">NSInformationalAlertStyle</span>;</span><br><span class="line">    alert.messageText = <span class="string">@&quot;密码：&quot;</span>;</span><br><span class="line">    alert.informativeText = shareKey;</span><br><span class="line">    [alert runModal];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> shareKey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>具体工程代码可以在<a href="https://github.com/poboke/EasySIMBL-Bundle-Template/tree/master/Samples/WifiMasterKeyPlugin">WifiMasterKeyPlugin</a>下载。</p><p>编译工程后，重新运行WiFi万能钥匙，点击 <kbd>自动连接</kbd> 按钮，可以看到弹出一个提示框：<br><img src="/assets/2016/02/wifi_password.png" class="lazyload placeholder" data-srcset="/assets/2016/02/wifi_password.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;春节回家，家里没有网络，手机流量又不够用，所以只能去蹭邻居的网。&lt;/p&gt;
&lt;p&gt;我的电脑里以前装过WiFi万能钥匙，打开一看，发现有可以连接的热点：&lt;br&gt;&lt;img src=&quot;/assets/2016/02/wifi_list.png&quot; class=&quot;lazyload pl</summary>
      
    
    
    
    <category term="学习园地" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/"/>
    
    <category term="逆向工程" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="iOS" scheme="https://www.poboke.com/tags/iOS/"/>
    
    <category term="Mac" scheme="https://www.poboke.com/tags/Mac/"/>
    
    <category term="Objective-C" scheme="https://www.poboke.com/tags/Objective-C/"/>
    
    <category term="逆向" scheme="https://www.poboke.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>使用EasySIMBL为Mac应用加载插件</title>
    <link href="https://www.poboke.com/use-easysimbl-to-inject-plugins-to-mac-app.html"/>
    <id>https://www.poboke.com/use-easysimbl-to-inject-plugins-to-mac-app.html</id>
    <published>2016-02-15T10:17:52.000Z</published>
    <updated>2021-09-08T17:05:05.290Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、EasySIMBL简介"><a href="#一、EasySIMBL简介" class="headerlink" title="一、EasySIMBL简介"></a>一、EasySIMBL简介</h3><p>用户想给应用增加功能的话，最快捷的方法就是给应用写插件打补丁。</p><p><code>EasySIMBL(Easy SIMple Bundle Loader)</code>是<code>macOS</code>系统的一个工具，能够很方便地把插件注入到目标应用里，从而使应用能按我们想要的方式运行。</p><h3 id="二、安装EasySIMBL"><a href="#二、安装EasySIMBL" class="headerlink" title="二、安装EasySIMBL"></a>二、安装EasySIMBL</h3><p><code>EasySIMBL</code>需要安装到<code>/System/Library/ScriptingAdditions/</code>路径，安装过程如下：</p><h4 id="1、关闭SIP"><a href="#1、关闭SIP" class="headerlink" title="1、关闭SIP"></a>1、关闭SIP</h4><p>由于<code>macOS X 10.11</code>启用了SIP，用户没有权限修改系统目录下的文件，因此安装<code>EasySIMBL</code>之前要先关闭SIP。</p><p>首先重启系统，开机时按住 <kbd>command</kbd> + <kbd>R</kbd> 不放，直到进入系统恢复模式。  </p><p>然后点击 <kbd>实用工具</kbd> 菜单，打开终端，执行<code>csrutil disable</code>命令关闭SIP，再重启系统。</p><h4 id="2、安装EasySIMBL"><a href="#2、安装EasySIMBL" class="headerlink" title="2、安装EasySIMBL"></a>2、安装EasySIMBL</h4><p>点击<a href="http://www.culater.net/dl/files/SIMBL-0.9.9.zip">SIMBL-0.9.9.zip</a>下载文件并解压。</p><p>然后打开终端，cd到<code>SIMBL-0.9.9</code>目录，执行以下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo installer -verbose -pkg SIMBL-0.9.9.pkg -target /</span><br><span class="line">sudo rm -rf /System/Library/ScriptingAdditions/SIMBL.osax</span><br><span class="line">sudo mv /Library/ScriptingAdditions/SIMBL.osax /System/Library/ScriptingAdditions/</span><br><span class="line">sudo cp -p /System/Library/ScriptingAdditions/SIMBL.osax/Contents/Resources/SIMBL\ Agent.app/Contents/Resources/net.culater.SIMBL.Agent.plist /System/Library/LaunchAgents/</span><br><span class="line">sudo sed -e <span class="string">&quot;s/Library/System\/Library/&quot;</span> -i <span class="string">&quot;&quot;</span> /System/Library/LaunchAgents/net.culater.SIMBL.Agent.plist</span><br></pre></td></tr></table></figure><h4 id="3、启用SIP"><a href="#3、启用SIP" class="headerlink" title="3、启用SIP"></a>3、启用SIP</h4><p>安装完可以启用SIP，对系统进行保护。</p><p>进入系统恢复模式，执行<code>csrutil enable --without debug</code>，并重启系统。  </p><p>加上<code>--without debug</code>参数，才可以让lldb附加进程进行调试。</p><h3 id="三、安装插件"><a href="#三、安装插件" class="headerlink" title="三、安装插件"></a>三、安装插件</h3><p>将插件放在<code>/Library/Application Support/SIMBL/Plugins</code>目录里，应用启动时会自动加载插件。</p><h3 id="四、插件开发"><a href="#四、插件开发" class="headerlink" title="四、插件开发"></a>四、插件开发</h3><p>以系统自带的计算器应用<code>/Applications/Calculator.app</code>为例编写一个插件。</p><p>1、安装插件模板，地址为 <a href="https://github.com/poboke/EasySIMBL-Bundle-Template">https://github.com/poboke/EasySIMBL-Bundle-Template</a>。</p><p>2、使用Xcode创建一个Project，选择<code>SIMBL Bundle</code>模板。<br><img src="/assets/2016/02/simbl_project_template.png" class="lazyload placeholder" data-srcset="/assets/2016/02/simbl_project_template.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>3、设置工程名字为<code>CalculatorPlugin</code>。<br>打开<code>/Applications/Calculator.app/Contents/Info.plist</code>，可以看到计算器的<code>bundle identifier</code>为<code>com.apple.calculator</code>：<br><img src="/assets/2016/02/simbl_calculator_info.png" class="lazyload placeholder" data-srcset="/assets/2016/02/simbl_calculator_info.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>下图里的<code>Target App Bundle Id</code>就是我们要注入的app的包标识符，当app启动时，SIMBL就会把填有该app包标识符的插件注入到该app中。</p><p>填写后的工程信息为：<br><img src="/assets/2016/02/simbl_project_options.png" class="lazyload placeholder" data-srcset="/assets/2016/02/simbl_project_options.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>4、工程默认的初始化代码为：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;CalculatorPlugin.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">CalculatorPlugin</span>()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">CalculatorPlugin</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @return the single static instance of the plugin object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)sharedInstance</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> CalculatorPlugin *plugin = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">@synchronized</span>(<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!plugin) &#123;</span><br><span class="line">            plugin = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> plugin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A special method called by SIMBL once the application has started and all classes are initialized.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">void</span>)load</span><br><span class="line">&#123;</span><br><span class="line">    CalculatorPlugin *plugin = [CalculatorPlugin sharedInstance];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;++++++++ %@ plugin loaded ++++++++&quot;</span>, plugin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载插件时会先执行类方法<code>load</code>的代码，因此可以在该方法里编写初始化的代码。</p><p>5、编辑插件的<code>Info.plist</code>文件，可以看到里面有一个<code>SIMBLTargetApplications</code>数组：<br><img src="/assets/2016/02/simbl_target_applications.png" class="lazyload placeholder" data-srcset="/assets/2016/02/simbl_target_applications.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>字段的含义为：</p><ul><li><code>BundleIdentifier</code> : 要注入的app的包标识符。</li><li><code>MaxBundleVersion</code> : 要注入的app的版本号最大值，默认为99999。</li><li><code>MinBundleVersion</code> : 要注入的app的版本号最小值，默认为0。</li></ul><p>版本号是指<code>CFBundleVersion</code>的值：<br><img src="/assets/2016/02/simbl_calculator_info.png" class="lazyload placeholder" data-srcset="/assets/2016/02/simbl_calculator_info.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>由计算器的信息可知，目前计算器的版本号是<code>123</code>，而非<code>10.8</code>。</p><p>处于<code>MinBundleVersion</code>和<code>MaxBundleVersion</code>版本号之间的app才能够加载插件。<br>因为app升级后可能导致插件失效，严重的话可能会导致app闪退。所以为了保证插件能够正常工作，可以使用app当前版本号的值，也就是最大值和最小值都填上<code>123</code>。<br>不过这种情况是很少出现的，一般来说使用模板默认的<code>0 ~ 99999</code>就可以了。</p><p>6、工程编译成功后会在<code>/Library/Application Support/SIMBL/Plugins</code>目录下生成一个<code>CalculatorPlugin.bundle</code>插件。</p><p>7、先运行控制台<code>Console.app</code>，再运行计算器<code>Calculator.app</code>。<br>如果在控制台里能看到<code>++++++++ &lt;CalculatorPlugin: 0x7f980488e970&gt; plugin loaded ++++++++</code>等字样，就说明我们的插件已经成功注入到计算器里了。</p><p>8、接下来就可以使用逆向工程的方法来修改app的逻辑了。</p><h3 id="五、示例工程"><a href="#五、示例工程" class="headerlink" title="五、示例工程"></a>五、示例工程</h3><p>插件模板 <a href="https://github.com/poboke/EasySIMBL-Bundle-Template">https://github.com/poboke/EasySIMBL-Bundle-Template</a> 的<code>Samples</code>目录里有一个<code>CalculatorPlugin</code>示例工程。</p><p>编译该工程后，点击计算器菜单栏的 <kbd>计算器</kbd> –&gt; <kbd>关于计算器</kbd> 时，会出现一个<code>Hello world</code>的弹出框：<br><img src="/assets/2016/02/simbl_calculator_hooker.png" class="lazyload placeholder" data-srcset="/assets/2016/02/simbl_calculator_hooker.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>感兴趣的话可以去看工程里的代码，由于代码比较简单，这里就不多费笔墨了。</p><h3 id="六、图形界面的mySIMBL"><a href="#六、图形界面的mySIMBL" class="headerlink" title="六、图形界面的mySIMBL"></a>六、图形界面的mySIMBL</h3><p>使用图形化软件可以更方便地管理插件，mySIMBL是一个开源的macOS插件管理器，它不但可以很方便地安装SIMBL，而且还自带了插件列表，能够下载其他用户分享的插件。</p><h4 id="1、安装说明"><a href="#1、安装说明" class="headerlink" title="1、安装说明"></a>1、安装说明</h4><p><a href="https://github.com/w0lfschild/app_updates/raw/master/mySIMBL/mySIMBL_master.zip">点击这里下载最新的安装包</a>，下载后解压，将<code>mySIMBL.app</code>移动到<code>应用程序</code>里。</p><p>第一次运行时，会提示用户安装SIMBL，按照上面的方法关闭<code>SIP</code>，并安装<code>EasySIMBL</code>。</p><p>运行<code>mySIMBL.app</code>后便可看到本地的插件列表：<br><img src="/assets/2017/08/mysimbl_preview.png" class="lazyload placeholder" data-srcset="/assets/2017/08/mysimbl_preview.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><h4 id="2、功能介绍"><a href="#2、功能介绍" class="headerlink" title="2、功能介绍"></a>2、功能介绍</h4><ul><li><code>Manage</code>菜单里可以管理本地的插件，把插件拖到插件列表里可以安装插件。点击状态图标可以开启/禁用插件，绿色图标为开启，红色为禁用。</li><li><code>Discover</code>菜单里可以下载其他用户分享的插件。</li><li><code>Updates</code>菜单里可以更新其他用户分享的插件。</li><li><code>SIMBL</code>菜单里可以把某些应用加入黑名单，这些应用启动时就不会加载任何插件。</li></ul><h4 id="3、分享插件"><a href="#3、分享插件" class="headerlink" title="3、分享插件"></a>3、分享插件</h4><p>如果你想把自己写的插件分享给别人使用，可以把插件提交到<code>mySIMBL</code>的插件仓库里，仓库地址为：<a href="https://github.com/w0lfschild/macplugins">https://github.com/w0lfschild/macplugins</a>。</p><p>首先Fork该插件仓库，将你编译好的插件压缩为<code>zip</code>格式，放到仓库的<code>bundles</code>目录里。</p><p>编辑<code>packages_v2.plist</code>文件填写插件信息，再提交<code>Pull Request</code>就可以啦。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、EasySIMBL简介&quot;&gt;&lt;a href=&quot;#一、EasySIMBL简介&quot; class=&quot;headerlink&quot; title=&quot;一、EasySIMBL简介&quot;&gt;&lt;/a&gt;一、EasySIMBL简介&lt;/h3&gt;&lt;p&gt;用户想给应用增加功能的话，最快捷的方法就是给应用写插</summary>
      
    
    
    
    <category term="学习园地" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/"/>
    
    <category term="逆向工程" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
    <category term="教学" scheme="https://www.poboke.com/tags/%E6%95%99%E5%AD%A6/"/>
    
    <category term="Mac" scheme="https://www.poboke.com/tags/Mac/"/>
    
    <category term="逆向" scheme="https://www.poboke.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>学军中学推理社2017届招新试题</title>
    <link href="https://www.poboke.com/the-reasoning-associations-entrance-examination.html"/>
    <id>https://www.poboke.com/the-reasoning-associations-entrance-examination.html</id>
    <published>2016-01-23T15:51:24.000Z</published>
    <updated>2021-08-25T14:53:00.844Z</updated>
    
    <content type="html"><![CDATA[<p>这份试题共10道，环环相扣，单看一道题或几道题，答不出结果。<br>只有把题目全看完，并作出正确的假设和推理，才能答对。</p><blockquote><p>1、这道题的答案是：<br>A.A　B.B　C.C　D.D</p><p>2、第5题的答案是：<br>A.C　B.D　C.A　D.B</p><p>3、以下选项中哪一题的答案与其他三项不同：<br>A.第3题　B.第6题　C.第2题　D.第4题</p><p>4、以下选项中哪两题的答案相同：<br>A.第1，5题　B.第2，7题　C.第1，9题　D.第6，10题</p><p>5、以下选项中哪一题的答案与本题相同：<br>A.第8题　B.第4题　C.第9题　D.第7题</p><p>6、以下选项中哪两题的答案与第8题相同：<br>A.第2，4题　B.第1，6题　C.第3，10题　D.第5，9题</p><p>7、在此十道题中，被选中次数最少的选项字母为：<br>A.C　B.B　C.A　D.D</p><p>8、以下选项中哪一题的答案与第1题的答案在字母表中不相邻：<br>A.第7题　B.第5题　C.第2题　D.第10题</p><p>9、已知“第1题与第6题的答案相同”与“第X题与第5题的答案相同”的真假性相反，那么X为：<br>A.第6题　B.第10题　C.第2题　D.第9题</p><p>10、在此十道题中，ABCD四个字母出现次数最多者与最少者的差为：<br>A.3　B.2　C.4　D.1</p><p>这10道题的答案为：<u>　　　　　　　　　　　</u>。</p></blockquote><p>以下是用python代码写的求解算法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">A = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">B = <span class="string">&#x27;B&#x27;</span></span><br><span class="line">C = <span class="string">&#x27;C&#x27;</span></span><br><span class="line">D = <span class="string">&#x27;D&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q1</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : A,</span><br><span class="line">        B : B,</span><br><span class="line">        C : C,</span><br><span class="line">        D : D,</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">1</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == answer[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q2</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : C,</span><br><span class="line">        B : D,</span><br><span class="line">        C : A,</span><br><span class="line">        D : B,</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">2</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == answer[<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q3</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : answer[<span class="number">3</span>],</span><br><span class="line">        B : answer[<span class="number">6</span>],</span><br><span class="line">        C : answer[<span class="number">2</span>],</span><br><span class="line">        D : answer[<span class="number">4</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">3</span>]]</span><br><span class="line">    values = options.values()</span><br><span class="line">    values.remove(option)</span><br><span class="line">    <span class="keyword">return</span> option <span class="keyword">not</span> <span class="keyword">in</span> values</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q4</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : (answer[<span class="number">1</span>], answer[<span class="number">5</span>]),</span><br><span class="line">        B : (answer[<span class="number">2</span>], answer[<span class="number">7</span>]),</span><br><span class="line">        C : (answer[<span class="number">1</span>], answer[<span class="number">9</span>]),</span><br><span class="line">        D : (answer[<span class="number">6</span>], answer[<span class="number">10</span>]),</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">4</span>]]</span><br><span class="line">    <span class="keyword">return</span> option[<span class="number">0</span>] == option[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q5</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : answer[<span class="number">8</span>],</span><br><span class="line">        B : answer[<span class="number">4</span>],</span><br><span class="line">        C : answer[<span class="number">9</span>],</span><br><span class="line">        D : answer[<span class="number">7</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">5</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == answer[<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q6</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : (answer[<span class="number">2</span>], answer[<span class="number">4</span>]),</span><br><span class="line">        B : (answer[<span class="number">1</span>], answer[<span class="number">6</span>]),</span><br><span class="line">        C : (answer[<span class="number">3</span>], answer[<span class="number">10</span>]),</span><br><span class="line">        D : (answer[<span class="number">5</span>], answer[<span class="number">9</span>]),</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">6</span>]]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(<span class="built_in">set</span>(<span class="built_in">list</span>(option) + [answer[<span class="number">8</span>]])) == <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q7</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : answer.count(C),</span><br><span class="line">        B : answer.count(B),</span><br><span class="line">        C : answer.count(A),</span><br><span class="line">        D : answer.count(D),</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">7</span>]]</span><br><span class="line">    <span class="keyword">return</span> option == <span class="built_in">min</span>(options.values())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q8</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : answer[<span class="number">7</span>],</span><br><span class="line">        B : answer[<span class="number">5</span>],</span><br><span class="line">        C : answer[<span class="number">2</span>],</span><br><span class="line">        D : answer[<span class="number">10</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">8</span>]]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(<span class="built_in">ord</span>(option) - <span class="built_in">ord</span>(answer[<span class="number">1</span>])) != <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q9</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : answer[<span class="number">6</span>],</span><br><span class="line">        B : answer[<span class="number">10</span>],</span><br><span class="line">        C : answer[<span class="number">2</span>],</span><br><span class="line">        D : answer[<span class="number">9</span>],</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">9</span>]]</span><br><span class="line">    assume1 = (answer[<span class="number">1</span>] == answer[<span class="number">6</span>])</span><br><span class="line">    assume2 = (option == answer[<span class="number">5</span>])</span><br><span class="line">    <span class="keyword">return</span> assume1 != assume2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Q10</span>():</span></span><br><span class="line">    options = &#123;</span><br><span class="line">        A : <span class="number">3</span>,</span><br><span class="line">        B : <span class="number">2</span>,</span><br><span class="line">        C : <span class="number">4</span>,</span><br><span class="line">        D : <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    option = options[answer[<span class="number">10</span>]]</span><br><span class="line">    keys = options.keys()</span><br><span class="line">    counts = [answer.count(key) <span class="keyword">for</span> key <span class="keyword">in</span> keys]</span><br><span class="line">    <span class="keyword">return</span> option == <span class="built_in">abs</span>(<span class="built_in">max</span>(counts) - <span class="built_in">min</span>(counts))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取10道题答案的全排列</span></span><br><span class="line">answers = itertools.product([A, B, C, D], repeat=<span class="number">10</span>)</span><br><span class="line"><span class="keyword">for</span> answer <span class="keyword">in</span> answers:</span><br><span class="line">    <span class="comment">#为了让代码更容易看懂，加了个下标占位符</span></span><br><span class="line">    answer = [<span class="string">&#x27;&#x27;</span>] + <span class="built_in">list</span>(answer)</span><br><span class="line">    <span class="keyword">if</span> Q1() <span class="keyword">and</span> Q2() <span class="keyword">and</span> Q3() <span class="keyword">and</span> Q4() <span class="keyword">and</span> Q5() <span class="keyword">and</span> \</span><br><span class="line">       Q6() <span class="keyword">and</span> Q7() <span class="keyword">and</span> Q8() <span class="keyword">and</span> Q9() <span class="keyword">and</span> Q10():</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join(answer)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><details><summary>点击查看答案：</summary><p>执行结果为：<code>BCACACDABA</code></p></details>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这份试题共10道，环环相扣，单看一道题或几道题，答不出结果。&lt;br&gt;只有把题目全看完，并作出正确的假设和推理，才能答对。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、这道题的答案是：&lt;br&gt;A.A　B.B　C.C　D.D&lt;/p&gt;
&lt;p&gt;2、第5题的答案是：&lt;br&gt;A.C　B</summary>
      
    
    
    
    <category term="娱乐天地" scheme="https://www.poboke.com/categories/%E5%A8%B1%E4%B9%90%E5%A4%A9%E5%9C%B0/"/>
    
    <category term="挑战智慧" scheme="https://www.poboke.com/categories/%E5%A8%B1%E4%B9%90%E5%A4%A9%E5%9C%B0/%E6%8C%91%E6%88%98%E6%99%BA%E6%85%A7/"/>
    
    
    <category term="Python" scheme="https://www.poboke.com/tags/Python/"/>
    
    <category term="智力题" scheme="https://www.poboke.com/tags/%E6%99%BA%E5%8A%9B%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Xcode程序员鼓励师插件Miku</title>
    <link href="https://www.poboke.com/miku-plugin-for-xcode.html"/>
    <id>https://www.poboke.com/miku-plugin-for-xcode.html</id>
    <published>2016-01-12T11:40:26.000Z</published>
    <updated>2021-08-31T16:13:18.506Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、插件介绍"><a href="#一、插件介绍" class="headerlink" title="一、插件介绍"></a>一、插件介绍</h3><p>最近Atom编辑器又出了一个插件：<a href="https://github.com/sunqibuhuake/atom-miku">atom-miku</a>，装上这个插件后编辑器会出现一个程序员鼓励师Miku，敲代码时Miku会唱歌和跳舞，停止敲代码时Miku的动作就慢了下来，简直是宅男的福音啊，效果如下：<br><img src="https://camo.githubusercontent.com/2a9d71a9ace9a9d2018cd18314376b100e998a5f/687474703a2f2f7777322e73696e61696d672e636e2f6c617267652f6232396535363333677731657a7176397170366565673230396e303934316b782e676966" class="lazyload placeholder" data-srcset="https://camo.githubusercontent.com/2a9d71a9ace9a9d2018cd18314376b100e998a5f/687474703a2f2f7777322e73696e61696d672e636e2f6c617267652f6232396535363333677731657a7176397170366565673230396e303934316b782e676966" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"><br>据说有人用了，而且带上耳机听背景音乐，结果第二天就被炒了，理由是上班看视频。</p><h3 id="二、插件原理"><a href="#二、插件原理" class="headerlink" title="二、插件原理"></a>二、插件原理</h3><p>下载查看<code>atom-miku</code>的源码，发现插件只是在编辑器里面嵌入了一个网页，网址为<code>http://miku-dancing.coding.io</code>。<br>当网页加载完毕时，会免费赠送10秒钟的播放时间，如果播放时间消耗完的话，Miku的动作就会变慢，音乐的音量也会变小。这时如果执行js代码<code>control.addFrame(seconds)</code>方法的话，播放时间就会增加，Miku又重新复活了。</p><p>可以说，网页里已经实现了大部分功能，如果要移植到Xcode的话，只需写出以下逻辑就行了：</p><ol><li>在代码编辑框上面加上一个WebView来加载网页。</li><li>WebView支持用鼠标拖动，防止有时候挡住代码。</li><li>hook代码编辑框输入文字时的方法，调用网页的<code>addFrame()</code>方法来增加播放时间。</li><li>由于网页的资源过大，在线加载速度比较慢，所以把网页都打包到插件里。</li></ol><h3 id="三、下载地址"><a href="#三、下载地址" class="headerlink" title="三、下载地址"></a>三、下载地址</h3><p>于是我便模仿着写了个<code>Xcode</code>的插件，可以在<code>Alcatraz</code>上搜索<code>Miku</code>进行安装：<br><img src="/assets/2016/01/miku_alcatraz.png" class="lazyload placeholder" data-srcset="/assets/2016/01/miku_alcatraz.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>插件代码下载地址为：<a href="https://github.com/poboke/Miku">https://github.com/poboke/Miku</a></p><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/poboke/Miku"><img src="https://github-readme-stats.vercel.app/api/pin/?username=poboke&repo=Miku&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=poboke&repo=Miku&show_owner=true" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></a>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、插件介绍&quot;&gt;&lt;a href=&quot;#一、插件介绍&quot; class=&quot;headerlink&quot; title=&quot;一、插件介绍&quot;&gt;&lt;/a&gt;一、插件介绍&lt;/h3&gt;&lt;p&gt;最近Atom编辑器又出了一个插件：&lt;a href=&quot;https://github.com/sunqibuhu</summary>
      
    
    
    
    <category term="学习园地" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/"/>
    
    <category term="编程开发" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="iOS" scheme="https://www.poboke.com/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://www.poboke.com/tags/Objective-C/"/>
    
    <category term="逆向" scheme="https://www.poboke.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Xcode代码注释自动缩进插件开发教程</title>
    <link href="https://www.poboke.com/write-an-indent-comments-plugin-for-xcode.html"/>
    <id>https://www.poboke.com/write-an-indent-comments-plugin-for-xcode.html</id>
    <published>2015-12-15T15:58:15.000Z</published>
    <updated>2021-08-31T16:13:03.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、插件需求"><a href="#一、插件需求" class="headerlink" title="一、插件需求"></a>一、插件需求</h3><p>自从公司启用代码review以来，每个开发者的代码风格渐渐保持一致了，看到规范统一的代码就是觉得比较舒服。</p><p>不过Xcode的代码注释功能一直用着很别扭，比如下面的例子：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注释前：</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.view.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注释后：</span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line"><span class="comment">//    self.view.backgroundColor = [UIColor whiteColor];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，Xcode只是在行开头加上注释符，注释后的代码缩进对不齐，很难看。这对患有神经感官歇斯底里毛细血管穿梭图鲁西斯症候群（简称强迫症）的人来说，是一件非常痛苦的事情。</p><p>在stackoverflow搜了一下，发现有人也提了这个问题，然后有个人回答说：</p><blockquote><ol><li>你先按<code>command + [</code>把代码往左缩进到最前面</li><li>再按<code>command + /</code>注释代码</li><li>最后按<code>command + ]</code>把代码往右缩进</li></ol></blockquote><p>结果这条回答被采纳为最差答案。</p><p>所以我只能自己写个插件来让注释自动缩进了，首先新建一个Xcode插件工程，比较详细的创建过程可以见<a href="/write-a-xcode-plugin-to-auto-select-all-targets.html">《Xcode插件AllTargets开发教程》</a>。</p><h3 id="二、编写过程"><a href="#二、编写过程" class="headerlink" title="二、编写过程"></a>二、编写过程</h3><p>一开始要先整理一下写插件的思路，我们使用快捷键<code>command + /</code>的时候，Xcode肯定会调用一个方法来注释代码，这个方法实现的功能应该是在代码行最前面加上<code>//</code>注释符。<br>而当我们写的代码有缩进的话，缩进的地方都是空格，所以我们可以hook注释的方法，把注释符改为插入到第一个非空格字符前就行了。</p><p>接下来就开始查找代码注释的方法了，首先在Xcode的私有类头文件里搜索<code>comment</code>，可以发现一个比较可疑的方法：<code>- (void)commentAndUncommentCurrentLines:(id)arg1;</code>，hook这个方法，把参数<code>arg1</code>打印出来，参考代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&quot;DVTSourceTextView+Hook.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">DVTSourceTextView</span> (<span class="title">Hook</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)hook</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span> jr_swizzleMethod:<span class="keyword">@selector</span>(commentAndUncommentCurrentLines:)</span><br><span class="line">                withMethod:<span class="keyword">@selector</span>(hook_commentAndUncommentCurrentLines:)</span><br><span class="line">                     error:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)hook_commentAndUncommentCurrentLines:(<span class="keyword">id</span>)arg1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, arg1);</span><br><span class="line">    [<span class="keyword">self</span> hook_commentAndUncommentCurrentLines:arg1];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>使用<code>command + /</code>对代码进行注释和反注释，输出结果为：</p><blockquote><p>&lt;NSMenuItem: 0x7f9ec494c8f0 Comment Selection&gt;<br>&lt;NSMenuItem: 0x7f9ec494c8f0 Uncomment Selection&gt;</p></blockquote><p>由此可知，使用快捷键注释，实际上是调用了Xcode菜单栏点击的方法。而当我们注释代码时，会有log打印，也说明找对了方法。</p><p><code>commentAndUncommentCurrentLines:</code>这个方法位于<code>DVTSourceTextView</code>类中，而这个类位于<code>DVTKit.framework</code>里，接下来打开反汇编软件<code>Hopper Disassembler</code>，把<code>DVTKit.framework</code>拖进去进行反汇编。</p><p>搜索并选中<code>commentAndUncommentCurrentLines:</code>方法，按<code>alt + enter</code>生成伪代码，由于代码太长所以只贴出关键代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> -[DVTSourceTextView commentAndUncommentCurrentLines:](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd, <span class="keyword">void</span> * arg2)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    rax = (r12)(r15, <span class="keyword">@selector</span>(stringByTogglingCommentsInLineRange:), rdx, r13);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上面的代码可知，<code>stringByTogglingCommentsInLineRange:</code>方法返回了注释或反注释后的字符串，接着再搜索并查看该方法的伪代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> * -[DVTSourceLanguageService stringByTogglingCommentsInLineRange:](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd, <span class="keyword">struct</span> _NSRange arg2) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (var_70 == <span class="number">0x2</span>) &#123;</span><br><span class="line">        rbx = [[rdi stringByUncommentingString:r15] <span class="keyword">retain</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        rbx = [[rdi stringByCommentingString:r15] <span class="keyword">retain</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，继续查看<code>stringByCommentingString:</code>方法的伪代码：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> * -[DVTSourceLanguageService stringByCommentingString:](<span class="keyword">void</span> * <span class="keyword">self</span>, <span class="keyword">void</span> * _cmd, <span class="keyword">void</span> * arg2)</span><br><span class="line">&#123;</span><br><span class="line">    rdx = arg2;</span><br><span class="line">    r15 = <span class="keyword">self</span>;</span><br><span class="line">    r12 = [rdx <span class="keyword">retain</span>];</span><br><span class="line">    r14 = *objc_msgSend;</span><br><span class="line">    rbx = [[r15 lineCommentPrefixes] <span class="keyword">retain</span>];</span><br><span class="line">    r13 = [[rbx firstObject] <span class="keyword">retain</span>];</span><br><span class="line">    [rbx release];</span><br><span class="line">    <span class="keyword">if</span> ([r13 length] != <span class="number">0x0</span>) &#123;</span><br><span class="line">            r15 = r13;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">            r14 = *objc_msgSend;</span><br><span class="line">            var_30 = r12;</span><br><span class="line">            rbx = [[r15 blockCommentCircumfixes] <span class="keyword">retain</span>];</span><br><span class="line">            r12 = [[rbx firstObject] <span class="keyword">retain</span>];</span><br><span class="line">            r15 = *objc_release;</span><br><span class="line">            [rbx release];</span><br><span class="line">            rbx = r15;</span><br><span class="line">            r15 = [[r12 firstObject] <span class="keyword">retain</span>];</span><br><span class="line">            [r13 release];</span><br><span class="line">            r13 = [[r12 lastObject] <span class="keyword">retain</span>];</span><br><span class="line">            [r12 release];</span><br><span class="line">            <span class="keyword">if</span> (r13 != <span class="number">0x0</span>) &#123;</span><br><span class="line">                    r12 = [[var_30 stringByAppendingString:r13] <span class="keyword">retain</span>];</span><br><span class="line">                    (rbx)(var_30, <span class="keyword">@selector</span>(stringByAppendingString:));</span><br><span class="line">                    (rbx)(r13, <span class="keyword">@selector</span>(stringByAppendingString:));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                    r12 = var_30;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rbx = [[r15 stringByAppendingString:r12] <span class="keyword">retain</span>];</span><br><span class="line">    r14 = *objc_release;</span><br><span class="line">    [r12 release];</span><br><span class="line">    [r15 release];</span><br><span class="line">    rdi = rbx;</span><br><span class="line">    rax = [rdi autorelease];</span><br><span class="line">    <span class="keyword">return</span> rax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法的作用是把待注释的代码加上注释符进行注释，这也是Xcode注释代码的具体实现方法，将伪代码翻译成OC代码为：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)stringByCommentingString:(<span class="built_in">NSString</span> *)commentingString</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *lineCommentPrefix = [<span class="keyword">self</span>.lineCommentPrefixes firstObject];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (lineCommentPrefix.length == <span class="number">0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用 `/* */` 注释块</span></span><br><span class="line">        <span class="built_in">NSArray</span> *blockCommentCircumfix = [<span class="keyword">self</span>.blockCommentCircumfixes firstObject];</span><br><span class="line">        lineCommentPrefix = [blockCommentCircumfix firstObject];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSString</span> *lineCommentSuffix = [blockCommentCircumfix lastObject];</span><br><span class="line">        <span class="keyword">if</span> (lineCommentSuffix) &#123;</span><br><span class="line">            commentingString = [commentingString stringByAppendingString:lineCommentSuffix];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在待注释的代码最前面加上注释符</span></span><br><span class="line">    <span class="keyword">return</span> [lineCommentPrefix stringByAppendingString:commentingString];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此我们可以hook这个方法，在第一个非空格字符的位置插入注释符。<br>如果某一行代码是空行的话，就不需要注释了，我看了大部分的编辑器都是这么处理的。<br>参考代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)hook_stringByCommentingString:(<span class="built_in">NSString</span> *)commentingString</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *lineCommentPrefix = [<span class="keyword">self</span>.lineCommentPrefixes firstObject];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (lineCommentPrefix.length == <span class="number">0</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用 `/* */` 注释块</span></span><br><span class="line">        <span class="built_in">NSArray</span> *blockCommentCircumfix = [<span class="keyword">self</span>.blockCommentCircumfixes firstObject];</span><br><span class="line">        lineCommentPrefix = [blockCommentCircumfix firstObject];</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSString</span> *lineCommentSuffix = [blockCommentCircumfix lastObject];</span><br><span class="line">        <span class="keyword">if</span> (lineCommentSuffix) &#123;</span><br><span class="line">            commentingString = [commentingString stringByAppendingString:lineCommentSuffix];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断代码是否含有非空格字符</span></span><br><span class="line">    <span class="built_in">NSRange</span> range = [commentingString rangeOfString:<span class="string">@&quot;[^\\s]&quot;</span> options:<span class="built_in">NSRegularExpressionSearch</span>];</span><br><span class="line">    <span class="keyword">if</span> (range.location == <span class="built_in">NSNotFound</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果没有非空格字符，就不注释</span></span><br><span class="line">        <span class="keyword">return</span> commentingString;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在第一个非空格字符的位置插入注释符</span></span><br><span class="line">    <span class="built_in">NSMutableString</span> *mutableString = [commentingString mutableCopy];</span><br><span class="line">    [mutableString insertString:lineCommentPrefix atIndex:range.location];</span><br><span class="line">    <span class="keyword">return</span> [mutableString <span class="keyword">copy</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、下载地址"><a href="#三、下载地址" class="headerlink" title="三、下载地址"></a>三、下载地址</h3><p>安装插件后，使用效果如下所示：<br><img src="https://cdn.jsdelivr.net/gh/poboke/IndentComments/Screenshots/about.gif" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/poboke/IndentComments/Screenshots/about.gif" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><p>插件代码下载地址为：<a href="https://github.com/poboke/IndentComments">https://github.com/poboke/IndentComments</a></p><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/poboke/IndentComments"><img src="https://github-readme-stats.vercel.app/api/pin/?username=poboke&repo=IndentComments&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=poboke&repo=IndentComments&show_owner=true" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></a>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、插件需求&quot;&gt;&lt;a href=&quot;#一、插件需求&quot; class=&quot;headerlink&quot; title=&quot;一、插件需求&quot;&gt;&lt;/a&gt;一、插件需求&lt;/h3&gt;&lt;p&gt;自从公司启用代码review以来，每个开发者的代码风格渐渐保持一致了，看到规范统一的代码就是觉得比较舒服。&lt;</summary>
      
    
    
    
    <category term="学习园地" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/"/>
    
    <category term="编程开发" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="iOS" scheme="https://www.poboke.com/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://www.poboke.com/tags/Objective-C/"/>
    
    <category term="逆向" scheme="https://www.poboke.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Xcode装逼插件ActivatePowerMode</title>
    <link href="https://www.poboke.com/activate-power-mode-plugin-for-xcode.html"/>
    <id>https://www.poboke.com/activate-power-mode-plugin-for-xcode.html</id>
    <published>2015-12-06T16:02:26.000Z</published>
    <updated>2021-08-31T16:13:38.247Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、插件介绍"><a href="#一、插件介绍" class="headerlink" title="一、插件介绍"></a>一、插件介绍</h3><p>最近微博上在流传一个Atom编辑器的插件:<a href="https://github.com/JoelBesada/activate-power-mode">activate-power-mode</a>，装上这个插件后打字会有震屏和火花效果，非常牛逼，效果如下：<br><img src="https://cloud.githubusercontent.com/assets/688415/11453297/b8f249ec-9605-11e5-978c-eb3bb21eecd8.gif" class="lazyload placeholder" data-srcset="https://cloud.githubusercontent.com/assets/688415/11453297/b8f249ec-9605-11e5-978c-eb3bb21eecd8.gif" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>据说有人用了，并且还是机械键盘，差点被同事打断手了。</p><p>于是我花了几天的下班时间，写了个Xcode版的插件，模仿了这个效果：<br><img src="https://cdn.jsdelivr.net/gh/poboke/ActivatePowerMode/Screenshots/about.gif" class="lazyload placeholder" data-srcset="https://cdn.jsdelivr.net/gh/poboke/ActivatePowerMode/Screenshots/about.gif" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg" alt="image"></p><h3 id="二、下载地址"><a href="#二、下载地址" class="headerlink" title="二、下载地址"></a>二、下载地址</h3><p>插件可以在Alcatraz上搜索<code>ActivatePowerMode</code>进行安装。<br><img src="/assets/2015/12/activate-alcatraz.png" class="lazyload placeholder" data-srcset="/assets/2015/12/activate-alcatraz.png" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"></p><p>插件代码下载地址为：<a href="https://github.com/poboke/ActivatePowerMode">https://github.com/poboke/ActivatePowerMode</a></p><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/poboke/ActivatePowerMode"><img src="https://github-readme-stats.vercel.app/api/pin/?username=poboke&repo=ActivatePowerMode&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=poboke&repo=ActivatePowerMode&show_owner=true" srcset="https://cdn.jsdelivr.net/gh/volantis-x/cdn-volantis@3/img/placeholder/c617bfd2497fcea598e621413e315c368f8d8e.svg"/></a><h3 id="三、开发过程"><a href="#三、开发过程" class="headerlink" title="三、开发过程"></a>三、开发过程</h3><p>这些功能实现起来也不难，主要是获取光标所在位置的代码颜色花了比较多时间。</p><p>我一开始以为代码高亮的颜色是由<code>NSAttributedString</code>控制的，但是我获取到的属性里只有字体字号等属性，没有<code>NSForegroundColorAttributeName</code>这个字段，所以只能用别的方法寻找。</p><p>用逆向思维思考一下，因为代码高亮是由配色方案管理的，切换配色方案时，代码颜色就会改变。而配色方案是根据单词的类型来设置颜色的，所以猜想可能存在某个方法，可以读取或设置某个范围的文字的颜色，这样才方便配色方案功能的实现。</p><p>先用关键字<code>color</code>在Xcode的私有类头文件里搜索，把搜到的方法名输出到一个文本里。然后再用关键字<code>NSRange</code>搜索，很快就发现了一个可疑的方法：<code>- (id)colorAtCharacterIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange *)arg2 context:(id)arg3</code>。然后再hook这个方法，果然返回了相应的颜色。</p><h4 id="1、获取编辑文字时的事件"><a href="#1、获取编辑文字时的事件" class="headerlink" title="1、获取编辑文字时的事件"></a>1、获取编辑文字时的事件</h4><p>代码编辑框一般都是用<code>NSTextView</code>来实现的，所以要找到<code>NSTextView</code>的代理方法。</p><p>我之前写过一篇文章<a href="/write-a-xcode-plugin-to-auto-select-all-targets.html">《Xcode插件AllTargets开发教程》</a>，按照里面的方法，可以找到代码编辑区域视图的类名为<code>IDESourceCodeEditorContainerView</code>。</p><p>该类的头文件的部分代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">IDESourceCodeEditorContainerView</span> : <span class="title">DVTLayoutView_ML</span></span></span><br><span class="line">&#123;</span><br><span class="line">    IDESourceCodeEditor *_editor;</span><br><span class="line">    IDEViewController *_toolbarViewController;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br></pre></td></tr></table></figure><p><code>IDESourceCodeEditor</code>类里面用到了<code>NSTextViewDelegate</code>代理，编辑文字时会调用<code>textView:shouldChangeTextInRange:replacementString:</code>方法，所以可以hook这个方法。</p><h4 id="2、如何实现震屏效果"><a href="#2、如何实现震屏效果" class="headerlink" title="2、如何实现震屏效果"></a>2、如何实现震屏效果</h4><p>原版的插件是用<code>CoffeeScript</code>写的，震屏代码如下：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">shake: <span class="function">-&gt;</span></span><br><span class="line">  intensity = <span class="number">1</span> + <span class="number">2</span> * <span class="built_in">Math</span>.random()</span><br><span class="line">  x = intensity * (<span class="keyword">if</span> <span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span> <span class="keyword">then</span> <span class="number">-1</span> <span class="keyword">else</span> <span class="number">1</span>)</span><br><span class="line">  y = intensity * (<span class="keyword">if</span> <span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span> <span class="keyword">then</span> <span class="number">-1</span> <span class="keyword">else</span> <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  @editorElement.style.top = <span class="string">&quot;<span class="subst">#&#123;y&#125;</span>px&quot;</span></span><br><span class="line">  @editorElement.style.left = <span class="string">&quot;<span class="subst">#&#123;x&#125;</span>px&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span> =&gt;</span><br><span class="line">    @editorElement.style.top = <span class="string">&quot;&quot;</span></span><br><span class="line">    @editorElement.style.left = <span class="string">&quot;&quot;</span></span><br><span class="line">  , <span class="number">75</span></span><br></pre></td></tr></table></figure><p>也就是x轴和y轴随机产生1到3像素的偏移，编辑框的原点坐标移动到这个偏移位置。<br>经过75毫秒后，再把编辑框的原点坐标改为(0, 0)。</p><p>在OC中可以通过修改编辑框的frame值来更改编辑框的位置，时间延迟可以使用<code>dispatch_after</code>方法。</p><h4 id="3、如何实现火花粒子效果"><a href="#3、如何实现火花粒子效果" class="headerlink" title="3、如何实现火花粒子效果"></a>3、如何实现火花粒子效果</h4><p>先看一下原插件的代码：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">spawnParticles: <span class="function"><span class="params">(range)</span> -&gt;</span></span><br><span class="line">  cursorOffset = @calculateCursorOffset()</span><br><span class="line"></span><br><span class="line">  &#123;left, top&#125; = @editor.pixelPositionForScreenPosition range</span><br><span class="line">  left += cursorOffset.left - @editor.getScrollLeft()</span><br><span class="line">  top += cursorOffset.top - @editor.getScrollTop()</span><br><span class="line"></span><br><span class="line">  color = @getColorAtPosition left, top</span><br><span class="line">  numParticles = <span class="number">5</span> + <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">10</span>)</span><br><span class="line">  <span class="keyword">while</span> numParticles--</span><br><span class="line">    part =  @createParticle left, top, color</span><br><span class="line">    @particles[@particlePointer] = part</span><br><span class="line">    @particlePointer = (@particlePointer + <span class="number">1</span>) % <span class="number">500</span></span><br><span class="line"></span><br><span class="line">createParticle: <span class="function"><span class="params">(x, y, color)</span> -&gt;</span></span><br><span class="line">  x: x</span><br><span class="line">  y: y</span><br><span class="line">  alpha: <span class="number">1</span></span><br><span class="line">  color: color</span><br><span class="line">  velocity:</span><br><span class="line">    x: <span class="number">-1</span> + <span class="built_in">Math</span>.random() * <span class="number">2</span></span><br><span class="line">    y: <span class="number">-3.5</span> + <span class="built_in">Math</span>.random() * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">drawParticles: <span class="function">-&gt;</span></span><br><span class="line">  requestAnimationFrame @drawParticles.bind(<span class="built_in">this</span>)</span><br><span class="line">  @context.clearRect <span class="number">0</span>, <span class="number">0</span>, @canvas.width, @canvas.height</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> particle <span class="keyword">in</span> @particles</span><br><span class="line">    <span class="keyword">continue</span> <span class="keyword">if</span> particle.alpha &lt;= <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">    particle.velocity.y += <span class="number">0.075</span></span><br><span class="line">    particle.x += particle.velocity.x</span><br><span class="line">    particle.y += particle.velocity.y</span><br><span class="line">    particle.alpha *= <span class="number">0.96</span></span><br><span class="line"></span><br><span class="line">    @context.fillStyle = <span class="string">&quot;rgba(<span class="subst">#&#123;particle.color[<span class="number">4.</span>..<span class="number">-1</span>]&#125;</span>, <span class="subst">#&#123;particle.alpha&#125;</span>)&quot;</span></span><br><span class="line">    @context.fillRect(</span><br><span class="line">      <span class="built_in">Math</span>.round(particle.x - <span class="number">1.5</span>)</span><br><span class="line">      <span class="built_in">Math</span>.round(particle.y - <span class="number">1.5</span>)</span><br><span class="line">      <span class="number">3</span>, <span class="number">3</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>通过<code>spawnParticles</code>方法随机创建5到15个粒子，保存到粒子数组里，数组上限是500个。<br>使用<code>createParticle</code>创建一个粒子，随机产生x轴和y轴的初始速度，y轴的初始速度越大，创建的粒子就跳得越高。<br>然后定时器每隔一段时间执行，粒子以加速度的方式下落，透明度逐渐减少。</p><p>由于我对Mac编程不太熟悉，所以使用了<code>NSView</code>来创建粒子，不知道有没有更好的方法。</p><h4 id="4、获取光标所在的位置"><a href="#4、获取光标所在的位置" class="headerlink" title="4、获取光标所在的位置"></a>4、获取光标所在的位置</h4><p>获取光标所在的位置，以便在这个位置喷出火花，花了很多时间才找到这个方法。</p><p>可以通过<code>rectArrayForCharacterRange:withinSelectedCharacterRange:inTextContainer:rectCount:</code>方法来获取光标所在的位置。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、插件介绍&quot;&gt;&lt;a href=&quot;#一、插件介绍&quot; class=&quot;headerlink&quot; title=&quot;一、插件介绍&quot;&gt;&lt;/a&gt;一、插件介绍&lt;/h3&gt;&lt;p&gt;最近微博上在流传一个Atom编辑器的插件:&lt;a href=&quot;https://github.com/JoelB</summary>
      
    
    
    
    <category term="学习园地" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/"/>
    
    <category term="编程开发" scheme="https://www.poboke.com/categories/%E5%AD%A6%E4%B9%A0%E5%9B%AD%E5%9C%B0/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="iOS" scheme="https://www.poboke.com/tags/iOS/"/>
    
    <category term="Objective-C" scheme="https://www.poboke.com/tags/Objective-C/"/>
    
  </entry>
  
</feed>
